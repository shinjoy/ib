<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="work">

	<typeAlias  alias="egovMap" type="egovframework.rte.psl.dataaccess.util.EgovMap"/>
	<typeAlias  alias="workVO" type="ib.work.service.WorkVO"/>
	<typeAlias  alias="cusVO" type="ib.work.service.CusBasicConnectVO"/>
	<typeAlias  alias="fileVO" type="ib.cmm.FileUpDbVO"/>
	<typeAlias  alias="staffVO" type="ib.login.service.StaffVO"/>
	<typeAlias  alias="cpnVO" type="ib.basic.service.CpnExcelVO"/>
	<typeAlias  alias="rcmdVO" type="ib.recommend.service.RecommendVO"/>

	<resultMap id="WorkMapDetail" class="ib.work.service.WorkVO">
		<result property="sNb"    	column="S_NB"    	columnIndex="1"/>
	</resultMap>

<!-- 업무일지 -->
	<select id="workDAO.selectBusinessRecordList" parameterClass="workVO" resultClass="workVO">
			SELECT
				  A.S_NB                as  sNb
				, A.TM_DT         		as  tmDt
				, A.NAME                as  name
				, A.PRIVATE             as  bsnsRecPrivate
				, IFNULL(A.TITLE,"-")   as  title
				, IFNULL(A.PROCESS,"-") as  process
				, B.CD_NM               as  processNm
			FROM IB_BUSINESS_RECORD A
		LEFT JOIN IB_COMMON_CODE B ON MENU_CD = '00010' AND DTAIL_CD = A.PROCESS
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="bsnsRecPrivate">
				A.PRIVATE = #bsnsRecPrivate#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="choice_month">
				A.TM_DT between CONCAT (#choice_year#, #choice_month#, '01') and CONCAT (#choice_year#, #choice_month#, '31235959')
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="name">
				A.NAME = #name#
			</isNotEmpty>
		</dynamic>
			ORDER BY A.NAME, A.TM_DT ASC
	</select>

	<select id="workDAO.selectBusinessRecordOne" parameterClass="workVO" resultClass="workVO">
			SELECT
				  A.S_NB                as  sNb
				, A.TM_DT         		as  tmDt
				, A.NAME                as  name
				, A.PRIVATE             as  bsnsRecPrivate
				, IFNULL(A.TITLE,"-")   as  title
				, IFNULL(A.NOTE,"-")    as  note
			FROM IB_BUSINESS_RECORD A
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="sNb">
				A.S_NB = #sNb#
			</isNotEmpty>
		</dynamic>
	</select>

	<select id="workDAO.selectStaffList" parameterClass="staffVO" resultClass="staffVO">
		<![CDATA[
			SELECT
				  S_NB                as  sNb
				, CUS_ID              as  cstId
				, USR_ID              as  usrId
				, USR_NM              as  usrNm
				, JOIN_DT             as  joinDt
				, SRT_CD              as  srtCd
				
				, PERMISSION		  as permission
				
			FROM IB_STAFF
			WHERE SRT_CD <> '10000' AND SRT_CD < 201
		]]>
			<isNotEqual property="tmpNum1" compareValue="notInHere">
			  	<![CDATA[ AND SRT_CD <> '00000'		]]>
			</isNotEqual>
			<isNotEmpty prepend="AND" property="usrNm">
				<![CDATA[	USR_NM = #usrNm# 		]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="srtCd">
				<![CDATA[	SRT_CD != #srtCd# 		]]>
			</isNotEmpty>
			ORDER BY
			<isNotEmpty property="srtCd"> SRT_CD, </isNotEmpty>
			USR_NM ASC
			<isNotEmpty property="limit">
			limit 0, 9
			</isNotEmpty>
	</select>

	<select id="workDAO.selectStaffListWithoutJoinDt" parameterClass="staffVO" resultClass="staffVO">
		<![CDATA[
			SELECT
				  S_NB                as  sNb
				, CUS_ID              as  cstId
				, USR_ID              as  usrId
				, USR_NM              as  usrNm
				, JOIN_DT             as  joinDt
				, SRT_CD              as  srtCd
			FROM IB_STAFF
			WHERE SRT_CD <> '10000'
			  AND JOIN_DT IS NOT NULL
		]]>
			<isNotEqual property="tmpNum1" compareValue="notInHere">
			  	<![CDATA[ AND SRT_CD <> '00000'		]]>
			</isNotEqual>
			<isNotEmpty prepend="AND" property="usrNm">
				<![CDATA[	USR_NM = #usrNm# 		]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="srtCd">
				<![CDATA[	SRT_CD != #srtCd# 		]]>
			</isNotEmpty>
			ORDER BY
			<isNotEmpty property="srtCd"> SRT_CD, </isNotEmpty>
			USR_NM ASC
			<isNotEmpty property="limit">
			limit 0, 9
			</isNotEmpty>
	</select>

	<select id="workDAO.selectStaffList4ib" parameterClass="staffVO" resultClass="staffVO">
		<![CDATA[
			SELECT
				  S_NB                as  sNb
				, CUS_ID              as  cstId
				, USR_ID              as  usrId
				, USR_NM              as  usrNm
				, JOIN_DT             as  joinDt
			FROM IB_STAFF
			WHERE SRT_CD <> '10000'
		]]>
			<isNotEmpty prepend="AND" property="usrNm">
				<![CDATA[	USR_NM = #usrNm# 		]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="srtCd">
				<![CDATA[	SRT_CD < #srtCd# 		]]>
			</isNotEmpty>
			ORDER BY
			<isNotEmpty property="srtCd"> SRT_CD, </isNotEmpty>
			USR_NM ASC

	</select>

	<select id="workDAO.selectOutStaffList" parameterClass="staffVO" resultClass="egovMap">
		<![CDATA[
			SELECT
				  USR_ID              as  usrId
				, USR_NM              as  usrNm
			FROM IB_STAFF
			WHERE SRT_CD = '10000'
		]]>
			<isNotEmpty prepend="AND" property="division">
				division = #division#	
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="usrNm">
				<![CDATA[	USR_NM = #usrNm# 		]]>
			</isNotEmpty>
			ORDER BY USR_NM ASC
	</select>

	<select id="workDAO.getStaffName" parameterClass="java.lang.String" resultClass="java.lang.String">
		<![CDATA[
			SELECT
				USR_NM              as  usrNm
			FROM IB_STAFF
			WHERE USR_ID = #rgId#
		]]>
	</select>

	<insert id="workDAO.insertBusinessRecord">
		INSERT INTO IB_BUSINESS_RECORD
				  select s_nb + 1
				  
				  <isNotEmpty property="sabunForName">
				    , (SELECT USR_NM FROM IB_STAFF WHERE SABUN = #sabunForName#)
				  </isNotEmpty>
				  <isEmpty  property="sabunForName">
				  	, #name#
				  </isEmpty>
		 		  
				  , #title#
				  , #note#
				  
				  <isNotEmpty property="process">
				  , #process#
				  </isNotEmpty>				  
				  <isEmpty property="process">
				  , '00001'
				  </isEmpty>
				  
				  , #bsnsRecPrivate#
				  , concat(#tmDt#, date_format(now(), '%H%i%s'))
				  , now()
				  , now()
				  				  
				  <isNotEmpty property="sabunForName">
				    , (SELECT USR_ID FROM IB_STAFF WHERE SABUN = #sabunForName#)
				    , (SELECT USR_ID FROM IB_STAFF WHERE SABUN = #sabunForName#)
				  </isNotEmpty>
				  <isEmpty  property="sabunForName">
				  	, #rgId#
				  	, #rgId#
				  </isEmpty>
				  				  
				  from ib_business_record order by s_nb desc limit 1
		
		<selectKey keyProperty="s_nb" resultClass="string">
			SELECT s_nb from ib_business_record order by s_nb desc limit 1
		</selectKey>
		
		/* workDAO.insertBusinessRecord */
	</insert>


	<update id="workDAO.updateBusinessRecord">
			UPDATE IB_BUSINESS_RECORD
			SET
				  TITLE     =  #title#
				, NOTE      =  #note#

				<isNotEmpty property="process">
				, PROCESS	= #process#
				</isNotEmpty>
				
				<isNotEmpty property="tmDt">
				, TM_DT		= #tmDt#
				</isNotEmpty>
				  
				<isNotEmpty property="bsnsRecPrivate">
				, PRIVATE	= #bsnsRecPrivate#
				</isNotEmpty>

				, UP_DT     = now()
				, UP_ID     = #rgId#
				
			WHERE S_NB      = #sNb#
			
		/* workDAO.updateBusinessRecord */
	</update>

	<update id="workDAO.updatePrecessResult">
		<![CDATA[
			UPDATE IB_BUSINESS_RECORD
			SET
				  PROCESS   =  #process#
				, UP_DT     =  now()
				, UP_ID     =  #rgId#
			WHERE S_NB      =  #sNb#
		]]>
	</update>

	<delete id="workDAO.deleteBusinessRecord">
		<![CDATA[
			DELETE FROM IB_BUSINESS_RECORD
			 WHERE S_NB      =  #sNb#
		]]>
	</delete>

	<delete id="workDAO.deleteOffer">
		<![CDATA[
			DELETE FROM IB_OFFER
			 WHERE S_NB      =  #sNb#
		]]>
	</delete>


	<!-- memo 리스트 -->
	<select id="workDAO.selectMemoList" parameterClass="workVO" resultClass="workVO">		
		   SELECT
				  A.S_NB                	as sNb
				, A.MAIN_SNB            	as mainSnb
				, A.STTS_CD             	as sttsCd
				, A.PRIVATE             	as priv
				, A.MAJOR               	as major
				, A.IMPORTANCE          	as importance
				, DATE(A.TM_DT)         	as tmDt
				<!-- , DATE(A.RG_DT)				as tmDt -->
				, DATE(A.RG_DT)				as rgDt
				, LEFT(TIME(A.RG_DT), 5)	as tmDtTime
				, A.NAME
				,(SELECT TEAM FROM IB_STAFF WHERE USR_NM = A.NAME)				as memoDeptId
				,(SELECT DIVISION FROM IB_STAFF WHERE USR_NM = A.NAME)			as division
				
				<!-- , case when a.private='Y' then aes_decrypt(unhex(a.comment), md5(a.rg_id)) else IFNULL(A.COMMENT,"-") end as  comment -->
				<isEmpty property="sNb">
				<!-- , LEFT(IF(a.private='Y', aes_decrypt(unhex(a.comment), md5(a.rg_id)), IFNULL(A.COMMENT,"-")), 30) as  comment -->			<!-- 목록조회일때 짧게 -->
					<isEmpty property="comment">
					, LEFT(IF(a.private='Y', aes_decrypt(unhex(a.comment), md5(a.rg_id)), IFNULL(A.COMMENT,"-")), 30) as  comment			<!-- 목록조회일때 짧게 -->
					</isEmpty>
					<isNotEmpty property="comment">
					, case when a.private='Y' then aes_decrypt(unhex(a.comment), md5(a.rg_id)) else IFNULL(A.COMMENT,"-") end as  comment	<!-- 단건 조회시 원본 -->
					</isNotEmpty>
				</isEmpty>
				<isNotEmpty property="sNb">
				, case when a.private='Y' then aes_decrypt(unhex(a.comment), md5(a.rg_id)) else IFNULL(A.COMMENT,"-") end as  comment	<!-- 단건 조회시 원본 -->
				</isNotEmpty>
				
				<!-- 
				<isNotEmpty property="sNb">
				, case when a.private='Y' then aes_decrypt(unhex(a.comment), md5(a.rg_id)) else IFNULL(A.COMMENT,"-") end as  comment
				</isNotEmpty>
				<isEmpty property="sNb">
				, IFNULL(A.COMMENT,"-")  as  comment
				</isEmpty>
				 -->
				, A.RG_ID				as rgId
				, B.USR_NM              as rgNm
				, A.UP_ID               as upId
				, case when j1.realNm is null then GROUP_CONCAT(J2.realNm SEPARATOR '^^^') else GROUP_CONCAT(J1.realNm SEPARATOR '^^^') end   as realNm
				, case when j1.makeNm is null then GROUP_CONCAT(J2.makeNm SEPARATOR '^^^') else GROUP_CONCAT(J1.makeNm SEPARATOR '^^^') end   as makeNm
				
				,(select count(1) from ib_comment where main_snb = (case when a.main_snb = 0 then a.s_nb else a.main_snb end)) as grpMemCnt	<!-- 참여자수 -->
				,(select name from ib_comment where  main_snb = (case when a.main_snb = 0 then a.s_nb else a.main_snb end) limit 1) as grpMemOne	<!-- 수신자 1명(대표수신자) -->
				
				, A.MEMO_TYPE			AS memoType
				, (SELECT CD_NM
					 FROM IB_COMMON_CODE
					WHERE MENU_CD = '00026'
					  AND DTAIL_CD = A.MEMO_TYPE)	AS memoTypeNm
				
				, (SELECT COUNT(*) FROM IB_COMMENT WHERE MAIN_SNB = A.S_NB AND STTS_CD = '00002')	AS readCnt
				
			FROM IB_COMMENT A
			LEFT JOIN IB_STAFF B ON B.USR_ID = IF(A.RG_ID = '' OR A.RG_ID IS NULL, '-1', A.RG_ID)
			LEFT OUTER JOIN
					(SELECT OFFER_S_NB
						  , REAL_NAME as realNm
						  , MAKE_NAME as makeNm
					   FROM IB_FILE_INFO
					  WHERE FILE_CATEGORY = '00004'
	
					) J1 ON A.S_NB = J1.OFFER_S_NB
			LEFT OUTER JOIN
					(SELECT OFFER_S_NB
						  , REAL_NAME as realNm
						  , MAKE_NAME as makeNm
					   FROM IB_FILE_INFO
					  WHERE FILE_CATEGORY = '00004'
	
					) J2 ON A.MAIN_SNB = J2.OFFER_S_NB
		
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="choice_month">
				<![CDATA[	A.TM_DT between CONCAT (#choice_year#, #choice_monthS#, '01') and CONCAT (#choice_year#, #choice_month#, '31235959') 		]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="name">
				<![CDATA[	A.NAME = #name# 		]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="comment">
				<![CDATA[	( A.COMMENT like CONCAT('%',#comment#,'%') or (aes_decrypt(unhex(a.comment), md5(a.rg_id))) like CONCAT('%',#comment#,'%') ) 		]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="tmDt">
				<![CDATA[	A.TM_DT = #tmDt# 		]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="rgId">
				<![CDATA[	A.RG_ID = #rgId# 		]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="sNb">
				<![CDATA[	A.S_NB = #sNb# 		]]>
			</isNotEmpty>
		</dynamic>
		
		group by a.s_nb
			ORDER BY
			<isEqual property="memo4db" compareValue=""> A.TM_DT ASC, A.RG_DT ASC </isEqual>
			<isEqual property="memo4db" compareValue="memo"> A.TM_DT ASC, A.RG_DT ASC </isEqual>
			
		/* workDAO.selectMemoList */
	</select>
	
	
	<!-- memo 리스트 (S_NB(작성자) 를 통해 전체 참여자 IB_COMMENT) -->
	<select id="workDAO.selectMemoListGrp" parameterClass="workVO" resultClass="workVO">		
		   SELECT
				  A.S_NB                	as sNb
				, A.MAIN_SNB            	as mainSnb
				, A.STTS_CD             	as sttsCd
				, A.PRIVATE             	as priv
				, A.MAJOR               	as major
				, A.IMPORTANCE          	as importance
				, DATE(A.TM_DT)         	as tmDt
				, DATE(A.RG_DT)				as rgDt
				, LEFT(TIME(A.RG_DT), 5)	as tmDtTime
				, A.NAME					as name
				
				, CASE WHEN A.PRIVATE='Y' then AES_DECRYPT(UNHEX(A.COMMENT), MD5(A.RG_ID)) ELSE IFNULL(A.COMMENT,"-") END as comment
				
				, A.RG_ID					as rgId
				, A.UP_ID               	as upId
				
				, A.MEMO_TYPE				AS memoType
								
			FROM IB_COMMENT A			
		   WHERE 1=1
		   
			<isNotEmpty property="sNb">
				<isEqual property="mainSnb" compareValue="0">
					AND (S_NB = #sNb# OR MAIN_SNB = #sNb#)
					AND (CASE WHEN #sNb# IS NULL THEN FALSE
							  WHEN #sNb# = '0' THEN FALSE
				     		  WHEN #sNb# = '' THEN FALSE
							  ELSE TRUE
				     	  END)
				</isEqual>
				<isNotEqual property="mainSnb" compareValue="0">
					AND (S_NB = #mainSnb# OR MAIN_SNB = #mainSnb#)
					AND (CASE WHEN #mainSnb# IS NULL THEN FALSE
							  WHEN #mainSnb# = '0' THEN FALSE
				     		  WHEN #mainSnb# = '' THEN FALSE
							  ELSE TRUE
				     	  END)
				</isNotEqual>
			</isNotEmpty>
			
		/* workDAO.selectMemoListGrp */
	</select>
	
	
	<!-- 내가 쓴 메모 지우기전 참조인 읽음여부 확인 -->
	<select id="workDAO.checkMemoOpened" parameterClass="workVO" resultClass="workVO">		
		   SELECT
				  (SELECT COUNT(*) FROM IB_REPLY WHERE MAIN_SNB = A.S_NB)	AS replyCnt
				, (SELECT COUNT(*) FROM IB_COMMENT WHERE MAIN_SNB = A.S_NB AND STTS_CD = '00002')	AS readCnt
				
			FROM IB_COMMENT A
		   WHERE A.S_NB = #memoSNb#
		
		/* workDAO.checkMemoOpened */
	</select>
	
	
	<!-- memo (최신 댓글 RG_DT 기준) 리스트 -->
	<select id="workDAO.selectMemoReplyRgDtList" parameterClass="workVO" resultClass="workVO">		
		SELECT *
			FROM (
			
			
			SELECT 
			    A.S_NB 					AS sNb,
			    A.MAIN_SNB 				AS mainSnb,
			    A.STTS_CD 				AS sttsCd,
			    A.PRIVATE 				AS priv,
			    A.MAJOR 				AS major,
			    A.IMPORTANCE 			AS importance,
			    DATE(A.TM_DT) 			AS oriTmDt,
			    DATE(A.RG_DT) 			AS rgDt,
			    LEFT(TIME(A.RG_DT), 5) 	AS tmDtTime,
			    A.NAME					AS name,
			    (SELECT 
			            TEAM
			        FROM
			            IB_STAFF
			        WHERE
			            USR_NM = A.NAME) 	AS memoDeptId,
			    (SELECT DIVISION
			       FROM IB_STAFF
			      WHERE USR_NM = A.NAME) 	AS division,
			    LEFT(IF(a.private = 'Y',
			            AES_DECRYPT(UNHEX(a.comment), MD5(a.rg_id)),
			            IFNULL(A.COMMENT, '-')),
			        30) 					AS comment,
			        
			    A.RG_ID 					AS rgId,
			    B.USR_NM 					AS rgNm,
			    A.UP_ID 					AS upId,
			   
			    (SELECT COUNT(1)
			       FROM ib_comment
			      WHERE main_snb = (CASE
			       					WHEN a.main_snb = 0 THEN a.s_nb
			        				ELSE a.main_snb
			            			END))	AS grpMemCnt,
			            
			    (SELECT NAME
			       FROM IB_COMMENT
			      WHERE MAIN_SNB = (CASE
						                WHEN a.main_snb = 0 THEN a.s_nb
						                ELSE a.main_snb
						            END)
			      LIMIT 1) 					AS grpMemOne,
			    A.MEMO_TYPE 				AS memoType,
			    (SELECT CD_NM
			       FROM IB_COMMON_CODE
			      WHERE MENU_CD = '00026'
			        AND DTAIL_CD = A.MEMO_TYPE) AS memoTypeNm,
			   
			    <!--  ,DATE(MAX(R.RG_DT))	AS tmDt	lastRgDt -->
				DATE(MAX(R.RG_DT))		AS tmDt
				
			FROM
			    IB_COMMENT A
			    
					LEFT JOIN
				IB_REPLY R ON R.MAIN_SNB = IF(A.MAIN_SNB = 0, A.S_NB, A.MAIN_SNB)
			    			    
			        LEFT JOIN
			    IB_STAFF B ON B.USR_ID = A.RG_ID
			    			 
			WHERE 1=1
			  
			  AND R.RG_DT BETWEEN CONCAT (#choice_year#, #choice_monthS#, '01') AND CONCAT (#choice_year#, #choice_month#, '31235959')			  
			  AND A.NAME = #name#
		
		    GROUP BY R.MAIN_SNB
		   HAVING MAX(R.RG_DT)
			  ) K
			  
			WHERE 1=1
			  AND K.oriTmDt != K.tmDt
			        
			<!-- GROUP BY a.s_nb -->
			ORDER BY K.tmDt ASC , K.rgDt ASC

		/* workDAO.selectMemoReplyRgDtList */
	</select>
	

	<select id="workDAO.selectMemo4insertFile" parameterClass="workVO" resultClass="java.lang.String">
		<![CDATA[
			SELECT S_NB
			  FROM IB_COMMENT
		WHERE RG_DT >=  DATE_ADD(NOW(), INTERVAL -1 MINUTE)
		  AND RG_ID  =  #rgId#
		  and main_snb = 0
		  order by rg_dt desc
		  limit 1
		]]>
	</select>

	<select id="workDAO.selectEncrypt" parameterClass="workVO" resultClass="java.lang.String">
		<![CDATA[
			SELECT hex(aes_encrypt(#comment#,md5(#rgId#)))	AS v
		]]>
	</select>

	<select id="workDAO.selectAlreadySend" parameterClass="workVO" resultClass="java.lang.String">
		SELECT COUNT(*)
		  FROM IB_COMMENT
		 WHERE 1=1
		   AND MAIN_SNB = IF(#mainSnb# &gt; 0, #mainSnb#, -1)
		   
		  <isNotEmpty property="memoSndSabun">
		  	 AND NAME = (SELECT USR_NM FROM IB_STAFF WHERE SABUN = #memoSndSabun#)
		  </isNotEmpty>
		  <isEmpty property="memoSndSabun">
		     AND NAME = #memoSndName#
		  </isEmpty>
		  
		/* workDAO.selectAlreadySend */
	</select>

	<insert id="workDAO.insertMemo">
		<![CDATA[
			INSERT INTO IB_COMMENT
				  ( NAME
				  , MAIN_SNB
				  , COMMENT
				  , IMPORTANCE
				  , PRIVATE
				  , MAJOR
				  , STTS_CD
				  , TM_DT
				  , RG_DT
				  , UP_DT
				  , RG_ID
				  , UP_ID
				  , MEMO_TYPE
				  
		 ) VALUES ( #memoSndName#
				  , #mainSnb#
				  , #comment#
				  , #importance#
				  , #priv#
				  , case when #major# = '' then 'N' else #major# end
				  , #sttsCd#
				  , #tmDt#
				  , now()
				  , now()
				  , #rgId#
				  , #rgId#
				  , IFNULL(#memoType#, '00010')
				  )
		]]>
	</insert>

	<insert id="workDAO.insertMainMemoNreturnSnb" parameterClass="workVO">
			INSERT INTO IB_COMMENT
				  ( NAME
				  , MAIN_SNB
				  , COMMENT
				  , IMPORTANCE
				  , PRIVATE
				  , MAJOR
				  , STTS_CD
				  , TM_DT
				  , FRST_STTS_CD
				  , RG_DT
				  , UP_DT
				  , RG_ID
				  , UP_ID
				  , MEMO_TYPE
				  
		 ) VALUES ( #tmpNum2#
				  , #mainSnb#
				  , #comment#
				  , #importance#
				  , #priv#
				  , case when #major# = '' then 'N' else #major# end
				  , #sttsCd#
				  , #tmDt#
				  , '00002'
				  , now()
				  , now()
				  , #rgId#
				  , #rgId#
				  , IFNULL(#memoType#, '00010')
				  )
		<selectKey keyProperty="mainSnb" resultClass="string">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

	<insert id="workDAO.insertMemoOfDealResult" parameterClass="workVO">
		INSERT INTO IB_COMMENT
				  ( NAME
				  , MAIN_SNB
				  , COMMENT
				  , STTS_CD
				  , TM_DT
				  , RG_DT
				  , UP_DT
				  , RG_ID
				  , UP_ID
		 	)
			SELECT
				 
				<isNotEmpty property="name">	<!-- 발신자 -->
					#name#
				  , '0'
				</isNotEmpty>
				<isEmpty property="name">
					B.USR_NM
				  , #memoSNb#
				</isEmpty>
				  
				  , CONCAT('[투자의견]\n회사명: '
								, IFNULL(C.CPN_NM,'')						
								, CASE WHEN A.OPINION IS NULL THEN '' ELSE CONCAT('\n' , A.OPINION) END
								, CASE WHEN A.RCMD_RESULT = '00001' THEN '\n결과: 적격' WHEN A.RCMD_RESULT = '00002' THEN '\n결과: 부적격' ELSE '' END)
				  , #sttsCd#
				  , #tmDt#
				  , now()
				  , now()
				  , #rgId#
				  , #rgId#

			   from ib_offer a
		  left join ib_staff b on b.usr_id = a.rg_id
		  left join ib_company c on c.cpn_id = a.cpn_id
		  left join ib_comment d on d.s_nb = a.s_nb

			  where 1=1
			    <!-- and a.middle_offer_cd != '00000' --> 
			    and a.progress_cd &lt; '10000' 
			    and a.progress_cd != '00003'
				and A.S_NB = #sNb#
				
		<selectKey keyProperty="memoSNb" resultClass="String">
			SELECT MAX(S_NB) FROM IB_COMMENT
		</selectKey>
				
		/* workDAO.insertMemoOfDealResult */
	</insert>

	<insert id="workDAO.insertSMS">		
		INSERT INTO SMSLOG
				  ( SMSType
				  , SMSToNum
				  , SMSFromNum
				  , SMSContent
				  , SMSReserTime
				  , CATEGORY_TYPE
				<isNotEmpty property="priv">
				  , PRIVATE_YN
				</isNotEmpty>
				  
		 ) VALUES ( #SMSType#
				  , (select PHN_1 from IB_STAFF WHERE USR_NM = #memoSndName#)
				  , (select PHN_1 from IB_STAFF WHERE USR_ID = #rgId#)
				  , #comment#
				  , date_format(now(),'%Y%m%d%H%m%s')
				
				<isNotEmpty property="categoryType">
				  , #categoryType#
				</isNotEmpty>
				<isEmpty property="categoryType">
				  , '0'
				</isEmpty>
				<isNotEmpty property="priv">
				  , #priv#
				</isNotEmpty>
				  )
		
	</insert>

	<select id="workDAO.selectSMS" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
			SELECT
				  GROUP_CONCAT(DISTINCT SMSSeq ORDER BY SMSSeq SEPARATOR ',') 						as SMSSeq
				, SMSType
				, GROUP_CONCAT(DISTINCT REPLACE(SMSToNum,'-','') ORDER BY SMSSeq SEPARATOR ',') 	as SMSToNum
				, REPLACE(SMSFromNum, '-', '') 														as SMSFromNum
				, SMSContent																		as SMSContent
				, SMSReserTime
				, SMSSendFlag
				, PRIVATE_YN		AS priv
				
			FROM SMSLOG
			WHERE smsresertime >= CURRENT_DATE()
		]]>
			<isNotEmpty prepend="AND" property="rgId">
				<![CDATA[	SMSFromNum = (select PHN_1 from IB_STAFF WHERE USR_ID = #rgId#)		]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="comment">
				<![CDATA[	SMSContent = #comment# 		]]>
			</isNotEmpty>
		/* workDAO.selectSMS */
	</select>
	
	
	<select id="workDAO.selectSMSReply" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
			SELECT
				  GROUP_CONCAT(DISTINCT SMSSeq ORDER BY SMSSeq SEPARATOR ',') 						as SMSSeq
				, SMSType
				, GROUP_CONCAT(DISTINCT REPLACE(SMSToNum,'-','') ORDER BY SMSSeq SEPARATOR ',') 	as SMSToNum
				, REPLACE(SMSFromNum, '-', '') 														as SMSFromNum
				, concat('ib : ', SMSContent)														as SMSContent
				, SMSReserTime
				, SMSSendFlag
			FROM SMSLOG
			WHERE smsresertime >= CURRENT_DATE()
		]]>
			<isNotEmpty prepend="AND" property="rgId">
				<![CDATA[	SMSFromNum = (select PHN_1 from IB_STAFF WHERE USR_ID = #rgId#)		]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="comment">
				<![CDATA[	SMSContent = #comment# 		]]>
			</isNotEmpty>
	</select>
	

	<update id="workDAO.updateMemo">
		<![CDATA[
			UPDATE IB_COMMENT
			SET
				  COMMENT    =  case when #priv#='Y' then hex(aes_encrypt(#comment#,md5(rg_id))) else #comment# end
				, IMPORTANCE =  #importance#
				, PRIVATE    =  #priv#
				, MAJOR      =  case when #major# = '' then 'N' else #major# end
				, UP_DT      =  now()
				, UP_ID      =  #rgId#
			WHERE S_NB       =  #memoSNb#
		]]>
	</update>

	<update id="workDAO.modifySttsCd">
			UPDATE IB_COMMENT
			SET
				  STTS_CD	=  '00001'
				, UP_DT		=  now()
				, UP_ID		=  #rgId#
				
			WHERE 1=1
			  AND (CASE
					WHEN #mainSnb# = '' THEN FALSE
					WHEN #mainSnb# = '0' THEN FALSE
					WHEN #mainSnb# IS NULL THEN FALSE
			        ELSE MAIN_SNB	=  #mainSnb#
				   END)
			  AND NAME != (select usr_nm from ib_staff where usr_id = #rgId# limit 1)

		/* workDAO.modifySttsCd */
	</update>

	<update id="workDAO.updateSendedMemo">
			UPDATE IB_COMMENT
			SET
				  COMMENT 	=  case when #priv#='Y' then hex(aes_encrypt(#comment#,md5(rg_id))) else #comment# end
				, PRIVATE 	=  #priv#
				, MAJOR 	=  case when #major# = '' then 'N' else #major# end
				<isNotEmpty property="importance">
				, IMPORTANCE = #importance#
				</isNotEmpty>
				, STTS_CD 	=  '00001'
				, UP_DT 	=  now()
				, UP_ID 	=  #rgId#
				
			WHERE 1=1
			  AND (CASE
					WHEN #memoSNb# = '' THEN FALSE
					WHEN #memoSNb# = '0' THEN FALSE
					WHEN #memoSNb# IS NULL THEN FALSE
			        ELSE MAIN_SNB = #memoSNb#
				   END)
			  AND RG_ID	= #rgId#

		/* workDAO.updateSendedMemo */
	</update>


	<update id="workDAO.checkMemo">		
			UPDATE IB_COMMENT
			SET
				  STTS_CD   =  #sttsCd#
				  
			<isNotEmpty property="importance">				
				, IMPORTANCE = #importance#
			</isNotEmpty>				
				
				, FRST_STTS_CD = '00002'		/* 첫글 확인 */
				
				, UP_DT     =  now()
				, UP_ID     =  #rgId#
				
			WHERE S_NB      =  #memoSNb#
			
		/* workDAO.checkMemo */
	</update>

	<delete id="workDAO.deleteMemo">
		<![CDATA[
			DELETE FROM IB_COMMENT
			 WHERE S_NB      =  #memoSNb#
		]]>
	</delete>

	<delete id="workDAO.deleteSubMemo">
		DELETE FROM IB_COMMENT
		 WHERE STTS_CD != '00002'
		   AND (CASE
					WHEN #memoSNb# = '' THEN FALSE
					WHEN #memoSNb# = '0' THEN FALSE			        
			        ELSE MAIN_SNB = #memoSNb#
				END
			   )
		/* workDAO.deleteSubMemo */
	</delete>

<!-- 제안 -->

	<select id="workDAO.selectOfferMainList" parameterClass="workVO" resultClass="egovMap">
		<![CDATA[
			SELECT
				  A.S_NB 				   	AS  sNb
				, A.MIDDLE_OFFER_CD 	   	AS  middleOfferCd
				, A.OFFER_CD 			   	AS  offerCd
				, C.CD_NM as middleOfferNm
				, B.CD_NM as offerNm
				, DATE(A.TM_DT) 		   	AS  tmDt
				, A.RG_NM 			   		AS  rgNm
				, A.CST_ID 			   		AS  cstId
				, D.CST_NM 					AS  cstNm
				, A.CPN_ID 			   		AS  cpnId
				, CASE WHEN f.a_CPN_ID IS NULL OR f.a_cpn_id = '' THEN a.CPN_ID ELSE f.A_CPN_ID END AS  aCpnId
				, F.CPN_NM 					AS  cpnNm
				, A.CATEGORY_CD 		    AS  categoryCd
				, A.PRICE 			   		AS  price
				, A.INVEST_PRICE 	   		AS  investPrice
				, A.DUE_DT 			   		AS  dueDt
				, A.FEEDBACK 			    AS  feedback
				, A.PROGRESS_CD 		    AS  progressCd
				, A.RESULT 			   		AS  result
				, A.MEMO 				    AS  memo
				, A.USED				    AS  used
				, A.RG_ID				    AS  rgId
				, J2.FINANCING            	AS  financing
				, J2.MANAGEMENT           	AS  management
				, J2.MNA                  	AS  mna
				, J2.ETC                  	AS  etc
				, J2.SHARE                	AS  share
				, J2.RESOURCE             	AS  resource
				, J2.HUMANNET            	AS  humanNet
				, J2.AUDIT	             	AS  audit
				, J2.INVESTINTE          	AS  investInte
				, J2.SERVEY 	         	AS  servey
				, A.INFO_PROVIDER        	AS  infoProvider
				, G.CST_NM 					AS  infoProviderNm
				, H.CPN_NM 					AS  infoProviderCpnNm
				, A.INFO_LEVEL				AS infoLevel
				
			FROM IB_OFFER A
	            LEFT JOIN IB_COMMON_CODE 	B ON (B.MENU_CD = '00002' AND B.DTAIL_CD = A.OFFER_CD)
	            LEFT JOIN IB_COMMON_CODE 	C ON (C.MENU_CD = '00011' AND C.DTAIL_CD = A.MIDDLE_OFFER_CD)
	            LEFT JOIN IB_CUSTOMER		D ON D.S_NB = A.CST_ID
	            LEFT JOIN IB_COMPANY 		F ON F.CPN_ID = A.CPN_ID
	            LEFT JOIN IB_CUSTOMER 		G ON G.S_NB = A.INFO_PROVIDER
	            LEFT JOIN IB_COMPANY 		H ON H.CPN_ID = G.CPN_ID
				LEFT OUTER JOIN (
					SELECT OFFER_SNB
                         , MAX(CASE WHEN CATEGORY = '00001' THEN COMMENT END) financing
                         , MAX(CASE WHEN CATEGORY = '00002' THEN COMMENT END) management
                         , MAX(CASE WHEN CATEGORY = '00003' THEN COMMENT END) mna
                         , MAX(CASE WHEN CATEGORY = '00004' THEN COMMENT END) etc
                         , MAX(CASE WHEN CATEGORY = '00005' THEN COMMENT END) share
                         , MAX(CASE WHEN CATEGORY = '00006' THEN COMMENT END) resource
                         , MAX(CASE WHEN CATEGORY = '00007' THEN COMMENT END) humanNet
                         , MAX(CASE WHEN CATEGORY = '00008' THEN COMMENT END) audit
                         , MAX(CASE WHEN CATEGORY = '00009' THEN COMMENT END) investInte
                         , MAX(CASE WHEN CATEGORY = '00010' THEN COMMENT END) servey
					  FROM IB_OFFER_INFO
					  GROUP BY OFFER_SNB
					) J2 ON A.S_NB = J2.OFFER_SNB
		]]>
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="choice_month">
				<![CDATA[	A.TM_DT BETWEEN CONCAT (#choice_year#, #choice_month#, '01') AND CONCAT (#choice_year#, #choice_month#, '31235959') 		]]>
			</isNotEmpty>
		</dynamic>
	</select>
	<select id="workDAO.selectOfferList" parameterClass="workVO" resultClass="egovMap">
		<![CDATA[
			SELECT
				  A.S_NB 				   as  sNb
				, A.MIDDLE_OFFER_CD 	   as  middleOfferCd
				, A.OFFER_CD 			   as  offerCd
				, C.CD_NM 					as  middleOfferNm
				, B.CD_NM 					as  offerNm
				, DATE(A.TM_DT) 			as  tmDt
				, A.RG_NM 					as  rgNm
				, A.CST_ID 					as  cstId
				, D.CST_NM 					as  cstNm
				, E.CPN_NM 					as  cstCpnNm
				, D.POSITION 				as  position
				, A.CPN_ID 					as  cpnId
				, case when f.a_CPN_ID is null or f.a_cpn_id = '' then a.cpn_id else f.a_cpn_id end 			   		as  aCpnId
				, F.CPN_NM 					as  cpnNm
				, f.S_NB 					as  cpnSnb
				, A.CATEGORY_CD 			as  categoryCd
				, A.PRICE 					as  price
				, A.INVEST_PRICE 	   		as  investPrice
				, A.ENTRUST					as  entrust
				, A.CPN_CST					as  cpnCst
				, A.DUE_DT 					as  dueDt
				, A.FEEDBACK 				as  feedback
				, A.PROGRESS_CD 			as  progressCd
				, A.RESULT 					as  result
				, A.OPINION					as  investOpinion
				, A.MEMO 					as  memo
				, A.USED 					as  used
				, A.SELL_BUY 					as  sellBuy
				, A.CPN_TYPE 					as  cpnType
				, if(f.CATEGORY_BUSINESS = 0, null, f.CATEGORY_BUSINESS)			as  categoryBusiness
				, A.RG_ID 					as  rgId
				, J2.FINANCING            as  financing
				, J2.MANAGEMENT           as  management
				, J2.MNA                  as  mna
				, J2.ETC                  as  etc
				, J2.SHARE                as  share
				, J2.RESOURCE             as  resource
				, J2.HUMANNET            as  humanNet
				, J2.AUDIT	             as  audit
				, J2.INVESTINTE          as  investInte
				, J2.SERVEY 	         as  servey
				, A.INFO_PROVIDER 			as  infoProvider
				, G.CST_NM 					as  infoProviderNm
				, H.CPN_NM 					as  infoProviderCpnNm
				, A.COWORKER				as  coworker
				, K.CST_NM					as  coworkerNm
				, A.SUPPORTER				as  supporter
				, A.SUPPORTER_TEXT			as  supporterText
				, A.RECOMMEND_SNB		   as  rcmdSnb
				, I.CST_NM 					as  supporterNm
				, COUNT(CASE WHEN IFNULL(L.OFFER_SNB,0) != 0 THEN 1 END)						as  jointCnt
				, COUNT(CASE WHEN A.TM_DT <= J1.TM_DT THEN 1 END)					as analysis
				, (SELECT COUNT(S_NB)
				 	 FROM IB_RECOMMEND_OPINION
					WHERE CATEGORY = '00001'
					  AND OFFER_SNB = A.S_NB
					  AND RG_DT >= A.TM_DT) 					as opinion

			FROM IB_OFFER A
	            LEFT JOIN IB_COMMON_CODE B ON (B.MENU_CD = '00002' AND B.DTAIL_CD = A.OFFER_CD)
	            LEFT JOIN IB_COMMON_CODE C ON (C.MENU_CD = '00011' AND C.DTAIL_CD = A.MIDDLE_OFFER_CD)
	            LEFT JOIN IB_CUSTOMER D ON D.S_NB = A.CST_ID
	            LEFT JOIN IB_COMPANY E ON E.CPN_ID = D.CPN_ID
	            LEFT JOIN IB_COMPANY F ON F.CPN_ID = A.CPN_ID
	            LEFT JOIN IB_CUSTOMER G ON G.S_NB = A.INFO_PROVIDER
	            LEFT JOIN IB_CUSTOMER K ON K.S_NB = A.COWORKER
	            LEFT JOIN IB_COMPANY H ON H.CPN_ID = G.CPN_ID
	            LEFT JOIN IB_CUSTOMER I ON I.S_NB = A.SUPPORTER
          		LEFT JOIN IB_JOINT_PROGRESS L ON L.OFFER_SNB = A.S_NB
				LEFT OUTER JOIN (
		          SELECT CPN_ID,TM_DT
		            FROM IB_OFFER
		           WHERE OFFER_CD = '00004'
		           ) J1 ON J1.CPN_ID = A.CPN_ID
				LEFT OUTER JOIN (
					SELECT OFFER_SNB
                         , MAX(CASE WHEN CATEGORY = '00001' THEN COMMENT END) financing
                         , MAX(CASE WHEN CATEGORY = '00002' THEN COMMENT END) management
                         , MAX(CASE WHEN CATEGORY = '00003' THEN COMMENT END) mna
                         , MAX(CASE WHEN CATEGORY = '00004' THEN COMMENT END) etc
                         , MAX(CASE WHEN CATEGORY = '00005' THEN COMMENT END) share
                         , MAX(CASE WHEN CATEGORY = '00006' THEN COMMENT END) resource
                         , MAX(CASE WHEN CATEGORY = '00007' THEN COMMENT END) humanNet
                         , MAX(CASE WHEN CATEGORY = '00008' THEN COMMENT END) audit
                         , MAX(CASE WHEN CATEGORY = '00009' THEN COMMENT END) investInte
                         , MAX(CASE WHEN CATEGORY = '00010' THEN COMMENT END) servey
					  FROM IB_OFFER_INFO
					  GROUP BY OFFER_SNB
					) J2 ON A.S_NB = J2.OFFER_SNB
		]]>
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="choice_month">
				<![CDATA[	A.TM_DT between CONCAT (#choice_year#, #choice_monthS#, '01') and CONCAT (#choice_year#, #choice_month#, '31235959') 		]]>
			</isNotEmpty>
			<isEqual prepend="AND" property="middleOfferCd" compareValue="00070">
				<![CDATA[	A.MIDDLE_OFFER_CD in ('00071','00072')		]]>
			</isEqual>
			<!-- <isNotEmpty prepend="AND" property="offerCd">
				<![CDATA[	OFFER_CD = #offerCd# 		]]>
			</isNotEmpty> -->
			<isNotEmpty prepend="AND" property="offerCd">
				<![CDATA[	A.CATEGORY_CD is not null		]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="offerCd">
				<![CDATA[	A.CATEGORY_CD <> ''			]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="categoryCd">
				<![CDATA[	A.CATEGORY_CD = #categoryCd# 		]]>
			</isNotEmpty>
			<isNotEqual property="middleOfferCd" compareValue="00070">
				<isNotEmpty prepend="AND" property="middleOfferCd">
					<![CDATA[	A.MIDDLE_OFFER_CD = #middleOfferCd# 		]]>
				</isNotEmpty>
				<isEmpty prepend="AND" property="categoryCd">
					<![CDATA[	A.CATEGORY_CD != '00008' and A.CATEGORY_CD != '00012'		]]>
				</isEmpty>
			</isNotEqual>
			<isNotEmpty prepend="AND" property="name">
				<![CDATA[	A.RG_NM = #name# 		]]>
			</isNotEmpty>
			<isNotEqual prepend="AND" property="total" compareValue="total">
				<![CDATA[	A.PROGRESS_CD != '10000'		]]>
			</isNotEqual>
		</dynamic>
			GROUP BY A.S_NB
			ORDER BY A.USED ASC, A.PROGRESS_CD ASC
			<isEqual prepend="," property="sorting" compareValue="">
				<![CDATA[	A.TM_DT DESC		]]>
			</isEqual>
			<isEqual prepend="," property="sorting" compareValue="1">
				<![CDATA[	case when cstNm = '' or infoProviderNm is null then 1 else 0 end, infoProviderNm ASC		]]>
			</isEqual>
			<isEqual prepend="," property="sorting" compareValue="2">
				<![CDATA[	case when cstNm = '' or cstNm is null then 1 else 0 end, cstNm ASC 		]]>
			</isEqual>
			<isEqual prepend="," property="sorting" compareValue="3">
				<![CDATA[	rgNm ASC 		]]>
			</isEqual>
			<isEqual prepend="," property="sorting" compareValue="4">
				<![CDATA[	cpnNm ASC 		]]>
			</isEqual>
			<isEqual prepend="," property="sorting" compareValue="5">
				<![CDATA[	categoryCd ASC 		]]>
			</isEqual>
			<isEqual prepend="," property="sorting" compareValue="6">
				<![CDATA[	case when supporterNm = '' or supporterNm is null then 1 else 0 end, supporterNm ASC 		]]>
			</isEqual>
			<isEqual prepend="," property="sorting" compareValue="7">
				<![CDATA[	middleOfferCd ASC, A.TM_DT DESC 		]]>
			</isEqual>
			<isEqual prepend="," property="sorting" compareValue="8">
				<![CDATA[	offerCd ASC, A.TM_DT DESC 		]]>
			</isEqual>

	</select>


	<!-- 딜 정보 리스트 -->
	<select id="workDAO.selectOfferAllDealList" parameterClass="workVO" resultClass="workVO">
		
			SELECT
				  A.S_NB								as sNb
				, A.MIDDLE_OFFER_CD 					as middleOfferCd
				, C.CD_NM 								as middleOfferNm
				, B.CD_NM 								as offerNm
				, DATE(A.TM_DT) 						as tmDt
				, DATE(A.DUE_DT)						as dueDt
				, DATEDIFF(now(),DATE(A.DUE_DT))		as diffDt
				, A.RG_NM 								as rgNm
				, (SELECT PHN_1 FROM IB_STAFF WHERE USR_ID = A.RG_ID)	AS rgUserPhn
				, F.CPN_NM 								as cpnNm
				
				, CASE WHEN A.CPN_ID = '951769' THEN 'Q' WHEN SUBSTRING(F.A_CPN_ID,1,1) = 'A' THEN 'Q' ELSE SUBSTRING(F.CPN_ID,1,1) END	as  cpnStts
				
				, D.S_NB								as cstSnb
				, D.CST_NM 								as cstNm
				, E.CPN_NM 								as cstCpnNm
				, concat(substring(A.MEMO,1,10),'...')	as memo
				, concat(substring(A.MEMO,1,40),(case when length(A.MEMO)>40 then '...' else '' end))		as  memoLong
				, A.CATEGORY_CD 						as categoryCd
				, (SELECT CD_NM
					 FROM IB_COMMON_CODE
					WHERE MENU_CD = '00005'
					  AND DTAIL_CD = A.CATEGORY_CD ) 	as categoryNm
				
				, A.PRICE 								as price
				, A.INVEST_PRICE 	   					as investPrice
				, A.PROGRESS_CD 						as progressCd
				, Cmm.CD_NM 	 						as progressNm
				, A.OPINION 							as investOpinion
				, A.SELL_BUY 							as sellBuy
				, Cm2.CD_NM 							as cpnTypeCdNm
				, A.CPN_TYPE 							as cpnType
				, mcc.CPN_NM 							as matchCpnNm
				, mnaS.STAFF_NM 						as usrNm
				, COUNT(TT.s_nb)						as analysis
				, (SELECT RG_NM FROM IB_OFFER WHERE S_NB = A.RECOMMEND_SNB)		as recommendNm
				 
				<!--, case
				  when COUNT(CASE WHEN date(A.RG_DT) &lt;= date(J1.RG_DT) THEN 1 END) - COUNT(CASE WHEN date(A.RG_DT) &lt;= date(J2.RG_DT) THEN 1 END) &gt; 0
				  then COUNT(CASE WHEN date(A.RG_DT) &lt;= date(J1.RG_DT) THEN 1 END)
				  else COUNT(CASE WHEN date(A.RG_DT) &lt;= date(J2.RG_DT) THEN 1 END)
				  end as analysis-->	
				  
			<![CDATA[
				, (SELECT COUNT(S_NB)
				 	 FROM IB_RECOMMEND_OPINION
					WHERE CATEGORY = '00001'
					  AND OFFER_SNB = A.S_NB
					  AND date(RG_DT) >= date(A.RG_DT)) 						as opinion
				, (SELECT MAX(RG_DT)
				 	 FROM IB_RECOMMEND_OPINION
					WHERE CATEGORY = '00001'
					  AND OFFER_SNB = A.S_NB
					  AND RG_DT >= CURDATE() - INTERVAL 1 DAY) 					as tmpNum1
				, CASE WHEN A.RG_DT >= CURDATE() - INTERVAL 1 DAY THEN A.RG_DT ELSE '' END 	as tmpNum2
				, (SELECT COUNT(1)
						FROM IB_FILE_INFO
						WHERE FILE_CATEGORY = '00000'
						  AND A.S_NB = OFFER_S_NB)								as fileCnt
				, (SELECT COUNT(1)
						FROM IB_FILE_INFO subA
						LEFT JOIN IB_RECOMMEND_OPINION subB ON subB.S_NB = subA.OFFER_S_NB
						WHERE FILE_CATEGORY = '00002'
						  AND A.S_NB = subB.OFFER_SNB)							as commentFileCnt
						  
				, A.INFO_LEVEL							as infoLevel
				, A.RG_ID								as rgId
				
				]]>
				
				,(SELECT DIVISION FROM IB_STAFF WHERE USR_ID = A.RG_ID)			as division
				, F.CPN_ID														as cpnId
				, F.A_CPN_ID													as aCpnId
				, IFNULL((SELECT USR_NM FROM synergymain.IB_STAFF WHERE S_NB =
					(SELECT USER_ID FROM BASE.BS_ANAL_USER WHERE OFFER_ID = A.S_NB AND DELETE_FLAG ='N' ORDER BY CREATE_DATE ASC LIMIT 1)
				  ),'')	AS analUserFirst
				, IFNULL((SELECT COUNT(*) FROM BASE.BS_ANAL_USER WHERE OFFER_ID = A.S_NB AND DELETE_FLAG ='N'),0) AS analUserCount
				
				<isEqual prepend="" property="toMain" compareValue="Y">
				,getAnalStatus(A.S_NB) AS analEachCount							<!-- ,'' as analEachCount -->
				</isEqual>
				<isNotEqual prepend="" property="toMain" compareValue="Y">
				,getAnalStatus(A.S_NB) AS analEachCount
				</isNotEqual>
				
				<isNotEqual property="sorting" compareValue="00008">	<!-- M&A : "00008" -->
				, getAnalysisVal(A.S_NB) as analVal
				</isNotEqual>
				<isEqual property="sorting" compareValue="00008">		<!-- M&A "00009" -->
				, '1|1' as analVal
				</isEqual>
							
				,(SELECT DEAL_SMS FROM IB_STAFF WHERE USR_ID = A.RG_ID)	as dealSms			
				,(SELECT PHN_1 FROM IB_STAFF WHERE USR_ID = A.RG_ID)	as rgStaffPhn1
								
				<![CDATA[ 
						  
			FROM IB_OFFER A
	            LEFT JOIN IB_COMMON_CODE B ON (B.MENU_CD = '00002' AND B.DTAIL_CD = A.OFFER_CD)
	            LEFT JOIN IB_COMMON_CODE C ON (C.MENU_CD = '00011' AND C.DTAIL_CD = A.MIDDLE_OFFER_CD)
	            LEFT JOIN IB_COMMON_CODE Cmm ON (Cmm.MENU_CD = '00004' AND Cmm.DTAIL_CD = A.PROGRESS_CD)
	            LEFT JOIN IB_COMMON_CODE Cm2 ON (Cm2.MENU_CD = '00017' AND Cm2.DTAIL_CD = A.CPN_TYPE_CD)
	            LEFT JOIN IB_CUSTOMER D ON D.S_NB = A.CST_ID
	            LEFT JOIN IB_COMPANY E ON E.CPN_ID = D.CPN_ID
	            LEFT JOIN IB_COMPANY F ON F.CPN_ID = A.CPN_ID
	            LEFT JOIN IB_CUSTOMER G ON G.S_NB = A.INFO_PROVIDER
	            LEFT JOIN IB_CUSTOMER K ON K.S_NB = A.COWORKER
	            LEFT JOIN IB_COMPANY H ON H.CPN_ID = G.CPN_ID
	            LEFT JOIN IB_CUSTOMER I ON I.S_NB = A.SUPPORTER
          		LEFT JOIN IB_JOINT_PROGRESS L ON L.OFFER_SNB = A.S_NB
          		LEFT JOIN (
							select
									imcc.offer_snb
									, GROUP_CONCAT(Mc.cpn_nm SEPARATOR '<br/>,') cpn_nm
							from  ib_offer_mna_match_cpn imcc
							LEFT JOIN IB_COMPANY Mc ON Mc.CPN_ID = imcc.cpn_id
							group by imcc.offer_snb
							)mcc ON mcc.OFFER_SNB = A.S_NB
	            LEFT JOIN ib_offer_mna_staff mnaS ON mnaS.OFFER_SNB = A.S_NB
	      ]]>
	            
			  	LEFT OUTER JOIN 
			  		(
			  		select KK.*
			  		  from(
			  		
				           SELECT s_nb, CPN_ID, tm_dt
				             FROM IB_OFFER
				            WHERE OFFER_CD = '00004'
				  			  
				  			union
				  		  
				          	select m.s_nb, cpn_id
				          			,m.tm_dt
							  from ib_offer		m
							  join ib_offer_info	n on m.s_nb = n.offer_snb and n.category = '00008' <!--  m&a -->
							 where offer_cd in ('00002', '00003')
							   
				           ) KK
			         ) TT on TT.cpn_id = a.cpn_id
			         	  <!-- and date(date_add(A.TM_DT, interval -2 month)) &lt;= date(TT.TM_DT) -->
			         	  and date(date_add(A.TM_DT, interval -7 day)) &lt;= date(TT.TM_DT)
		        
		           
			WHERE 1=1
			  		
		<isEqual prepend="AND" property="toMain" compareValue="Y">					<!-- 메인 화면에 뿌려지는 데이터이면 -->
			<isEqual prepend="" property="sorting" compareValue="00000">					<!-- 탭 '전체' -->
				A.TM_DT &gt; CURDATE() - INTERVAL 30 DAY
			</isEqual>
			<isNotEqual prepend="" property="sorting" compareValue="00000">					<!-- 탭 '전체' 이외의 탭 -->
				<![CDATA[	A.TM_DT between CONCAT (#choice_yearS#, #choice_monthS#, '01') and CONCAT (#choice_year#, #choice_month#, '31235959') 		]]>
			</isNotEqual>
		</isEqual>
		<isNotEqual prepend="" property="toMain" compareValue="Y">					<!-- 메인 화면에 뿌려지는 데이터가 아니면 -->
			<isNotEmpty prepend="AND" property="choice_month">
				<![CDATA[	A.TM_DT between CONCAT (#choice_yearS#, #choice_monthS#, '01') and CONCAT (#choice_year#, #choice_month#, '31235959') 		]]>
			</isNotEmpty>
		</isNotEqual>
		
		
		<isNotEmpty property="selectUser">
			AND A.RG_NM = #selectUser#
		</isNotEmpty>
			
		<isNotEmpty property="search">
			<![CDATA[  
				AND	F.CPN_NM like concat('%', #search# ,'%')				
				AND	A.MIDDLE_OFFER_CD IN ('00001', '00002', '00003', '00004', '00005')
			]]>
		</isNotEmpty>			
			
		<isEmpty property="search">
		
			<isEqual prepend="" property="sorting" compareValue="00000">					<!-- 탭 '전체' -->
				AND	A.MIDDLE_OFFER_CD IN ('00001', '00002', '00003', '00004', '00005')
			</isEqual>
			<isNotEqual prepend="" property="sorting" compareValue="00000">					<!-- 탭 '전체' 이외의 탭 -->
		
				<isNotEqual prepend="AND" property="middleOfferCd" compareValue="00004">	<!-- 제안중00004 이 아닌 딜 -->
					<![CDATA[	A.MIDDLE_OFFER_CD IN ('00001', '00002', '00003')		]]>
				</isNotEqual>
			
				<isNotEmpty prepend="AND" property="middleOfferCd">
					<isEqual prepend="" property="middleOfferCd" compareValue="00004">		<!-- 제안중 -->
						<![CDATA[	A.MIDDLE_OFFER_CD IN ('00004','00005') 		]]>
					</isEqual>
					<isNotEqual prepend="" property="middleOfferCd" compareValue="00004">
						<![CDATA[	A.MIDDLE_OFFER_CD = #middleOfferCd# 		]]>
					</isNotEqual>
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="middleOfferCd">
					<![CDATA[	A.CATEGORY_CD IS NOT NULL AND  A.CATEGORY_CD <> '']]>
				</isNotEmpty>
				<isEqual prepend="AND" property="middleOfferCd" compareValue="00004">		<!-- 제안중00004 이면서 -->
					<isEqual prepend="" property="isEtc" compareValue="Y">
						<![CDATA[	A.CATEGORY_CD NOT IN ('00001','00002','00003','00015')		]]>
					</isEqual>
					<!-- <isNotEqual prepend="" property="isEtc" compareValue="Y"> -->
					<!-- 	<![CDATA[	A.CATEGORY_CD in ('00001','00002','00003','00015')			]]> -->		<!-- CB(00001), BW(00002), EB(00003), RCPS(00015) -->
					<!-- </isNotEqual> -->
				</isEqual>
				
				<isNotEqual prepend="" property="sorting" compareValue="null">
					<isEqual prepend="AND" property="sorting" compareValue="00001"> <!--  메자닌인 경우 -->
						<!-- <![CDATA[	A.CATEGORY_CD != '00012' AND A.CATEGORY_CD != '00008' AND A.CATEGORY_CD != '00013' AND A.CATEGORY_CD != '00011' AND A.CATEGORY_CD != '00014'		]]> -->
						<![CDATA[	A.CATEGORY_CD IN ('00001','00002','00003','00015')		]]>		<!-- CB(00001), BW(00002), EB(00003), RCPS(00015) -->
						
						<isEqual prepend="AND" property="listed" compareValue="N">						
							<![CDATA[	(F.CPN_ID NOT LIKE 'A%' AND (F.A_CPN_ID IS NULL OR F.A_CPN_ID NOT LIKE 'A%'))	]]>		<!-- 비상장 -->
						</isEqual>
						<isNotEqual prepend="AND" property="listed" compareValue="N">						
							<![CDATA[	(F.CPN_ID LIKE 'A%' OR F.A_CPN_ID LIKE 'A%')		]]>		<!-- 상장 -->
						</isNotEqual>					
					</isEqual>
					<isNotEqual prepend="AND" property="sorting" compareValue="00001"> <!-- 메자닌이 아닌경우 -->
						<isNotEqual prepend="" property="tmpNum2" compareValue="statsPrivateList">
							<isNotEqual property="sorting" compareValue="0">
								<isNotEqual property="sorting" compareValue="00014">							
									<isEqual property="sorting" compareValue="00003">	<!-- 00003.. 유증(00004), 블록딜(00005), 실권주(00006), 워런트(00007) -->
										<![CDATA[	A.CATEGORY_CD IN ('00004','00005','00006','00007')		]]>
									</isEqual>
									<isNotEqual property="sorting" compareValue="00003">
										<![CDATA[	A.CATEGORY_CD = #sorting#		]]>
									</isNotEqual>
								</isNotEqual>
								<isEqual property="sorting" compareValue="00014">
									<![CDATA[	A.CATEGORY_CD IN ('00011','00014')		]]>
								</isEqual>
							</isNotEqual>
							<isEqual property="sorting" compareValue="0"><![CDATA[
									A.CATEGORY_CD IN (
											select	group_concat(cmm.dtail_cd SEPARATOR ',')
											from ib_staff_allow_code alw
											left join ib_staff st on st.permission = alw.perm_code
											left join IB_COMMON_CODE cmm on cmm.s_nb = alw.code_snb
											where st.usr_id = #rgId#
											and cmm.menu_cd = '00005'
											group by cmm.menu_cd) ]]>
							</isEqual>
						</isNotEqual>
						<isEqual prepend="" property="tmpNum2" compareValue="statsPrivateList">
							<isNotEmpty property="tmpNum1">
							<![CDATA[	A.RG_NM = #tmpNum1# 		]]>
							</isNotEmpty>
						</isEqual>
					</isNotEqual>
				</isNotEqual>
			</isNotEqual>
			<isNotEqual prepend="AND" property="total" compareValue="total">
				<isNotEqual property="sorting" compareValue="00008">
					(CASE
						WHEN A.CATEGORY_CD = '00008' THEN A.PROGRESS_CD IN ('00001','00002','00003','00004','00005')
						ELSE A.PROGRESS_CD IN ('00001','00002')
					END)
				</isNotEqual>
				<isEqual property="sorting" compareValue="00008">
					<![CDATA[	A.PROGRESS_CD in ('00001','00002','00003','00004','00005')	]]>
				</isEqual>
			</isNotEqual>
		</isEmpty>
		
			GROUP BY A.S_NB
			ORDER BY 
			<isNotEqual property="sorting" compareValue="00008">
				<!-- A.PROGRESS_CD ASC , -->
				(CASE
					WHEN A.CATEGORY_CD = '00008' THEN '00001'
					ELSE A.PROGRESS_CD
				 END) ASC,
			</isNotEqual>
			<isEqual prepend="" property="total" compareValue="sellBuy">
				A.SELL_BUY asc ,
			</isEqual>
				CASE WHEN A.DUE_DT IS NULL THEN 1 ELSE 0 END, A.TM_DT DESC
				
		/* workDAO.selectOfferAllDealList */
	</select>

	<select id="workDAO.selectOpinionNdeal" parameterClass="workVO" resultClass="egovMap">
		<![CDATA[
			SELECT
				OF.S_NB						as  sNb
				, ST.USR_NM					as  rgNm
				, OF.MIDDLE_OFFER_CD 		as  middleOfferCd
				, C.CD_NM 					as  middleOfferNm
				, B.CD_NM 					as  offerNm
				, DATE(RP.RG_DT) 			as  tmDt
				, OF.PRICE 					as  price
				, OF.INVEST_PRICE 	   		as  investPrice
				, OF.PROGRESS_CD 			as  progressCd
				, OF.CATEGORY_CD 			as  categoryCd
				, RP.COMMENT 				as  memo
				, Cmm.CD_NM 	 			as  progressNm
				, F.CPN_NM 					as  cpnNm
				, D.CST_NM 					as  cstNm
				, E.CPN_NM 					as  cstCpnNm
				, COUNT(CASE WHEN OF.TM_DT <= date(J1.TM_DT) THEN 1 END)			as analysis
				, (SELECT COUNT(S_NB)
				 	 FROM IB_RECOMMEND_OPINION
					WHERE CATEGORY = '00001'
					  AND OFFER_SNB = OF.S_NB
					  AND RG_DT >= date(OF.TM_DT)) 								as opinion
				, (SELECT MAX(RG_DT)
				 	 FROM IB_RECOMMEND_OPINION
					WHERE CATEGORY = '00001'
					  AND OFFER_SNB = OF.S_NB
					  AND RG_DT >= CURDATE() - INTERVAL 1 DAY) 					as tmpNum1
				, CASE WHEN OF.RG_DT >= CURDATE() - INTERVAL 1 DAY THEN OF.RG_DT ELSE '' END 	as tmpNum2
				, (SELECT COUNT(1)
						FROM IB_FILE_INFO
						WHERE FILE_CATEGORY = '00000'
						  AND OF.S_NB = OFFER_S_NB)								as fileCnt
				, (SELECT COUNT(1)
						FROM IB_FILE_INFO subA
						LEFT JOIN IB_RECOMMEND_OPINION subB ON subB.S_NB = subA.OFFER_S_NB
						WHERE FILE_CATEGORY = '00002'
						  AND OF.S_NB = subB.OFFER_SNB)							as commentFileCnt
			FROM IB_RECOMMEND_OPINION RP
				LEFT JOIN IB_OFFER OF ON OF.S_NB = RP.OFFER_SNB
				LEFT JOIN IB_STAFF ST ON ST.USR_ID = RP.RG_ID
	            LEFT JOIN IB_COMMON_CODE B ON (B.MENU_CD = '00002' AND B.DTAIL_CD = OF.OFFER_CD)
	            LEFT JOIN IB_COMMON_CODE C ON (C.MENU_CD = '00011' AND C.DTAIL_CD = OF.MIDDLE_OFFER_CD)
	            LEFT JOIN IB_COMMON_CODE Cmm ON (Cmm.MENU_CD = '00004' AND Cmm.DTAIL_CD = OF.PROGRESS_CD)
				LEFT JOIN IB_CUSTOMER D ON D.S_NB = OF.CST_ID
				LEFT JOIN IB_COMPANY E ON E.CPN_ID = D.CPN_ID
				LEFT JOIN IB_COMPANY F ON F.CPN_ID = OF.CPN_ID
				LEFT JOIN (
		          SELECT CPN_ID,TM_DT
		            FROM IB_OFFER
		           WHERE OFFER_CD = '00004'
		           ) J1 ON J1.CPN_ID = OF.CPN_ID
			WHERE OF.S_NB IS NOT NULL
			  AND RP.RG_DT between CONCAT (#choice_year#, #choice_monthS#, '01') and CONCAT (#choice_year#, #choice_month#, '31235959')
		]]>
			<isNotEmpty prepend="AND" property="tmpNum1">
			  <![CDATA[ ST.USR_NM = #tmpNum1# ]]>
			</isNotEmpty>
			GROUP BY RP.S_NB
			ORDER BY OF.PROGRESS_CD ASC, RP.RG_DT DESC
	</select>

	<select id="workDAO.selectOfferListNfile" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
			SELECT
				  A.S_NB 				   as  sNb
				, A.MIDDLE_OFFER_CD 	   as  middleOfferCd
				, A.OFFER_CD 			   as  offerCd
				, C.CD_NM 					as middleOfferNm
				, B.CD_NM 					as offerNm
				, A.TM_DT 		   			as  tmDt
				, A.RG_NM 			   		as  rgNm
				, A.CST_ID 			   		as  cstId
				, D.CST_NM 					as  cstNm
				, D.CPN_ID 					as  cstCpnId
				, case when e.a_CPN_ID is null or e.a_cpn_id = '' then d.cpn_id else e.a_cpn_id end 					as  cstAcpnId
				, E.CPN_NM 					as  cstCpnNm
				, E.S_NB 					as  cpnSnb
				, D.POSITION 				as  position
				, A.CPN_ID 			   		as  cpnId
				, case when f.a_CPN_ID is null or f.a_cpn_id = '' then a.cpn_id else f.a_cpn_id end 			   		as  aCpnId
				, F.CPN_NM 					as  cpnNm
				
				, CASE WHEN A.CPN_ID = '951769' THEN 'Q' WHEN SUBSTRING(F.A_CPN_ID,1,1) = 'A' THEN 'Q' ELSE SUBSTRING(F.CPN_ID,1,1) END	as  cpnStts
				
				, A.CATEGORY_CD 		   as  categoryCd
				,(SELECT CD_NM FROM IB_COMMON_CODE WHERE MENU_CD = '00005' AND DTAIL_CD = A.CATEGORY_CD) 				as categoryNm
				, A.PRICE 			   as  price
				, A.INVEST_PRICE 	   		as  investPrice
				, A.ENTRUST					as  entrust
				, A.CPN_CST					as  cpnCst
				, A.DUE_DT 			   	as  dueDt
				, A.FEEDBACK 			   as  feedback
				, A.PROGRESS_CD 		   as  progressCd
				, A.RESULT 			   as  result
				, A.USED				   as  used
				, A.RG_ID				   as  rgId
				,(SELECT DIVISION FROM IB_STAFF WHERE USR_ID = A.RG_ID)			as division
				, A.RECOMMEND_SNB		   as  rcmdSnb
				, a.CPN_TYPE_CD				as  cpnTypeCd
				, GROUP_CONCAT(J1.realNm SEPARATOR '^^^')   as realNm
				, GROUP_CONCAT(J1.makeNm SEPARATOR '^^^')   as makeNm
				, J2.FINANCING            as  financing
				, J2.MANAGEMENT           as  management
				, J2.MNA                  as  mna
				, J2.ETC                  as  etc
				, J2.SHARE                as  share
				, J2.RESOURCE             as  resource
				, J2.HUMANNET            as  humanNet
				, J2.AUDIT	             as  audit
				, J2.INVESTINTE          as  investInte
				, J2.SERVEY 	         as  servey
				
				, A.INFO_LEVEL			as infoLevel
				
			FROM IB_OFFER A
	            LEFT JOIN IB_COMMON_CODE B ON (B.MENU_CD = '00002' AND B.DTAIL_CD = A.OFFER_CD)
	            LEFT JOIN IB_COMMON_CODE C ON (C.MENU_CD = '00011' AND C.DTAIL_CD = A.MIDDLE_OFFER_CD)
	            LEFT JOIN IB_CUSTOMER D ON D.S_NB = A.CST_ID
	            LEFT JOIN IB_COMPANY E ON E.CPN_ID = D.CPN_ID
	            LEFT JOIN IB_COMPANY F ON F.CPN_ID = A.CPN_ID
				LEFT OUTER JOIN
					(SELECT OFFER_S_NB
						  , REAL_NAME as realNm
						  , MAKE_NAME as makeNm
					   FROM IB_FILE_INFO
					  WHERE FILE_CATEGORY = '00000'

					) J1 ON A.S_NB = J1.OFFER_S_NB

				LEFT OUTER JOIN (
					SELECT OFFER_SNB
                         , MAX(CASE WHEN CATEGORY = '00001' THEN COMMENT END) financing
                         , MAX(CASE WHEN CATEGORY = '00002' THEN COMMENT END) management
                         , MAX(CASE WHEN CATEGORY = '00003' THEN COMMENT END) mna
                         , MAX(CASE WHEN CATEGORY = '00004' THEN COMMENT END) etc
                         , MAX(CASE WHEN CATEGORY = '00005' THEN COMMENT END) share
                         , MAX(CASE WHEN CATEGORY = '00006' THEN COMMENT END) resource
                         , MAX(CASE WHEN CATEGORY = '00007' THEN COMMENT END) humanNet
                         , MAX(CASE WHEN CATEGORY = '00008' THEN COMMENT END) audit
                         , MAX(CASE WHEN CATEGORY = '00009' THEN COMMENT END) investInte
                         , MAX(CASE WHEN CATEGORY = '00010' THEN COMMENT END) servey
					  FROM IB_OFFER_INFO
					  GROUP BY OFFER_SNB
					) J2 ON A.S_NB = J2.OFFER_SNB
		]]>
		<dynamic prepend="WHERE">
			<isEmpty prepend="AND" property="choice_day">
				<![CDATA[	A.TM_DT between CONCAT (#choice_year#, #choice_month#, '01') and CONCAT (#choice_year#, #choice_month#, '31235959') 		]]>
			</isEmpty>
			<isNotEmpty prepend="AND" property="offerCd">
				<![CDATA[	A.OFFER_CD = #offerCd# 		]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="offerCd">
				<![CDATA[	A.CATEGORY_CD is not null		]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="offerCd">
				<![CDATA[	A.CATEGORY_CD <> ''			]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="categoryCd">
				<![CDATA[	A.CATEGORY_CD = #categoryCd# 		]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="name">
				<![CDATA[	A.RG_NM = #name# 		]]>
			</isNotEmpty>
			<isEqual prepend="AND" property="selectInfo" compareValue="main1">
				<![CDATA[	A.CATEGORY_CD != '00001' and A.CATEGORY_CD != '00003' and A.CATEGORY_CD != '00008' and A.CATEGORY_CD != '00011'		]]>
			</isEqual>
			<isEqual prepend="AND" property="selectInfo" compareValue="main2">
				<![CDATA[	A.CATEGORY_CD = '00001' or A.CATEGORY_CD = '00003' or A.CATEGORY_CD = '00008' or A.CATEGORY_CD = '00011'		]]>
			</isEqual>
		</dynamic>
			GROUP BY A.S_NB
			ORDER BY A.USED ASC, A.PROGRESS_CD ASC
			<isNotEmpty prepend="," property="choice_day">
				A.TM_DT DESC
			</isNotEmpty>
			<isEmpty prepend="," property="choice_day">
				A.TM_DT ASC
			</isEmpty>
	</select>


	<select id="workDAO.selectMainOfferList" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
			SELECT
				  A.S_NB					as sNb
				, mtc.offer_snb 			as tmpNum1
				, case when alw.cd_nm is null then alw1.cd_nm else alw.cd_nm end 		as tmpNum2
				, A.MIDDLE_OFFER_CD 	   	as middleOfferCd
				, A.OFFER_CD 			   	as offerCd
				, C.CD_NM 					as middleOfferNm
				, B.CD_NM 					as offerNm
				, A.TM_DT 		   			as tmDt
				, A.RG_NM 			   		as rgNm
				, A.CST_ID 			   		as cstId
				, D.CST_NM 					as cstNm
				, D.CPN_ID 					as cstCpnId
				, E.CPN_NM 					as cstCpnNm
				, E.S_NB 					as cpnSnb
				, D.POSITION 				as position
				, A.CPN_ID 			   		as cpnId
				, F.CPN_NM 					as cpnNm
				
				, CASE WHEN SUBSTRING(F.A_CPN_ID,1,1) = 'A' THEN 'A' ELSE 'N' END	as  cpnStts
				, CASE WHEN SUBSTRING(E.A_CPN_ID,1,1) = 'A' THEN 'A' ELSE 'N' END	as  cstCpnStts
				
				, A.CATEGORY_CD 		   	as categoryCd
				, (SELECT CD_NM FROM IB_COMMON_CODE WHERE MENU_CD = '00005' AND DTAIL_CD = A.CATEGORY_CD) as categoryNm
				, A.PROGRESS_CD 		   	as progressCd
				, A.RG_ID				   	as rgId
				, GROUP_CONCAT(J1.realNm SEPARATOR '^^^')   as realNm
				, GROUP_CONCAT(J1.makeNm SEPARATOR '^^^')   as makeNm
				
				, A.INFO_LEVEL				as infoLevel
				
				,(SELECT DIVISION FROM IB_STAFF WHERE USR_ID = A.RG_ID)			as division
				, F.CPN_ID														as cpnId
				, F.A_CPN_ID													as aCpnId
				]]>
				
				<isEqual property="selectInfo" compareValue="main1">				
				, (CASE WHEN F.A_CPN_ID IS NOT NULL AND (SELECT COUNT(*) FROM IB_OFFER WHERE CPN_ID = A.CPN_ID AND PROGRESS_CD IN ('00001','00002')
												   AND CATEGORY_CD IN ('00001','00002','00003','00015')
												   AND TM_DT &gt; DATE(DATE_ADD(NOW(), INTERVAL -100 DAY))
												   ) &gt; 0 THEN 'Y' ELSE 'N' END)
												   								as dealIngInfoYn
				</isEqual>
				<isNotEqual property="selectInfo" compareValue="main1">				
				, ''						as dealIngInfoYn				<!-- 정보정리 중 딜진행중인 상장회사 존재 여부 -->
				</isNotEqual>
				
				<![CDATA[
				
			FROM IB_OFFER A
	            LEFT JOIN IB_COMMON_CODE B ON (B.MENU_CD = '00002' AND B.DTAIL_CD = A.OFFER_CD)
	            LEFT JOIN IB_COMMON_CODE C ON (C.MENU_CD = '00011' AND C.DTAIL_CD = A.MIDDLE_OFFER_CD)
	            LEFT JOIN IB_CUSTOMER D ON D.S_NB = A.CST_ID
	            LEFT JOIN IB_COMPANY E ON E.CPN_ID = D.CPN_ID
	            LEFT JOIN IB_COMPANY F ON F.CPN_ID = A.CPN_ID
				LEFT JOIN (SELECT OFFER_SNB FROM IB_MAINTABLE_CHECK WHERE CATEGORY = '00001' AND RG_ID = #rgId#) MTC ON MTC.OFFER_SNB = A.S_NB
				LEFT OUTER JOIN
					(SELECT OFFER_S_NB
						  , REAL_NAME as realNm
						  , MAKE_NAME as makeNm
					   FROM IB_FILE_INFO
					  WHERE FILE_CATEGORY = '00000'

					) J1 ON A.S_NB = J1.OFFER_S_NB
	            LEFT JOIN ib_staff_allow_code_v alw ON (alw.USR_ID = #rgId# and alw.MENU_CD = '00005' AND alw.DTAIL_CD = A.CATEGORY_CD)
	            LEFT JOIN ib_staff_allow_code_v alw1 ON (alw1.USR_ID = #rgId# and alw1.MENU_CD = '00002' AND alw1.DTAIL_CD = A.offer_CD and alw1.dtail_cd != '00006' and alw1.dtail_cd != '00007')

			WHERE A.PROGRESS_CD != '10000'
			  and (alw.cd_nm is not null or alw1.cd_nm is not null)
			  AND (MTC.OFFER_SNB = '' OR MTC.OFFER_SNB IS NULL)
			  AND CASE WHEN A.CATEGORY_CD = '00008' THEN A.PROGRESS_CD != '00006' ELSE A.PROGRESS_CD != '00003' END
		]]>
			<isNotEmpty prepend="AND" property="choice_day">
				<![CDATA[	A.TM_DT between CONCAT (case when #choice_yearS# is null or #choice_yearS# = '' then #choice_year# else #choice_yearS# end, case when #choice_monthS# is null or #choice_monthS# = '' then #choice_month# else #choice_monthS# end, #choice_dayS# ) and CONCAT (#choice_year#, #choice_month#, #choice_day#, '235959') 		]]>
			</isNotEmpty>
			<isEqual prepend="AND" property="selectInfo" compareValue="main1">
				<![CDATA[	A.OFFER_CD IN ('00001','00002','00003','00004','00005','00008','00009','00010') 		]]>
			</isEqual>
			<isEqual prepend="AND" property="selectInfo" compareValue="main2">
				<![CDATA[	(A.CATEGORY_CD = '00001' or A.CATEGORY_CD = '00003' or A.CATEGORY_CD = '00008')		]]>
			</isEqual>
			<isEqual prepend="AND" property="selectInfo" compareValue="main3">
				<![CDATA[	A.CATEGORY_CD = '00011'		]]>
			</isEqual>
			<isEqual prepend="AND" property="selectInfo" compareValue="main4">
				<![CDATA[	A.CATEGORY_CD IN ('00012', '00016')		]]>
			</isEqual>
			<isEqual prepend="AND" property="selectInfo" compareValue="mainAll">
				<![CDATA[	A.CATEGORY_CD in ('00004','00005','00006','00007','00011','00012','00013','00015','00016')	]]>
			</isEqual>
			GROUP BY A.S_NB
			ORDER BY A.TM_DT DESC
			<isEqual property="selectInfo" compareValue="main1">
				limit 30
			</isEqual>
			<isEqual property="selectInfo" compareValue="main2">
				limit 50
			</isEqual>
			
		/* workDAO.selectMainOfferList */
	</select>



	<select id="workDAO.selectOfferCpnList" parameterClass="workVO" resultClass="egovMap">
		<![CDATA[
			SELECT
				  A.S_NB 				   as  sNb
				, A.MIDDLE_OFFER_CD 	   as  middleOfferCd
				, A.OFFER_CD 			   as  offerCd
				, (SELECT CD_NM FROM IB_COMMON_CODE WHERE MENU_CD = '00011' AND DTAIL_CD = MIDDLE_OFFER_CD) as middleOfferNm
				, (SELECT CD_NM FROM IB_COMMON_CODE WHERE MENU_CD = '00002' AND DTAIL_CD = OFFER_CD) as offerNm
				, DATE(A.TM_DT) 		   as  tmDt
				, A.RG_NM 			   as  rgNm
				, A.CST_ID 			   as  cstId
				, (SELECT CST_NM FROM IB_CUSTOMER WHERE IB_CUSTOMER.S_NB = A.CST_ID)      as  cstNm
				, (SELECT CPN_NM FROM IB_COMPANY WHERE IB_COMPANY.CPN_ID = (SELECT CPN_ID FROM IB_CUSTOMER WHERE IB_CUSTOMER.S_NB = A.CST_ID))      as  cstCpnNm
				, A.CPN_ID 			   as  cpnId
				, (SELECT CPN_NM FROM IB_COMPANY WHERE IB_COMPANY.CPN_ID = A.CPN_ID)      as  cpnNm
				, A.CATEGORY_CD 		   as  categoryCd
				, (SELECT CD_NM FROM IB_COMMON_CODE WHERE MENU_CD = '00005' AND DTAIL_CD = A.CATEGORY_CD) as categoryNm
				, A.PRICE 			   as  price
				, A.INVEST_PRICE 	   		as  investPrice
				, A.DUE_DT 			   as  dueDt
				, A.FEEDBACK 			   as  feedback
				, A.PROGRESS_CD 		   as  progressCd
				, A.RESULT 			   as  result
				, A.USED				   as  used
				, A.RG_ID				   as  rgId
				, GROUP_CONCAT(J1.REAL_NAME SEPARATOR '^^^')   as realNm
				, GROUP_CONCAT(J1.MAKE_NAME SEPARATOR '^^^')   as makeNm
				, J2.FINANCING            as  financing
				, J2.MANAGEMENT           as  management
				, J2.MNA                  as  mna
				, J2.ETC                  as  etc
				, J2.SHARE                as  share
				, J2.RESOURCE             as  resource
				, J2.HUMANNET            as  humanNet
				, J2.AUDIT	             as  audit
				, J2.INVESTINTE          as  investInte
				, J2.SERVEY 	         as  servey
				, A.INFO_PROVIDER        as  infoProvider
				, (SELECT CST_NM FROM IB_CUSTOMER WHERE IB_CUSTOMER.S_NB = A.INFO_PROVIDER)      as  infoProviderNm
				, (SELECT CPN_NM FROM IB_COMPANY WHERE IB_COMPANY.CPN_ID = (SELECT CPN_ID FROM IB_CUSTOMER WHERE IB_CUSTOMER.S_NB = A.INFO_PROVIDER))      as  infoProviderCpnNm
				, (SELECT COUNT(S_NB)
				 	 FROM IB_RECOMMEND_OPINION
					WHERE CATEGORY = '00001'
					  AND OFFER_SNB = A.S_NB
					  AND RG_DT >= A.TM_DT) 					as opinion
			FROM IB_OFFER A
			LEFT JOIN
				IB_FILE_INFO J1 ON (j1.FILE_CATEGORY = '00000' and A.S_NB = J1.OFFER_S_NB)
			LEFT OUTER JOIN (
				SELECT OFFER_SNB
					 , MAX(CASE WHEN CATEGORY = '00001' THEN COMMENT END) financing
					 , MAX(CASE WHEN CATEGORY = '00002' THEN COMMENT END) management
					 , MAX(CASE WHEN CATEGORY = '00003' THEN COMMENT END) mna
					 , MAX(CASE WHEN CATEGORY = '00004' THEN COMMENT END) etc
					 , MAX(CASE WHEN CATEGORY = '00005' THEN COMMENT END) share
					 , MAX(CASE WHEN CATEGORY = '00006' THEN COMMENT END) resource
					 , MAX(CASE WHEN CATEGORY = '00007' THEN COMMENT END) humanNet
					 , MAX(CASE WHEN CATEGORY = '00008' THEN COMMENT END) audit
					 , MAX(CASE WHEN CATEGORY = '00009' THEN COMMENT END) investInte
					 , MAX(CASE WHEN CATEGORY = '00010' THEN COMMENT END) servey
				  FROM IB_OFFER_INFO
				  GROUP BY OFFER_SNB
				) J2 ON A.S_NB = J2.OFFER_SNB
		]]>
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="cpnId">
				<![CDATA[	A.CPN_ID = #cpnId# 		]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="cstId">
				<![CDATA[	A.CST_ID = #cstId# 		]]>
			</isNotEmpty>
		</dynamic>
			GROUP BY A.S_NB
			ORDER BY A.TM_DT DESC

	</select>

	<select id="workDAO.selectStaffOfferList" parameterClass="workVO" resultClass="egovMap">
		<![CDATA[
			SELECT
				  A.S_NB 				   as  sNb
				, A.MIDDLE_OFFER_CD 	   as  middleOfferCd
				, A.OFFER_CD 			   as  offerCd
				, (SELECT CD_NM FROM IB_COMMON_CODE WHERE MENU_CD = '00011' AND DTAIL_CD = MIDDLE_OFFER_CD) as middleOfferNm
				, (SELECT CD_NM FROM IB_COMMON_CODE WHERE MENU_CD = '00002' AND DTAIL_CD = OFFER_CD) as offerNm
				, DATE(A.TM_DT) 		   as  tmDt
				, A.RG_NM 			   as  rgNm
				, A.CST_ID 			   as  cstId
				, (SELECT CST_NM FROM IB_CUSTOMER WHERE IB_CUSTOMER.S_NB = A.CST_ID)      as  cstNm
				, (SELECT CPN_NM FROM IB_COMPANY WHERE IB_COMPANY.CPN_ID = (SELECT CPN_ID FROM IB_CUSTOMER WHERE IB_CUSTOMER.S_NB = A.CST_ID))      as  cstCpnNm
				, A.CPN_ID 			   as  cpnId
				, (SELECT CPN_NM FROM IB_COMPANY WHERE IB_COMPANY.CPN_ID = A.CPN_ID)      as  cpnNm
				, CATEGORY_CD 		   as  categoryCd
				, A.PRICE 			   as  price
				, A.INVEST_PRICE 	   		as  investPrice
				, A.DUE_DT 			   as  dueDt
				, A.PROGRESS_CD 		   as  progressCd
				, A.RESULT 			   as  result
				, A.USED				   as  used
				, A.RG_ID				   as  rgId
				, J2.FINANCING            as  financing
				, J2.MANAGEMENT           as  management
				, J2.MNA                  as  mna
				, J2.ETC                  as  etc
				, J2.SHARE                as  share
				, J2.RESOURCE             as  resource
				, J2.HUMANNET            as  humanNet
				, J2.AUDIT	             as  audit
				, J2.INVESTINTE          as  investInte
				, J2.SERVEY          	 as  servey
			FROM (select a.*
					from IB_OFFER A
					LEFT OUTER JOIN IB_STAFF B ON A.RG_ID = B.usr_id
					]]><dynamic prepend="WHERE">
						<isNotEmpty prepend="AND" property="cstId">
							<![CDATA[	B.Cus_ID = #cstId# 		]]>
						</isNotEmpty>
					</dynamic>
					ORDER BY A.TM_DT DESC
					<isNotEqual property="recordCountPerPage" compareValue="0">
					limit #firstIndex#, #recordCountPerPage#
					</isNotEqual>
					<![CDATA[
				) A
			LEFT OUTER JOIN (
				SELECT OFFER_SNB
					 , MAX(CASE WHEN CATEGORY = '00001' THEN COMMENT END) financing
					 , MAX(CASE WHEN CATEGORY = '00002' THEN COMMENT END) management
					 , MAX(CASE WHEN CATEGORY = '00003' THEN COMMENT END) mna
					 , MAX(CASE WHEN CATEGORY = '00004' THEN COMMENT END) etc
					 , MAX(CASE WHEN CATEGORY = '00005' THEN COMMENT END) share
					 , MAX(CASE WHEN CATEGORY = '00006' THEN COMMENT END) resource
					 , MAX(CASE WHEN CATEGORY = '00007' THEN COMMENT END) humanNet
					 , MAX(CASE WHEN CATEGORY = '00008' THEN COMMENT END) audit
					 , MAX(CASE WHEN CATEGORY = '00009' THEN COMMENT END) investInte
					 , MAX(CASE WHEN CATEGORY = '00010' THEN COMMENT END) servey
				  FROM IB_OFFER_INFO
				  GROUP BY OFFER_SNB
				) J2 ON A.S_NB = J2.OFFER_SNB
		]]>
			GROUP BY A.S_NB
			ORDER BY A.TM_DT DESC, cstNm, cpnNm
	</select>
	<select id="workDAO.selectStaffOfferListCnt" parameterClass="workVO" resultClass="java.lang.Integer">
			SELECT
					count(1) cnt
			FROM IB_OFFER A
 LEFT OUTER JOIN IB_STAFF B ON A.RG_ID = B.usr_id
			<dynamic prepend="WHERE">
				<isNotEmpty prepend="AND" property="cstId">
					<![CDATA[	B.Cus_ID = #cstId# 		]]>
				</isNotEmpty>
			</dynamic>
	</select>


	<select id="workDAO.selectOfferCpnList2" parameterClass="workVO" resultClass="egovMap">
<![CDATA[
			SELECT
				  A.S_NB 				   as  sNb
				, A.MIDDLE_OFFER_CD 	   as  middleOfferCd
				, A.OFFER_CD 			   as  offerCd
				, (SELECT CD_NM FROM IB_COMMON_CODE WHERE MENU_CD = '00011' AND DTAIL_CD = MIDDLE_OFFER_CD) as middleOfferNm
				, (SELECT CD_NM FROM IB_COMMON_CODE WHERE MENU_CD = '00002' AND DTAIL_CD = OFFER_CD) as offerNm
				, DATE(TM_DT) 		   as  tmDt
				, A.RG_NM 			   as  rgNm
				, A.CST_ID 			   as  cstId
				, (SELECT CST_NM FROM IB_CUSTOMER WHERE IB_CUSTOMER.S_NB = A.CST_ID)      as  cstNm
				, (SELECT CPN_NM FROM IB_COMPANY WHERE IB_COMPANY.CPN_ID = (SELECT CPN_ID FROM IB_CUSTOMER WHERE IB_CUSTOMER.S_NB = A.CST_ID))      as  cstCpnNm
				, (SELECT POSITION FROM IB_CUSTOMER WHERE IB_CUSTOMER.S_NB = A.CST_ID)      as  position
				, A.CPN_ID 			   as  cpnId
				, (SELECT CPN_NM FROM IB_COMPANY WHERE IB_COMPANY.CPN_ID = A.CPN_ID)      as  cpnNm
				
				, CASE WHEN A.CPN_ID = '951769' THEN 'Q' WHEN SUBSTRING(IFNULL((SELECT A_CPN_ID FROM IB_COMPANY WHERE CPN_ID = A.CPN_ID), '-'),1,1) = 'A' THEN 'Q' ELSE SUBSTRING(A.CPN_ID,1,1) END	as  cpnStts
				
				, A.CATEGORY_CD 		   as  categoryCd
				, (SELECT CD_NM FROM IB_COMMON_CODE WHERE MENU_CD = '00005' AND DTAIL_CD = CATEGORY_CD) as categoryNm
				, A.PRICE 			   as  price
				, A.INVEST_PRICE 	   		as  investPrice
				, A.DUE_DT 			   as  dueDt
				, A.FEEDBACK 			   as  feedback
				, A.PROGRESS_CD 		   as  progressCd
				, A.RESULT 			   as  result
				, A.MEMO 				   as  memo
				, A.USED				   as  used
				, A.RG_ID				   as  rgId
				, GROUP_CONCAT(J1.realNm SEPARATOR '^^^')   as realNm
				, GROUP_CONCAT(J1.makeNm SEPARATOR '^^^')   as makeNm
				, J2.FINANCING            as  financing
				, J2.MANAGEMENT           as  management
				, J2.MNA                  as  mna
				, J2.ETC                  as  etc
				, J2.SHARE                as  share
				, J2.RESOURCE             as  resource
				, J2.HUMANNET            as  humanNet
				, J2.AUDIT	             as  audit
				, J2.INVESTINTE          as  investInte
				, J2.SERVEY          	 as  servey
				, A.INFO_PROVIDER        as  infoProvider
				, (SELECT CST_NM FROM IB_CUSTOMER WHERE IB_CUSTOMER.S_NB = A.INFO_PROVIDER)      as  infoProviderNm
				, A.SUB_MEMO			as  subMemo
				, (SELECT COUNT(S_NB)
				 	 FROM IB_RECOMMEND_OPINION
					WHERE CATEGORY = '00001'
					  AND OFFER_SNB = A.S_NB
					  AND RG_DT >= A.TM_DT) 					as opinion
					  
			FROM IB_OFFER A
			
			LEFT OUTER JOIN
				(SELECT OFFER_S_NB
					  , REAL_NAME as realNm
					  , MAKE_NAME as makeNm
				   FROM IB_FILE_INFO
				  WHERE FILE_CATEGORY = '00000'

				) J1 ON A.S_NB = J1.OFFER_S_NB
			LEFT OUTER JOIN (
				SELECT OFFER_SNB
					 , MAX(CASE WHEN CATEGORY = '00001' THEN COMMENT END) financing
					 , MAX(CASE WHEN CATEGORY = '00002' THEN COMMENT END) management
					 , MAX(CASE WHEN CATEGORY = '00003' THEN COMMENT END) mna
					 , MAX(CASE WHEN CATEGORY = '00004' THEN COMMENT END) etc
					 , MAX(CASE WHEN CATEGORY = '00005' THEN COMMENT END) share
					 , MAX(CASE WHEN CATEGORY = '00006' THEN COMMENT END) resource
					 , MAX(CASE WHEN CATEGORY = '00007' THEN COMMENT END) humanNet
					 , MAX(CASE WHEN CATEGORY = '00008' THEN COMMENT END) audit
					 , MAX(CASE WHEN CATEGORY = '00009' THEN COMMENT END) investInte
					 , MAX(CASE WHEN CATEGORY = '00010' THEN COMMENT END) servey
				  FROM IB_OFFER_INFO
				  GROUP BY OFFER_SNB
				) J2 ON A.S_NB = J2.OFFER_SNB
		]]>
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="cpnId">
				<![CDATA[	A.CPN_ID = #cpnId# 		]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="cstId">
				<![CDATA[	A.CST_ID = #cstId# 		]]>
			</isNotEmpty>
		</dynamic>
			GROUP BY A.S_NB

			UNION

		<![CDATA[
			SELECT
				  A.S_NB 			   as  sNb
				, A.MIDDLE_OFFER_CD 	   as  middleOfferCd
				, A.OFFER_CD 		   as  offerCd
				, (SELECT CD_NM FROM IB_COMMON_CODE WHERE MENU_CD = '00011' AND DTAIL_CD = MIDDLE_OFFER_CD) as middleOfferNm
				, (SELECT CD_NM FROM IB_COMMON_CODE WHERE MENU_CD = '00002' AND DTAIL_CD = OFFER_CD) as offerNm
				, DATE(A.TM_DT) 	   as  tmDt
				, A.RG_NM 			   as  rgNm
				, A.CST_ID 			   as  cstId
			    , B.CST_NM             as  cstNm
				, (SELECT CPN_NM FROM IB_COMPANY WHERE IB_COMPANY.CPN_ID = (SELECT CPN_ID FROM IB_CUSTOMER WHERE IB_CUSTOMER.S_NB = A.CST_ID))      as  cstCpnNm
				, B.POSITION 		   as position
				, A.CPN_ID 			   as  cpnId
			    , (SELECT CPN_NM FROM IB_COMPANY WHERE IB_COMPANY.CPN_ID = A.CPN_ID)      as  cpnNm
			    
			    , CASE WHEN A.CPN_ID = '951769' THEN 'Q' WHEN SUBSTRING(IFNULL((SELECT A_CPN_ID FROM IB_COMPANY WHERE CPN_ID = A.CPN_ID), '-'),1,1) = 'A' THEN 'Q' ELSE SUBSTRING(A.CPN_ID,1,1) END	as  cpnStts
			    
				, A.CATEGORY_CD 	   as  categoryCd
				, (SELECT CD_NM FROM IB_COMMON_CODE WHERE MENU_CD = '00005' AND DTAIL_CD = A.CATEGORY_CD) as categoryNm
				, A.PRICE 			   as  price
				, A.INVEST_PRICE 	   		as  investPrice
				, A.DUE_DT 			   as  dueDt
				, A.FEEDBACK 		   as  feedback
				, A.PROGRESS_CD 	   as  progressCd
				, A.RESULT 			   as  result
				, A.MEMO 			   as  memo
				, A.USED			   as  used
				, A.RG_ID		       as  rgId
				, GROUP_CONCAT(J1.realNm SEPARATOR '^^^')   as realNm
				, GROUP_CONCAT(J1.makeNm SEPARATOR '^^^')   as makeNm
				, J2.FINANCING            as  financing
				, J2.MANAGEMENT           as  management
				, J2.MNA                  as  mna
				, J2.ETC                  as  etc
				, J2.SHARE                as  share
				, J2.RESOURCE             as  resource
				, J2.HUMANNET            as  humanNet
				, J2.AUDIT	             as  audit
				, J2.INVESTINTE          as  investInte
				, J2.SERVEY          	 as  servey
				, A.INFO_PROVIDER        as  infoProvider
				, (SELECT CST_NM FROM IB_CUSTOMER WHERE IB_CUSTOMER.S_NB = A.INFO_PROVIDER)      as  infoProviderNm
				, A.SUB_MEMO			as  subMemo
				, (SELECT COUNT(S_NB)
				 	 FROM IB_RECOMMEND_OPINION
					WHERE CATEGORY = '00001'
					  AND OFFER_SNB = A.S_NB
					  AND RG_DT >= A.TM_DT) 					as opinion
			FROM
			    IB_OFFER A

				JOIN IB_CUSTOMER B
			LEFT OUTER JOIN
				(SELECT OFFER_S_NB
					  , REAL_NAME as realNm
					  , MAKE_NAME as makeNm
				   FROM IB_FILE_INFO
				  WHERE FILE_CATEGORY = '00000'

				) J1 ON A.S_NB = J1.OFFER_S_NB
			LEFT OUTER JOIN (
					SELECT OFFER_SNB
                         , MAX(CASE WHEN CATEGORY = '00001' THEN COMMENT END) financing
                         , MAX(CASE WHEN CATEGORY = '00002' THEN COMMENT END) management
                         , MAX(CASE WHEN CATEGORY = '00003' THEN COMMENT END) mna
                         , MAX(CASE WHEN CATEGORY = '00004' THEN COMMENT END) etc
                         , MAX(CASE WHEN CATEGORY = '00005' THEN COMMENT END) share
                         , MAX(CASE WHEN CATEGORY = '00006' THEN COMMENT END) resource
                         , MAX(CASE WHEN CATEGORY = '00007' THEN COMMENT END) humanNet
                         , MAX(CASE WHEN CATEGORY = '00008' THEN COMMENT END) audit
                         , MAX(CASE WHEN CATEGORY = '00009' THEN COMMENT END) investInte
                         , MAX(CASE WHEN CATEGORY = '00010' THEN COMMENT END) servey
					  FROM IB_OFFER_INFO
					  GROUP BY OFFER_SNB
					) J2 ON A.S_NB = J2.OFFER_SNB

			WHERE A.CST_ID = B.S_NB
		]]>
			<isNotEmpty prepend="AND" property="cpnId">
				<![CDATA[	(B.CPN_ID = #cpnId#  OR  A.CPN_ID = #cpnId#)	]]>
			</isNotEmpty>
		    GROUP BY A.S_NB
			ORDER BY tmDt DESC
			
			/* workDAO.selectOfferCpnList2 */
	</select>
	

	<select id="workDAO.selectOffercontactPoint" parameterClass="workVO" resultClass="egovMap">

		<![CDATA[
			SELECT
				  A.S_NB 			   as  sNb
				, A.MIDDLE_OFFER_CD 	   as  middleOfferCd
				, A.OFFER_CD 		   as  offerCd
				, (SELECT CD_NM FROM IB_COMMON_CODE WHERE MENU_CD = '00011' AND DTAIL_CD = MIDDLE_OFFER_CD) as middleOfferNm
				, (SELECT CD_NM FROM IB_COMMON_CODE WHERE MENU_CD = '00002' AND DTAIL_CD = OFFER_CD) as offerNm
				, DATE(A.TM_DT) 	   as  tmDt
				, A.RG_NM 			   as  rgNm
				, A.CST_ID 			   as  cstId
			    , B.CST_NM             as  cstNm
			    , (SELECT CPN_NM FROM IB_COMPANY WHERE IB_COMPANY.CPN_ID = (SELECT CPN_ID FROM IB_CUSTOMER WHERE IB_CUSTOMER.S_NB = A.CST_ID))      as  cstCpnNm
				, B.POSITION           as position
				, A.CPN_ID 			   as  cpnId
			    , (SELECT CPN_NM FROM IB_COMPANY WHERE IB_COMPANY.CPN_ID = A.CPN_ID)      as  cpnNm
				, A.CATEGORY_CD 	   as  categoryCd
				, A.PRICE 			   as  price
				, A.INVEST_PRICE 	   		as  investPrice
				, A.DUE_DT 			   as  dueDt
				, A.FEEDBACK 		   as  feedback
				, A.PROGRESS_CD 	   as  progressCd
				, A.RESULT 			   as  result
				, A.MEMO 			   as  memo
				, A.USED			   as  used
				, A.RG_ID		       as  rgId
				, J2.FINANCING            as  financing
				, J2.MANAGEMENT           as  management
				, J2.MNA                  as  mna
				, J2.ETC                  as  etc
				, J2.SHARE                as  share
				, J2.RESOURCE             as  resource
				, J2.HUMANNET            as  humanNet
				, J2.AUDIT	             as  audit
				, J2.INVESTINTE          as  investInte
				, J2.SERVEY          	 as  servey
				, A.INFO_PROVIDER        as  infoProvider
				, (SELECT CST_NM FROM IB_CUSTOMER WHERE IB_CUSTOMER.S_NB = A.INFO_PROVIDER)      as  infoProviderNm
			    , (SELECT CPN_NM FROM IB_COMPANY WHERE IB_COMPANY.CPN_ID = (SELECT CPN_ID FROM IB_CUSTOMER WHERE IB_CUSTOMER.S_NB = A.INFO_PROVIDER))      as  infoProviderCpnNm
			FROM IB_OFFER A
			LEFT JOIN IB_CUSTOMER B ON A.CST_ID = B.S_NB
			LEFT JOIN (
					SELECT OFFER_SNB
                         , MAX(CASE WHEN CATEGORY = '00001' THEN COMMENT END) financing
                         , MAX(CASE WHEN CATEGORY = '00002' THEN COMMENT END) management
                         , MAX(CASE WHEN CATEGORY = '00003' THEN COMMENT END) mna
                         , MAX(CASE WHEN CATEGORY = '00004' THEN COMMENT END) etc
                         , MAX(CASE WHEN CATEGORY = '00005' THEN COMMENT END) share
                         , MAX(CASE WHEN CATEGORY = '00006' THEN COMMENT END) resource
                         , MAX(CASE WHEN CATEGORY = '00007' THEN COMMENT END) humanNet
                         , MAX(CASE WHEN CATEGORY = '00008' THEN COMMENT END) audit
                         , MAX(CASE WHEN CATEGORY = '00009' THEN COMMENT END) investInte
                         , MAX(CASE WHEN CATEGORY = '00010' THEN COMMENT END) servey
					  FROM IB_OFFER_INFO
					  GROUP BY OFFER_SNB
					) J2 ON A.S_NB = J2.OFFER_SNB
			WHERE A.RG_NM  IS NOT NULL
		]]>
			<isNotEmpty prepend="AND" property="cpnId">
				<![CDATA[	(B.CPN_ID = #cpnId#  OR  A.CPN_ID = #cpnId#)	]]>
			</isNotEmpty>
		<![CDATA[
			ORDER BY LEFT(A.TM_DT, 10) DESC, B.CST_NM ASC
		]]>
		
		/* workDAO.selectOffercontactPoint */
	</select>
	

	<update id="workDAO.updateFeedback">
		<![CDATA[
			UPDATE IB_OFFER
			SET
				  FEEDBACK  =  #feedback#
				, UP_DT     =  now()
				, UP_ID     =  #rgId#
			WHERE S_NB      =  #sNb#
		]]>
	</update>

	<update id="workDAO.updateprogressCd">		
		UPDATE IB_OFFER
		SET
			  PROGRESS_CD  =  #progressCd#
			, USED  	   =  (CASE #progressCd#
									WHEN '10000' THEN '00002'
									WHEN '10001' THEN '00002'
									WHEN '10002' THEN '00002'
									ELSE '00001'
			  				   END)
			  				   
		<isEqual property="progressCd" compareValue="00003">
			, INVEST_DT		=  (CASE WHEN CATEGORY_CD = '00008' THEN NULL ELSE TM_DT END)
		</isEqual>
		<isEqual property="progressCd" compareValue="00006">
			, INVEST_DT		=  (CASE WHEN CATEGORY_CD = '00008' THEN TM_DT ELSE NULL END)
		</isEqual>
			  	
			  				   
			, UP_DT        =  now()
			, UP_ID        =  #rgId#
		WHERE S_NB         =  #sNb#
		/* workDAO.updateprogressCd */
	</update>
	<update id="workDAO.updateProgressCdNmatchCpn">
		<![CDATA[
			UPDATE IB_OFFER
			SET
				  PROGRESS_CD  =  #progressCd#
				, USED  	   =  (CASE #progressCd#
										WHEN '10000' THEN '00002'
										ELSE '00001'
				  				   END)
				, UP_DT        =  now()
				, UP_ID        =  #rgId#
			WHERE S_NB         =  #sNb#
		]]>
	</update>

	<update id="workDAO.updateDeal">
		<![CDATA[
			UPDATE IB_OFFER
			SET
				  MEMO 			=  #memo#
				, MIDDLE_OFFER_CD 	    =  #middleOfferCd#
				, OFFER_CD 	    =  #offerCd#
				, CATEGORY_CD 	=  #categoryCd#
				, CST_ID 		=  #cstId#
			    , CPN_ID        =  #cpnId#
			    , PRICE         =  #price#
			    , INVEST_PRICE  =  #investPrice#
			    , ENTRUST       =  #entrust#
			    , CPN_CST       =  #cpnCst#
				, UP_DT  	    =  now()
				, UP_ID  	  	=  #rgId#
				, FINANCING     =  #financing#
				, MANAGEMENT    =  #management#
				, MNA           =  #mna#
				, ETC           =  #etc#
				, SHARE         =  #share#
				, RESOURCE      =  #resource#
				, HUMAN_NET     =  #humanNet#
				, AUDIT		    =  #audit#
				, INVEST_INTE   =  #investInte#
				, SERVEY   		=  #servey#
				, INFO_PROVIDER =  #infoProvider#
				, COWORKER	 	=  #coworker#
				, SUPPORTER 	=  #supporter#
				, SUPPORTER_RATIO =  #supporterRatio#
				, SUPPORTER_TEXT =  #supporterText#		]]><isNotEmpty property="dueDt"><![CDATA[
				, DUE_DT		 =  #dueDt#				]]></isNotEmpty><isNotEmpty property="sellBuy"><![CDATA[
				, SELL_BUY		 =  #sellBuy# 			]]></isNotEmpty><isNotEmpty property="cpnTypeCd"><![CDATA[
				, CPN_TYPE_CD	 =  #cpnTypeCd# 		]]></isNotEmpty><isNotEmpty property="cpnType"><![CDATA[
				, CPN_TYPE		 =  #cpnType# 			]]></isNotEmpty>
				
				<isEqual property="rcmdEdit" compareValue="Y">
				,RECOMMEND_SNB = #rcmdSnb#
				</isEqual>
				
				<isNotEmpty property="infoLevel">
				, INFO_LEVEL		 =  #infoLevel#
				</isNotEmpty>
				
			WHERE S_NB   	  	=  #sNb#
	
	</update>

	<update id="workDAO.updateOfferInfo">
		<![CDATA[
			UPDATE IB_OFFER_INFO
			SET
				  UP_DT  	    =  now()
				, UP_ID  	  	=  #rgId#
				, COMMENT     	=  #comment# ]]><isNotEmpty property="star"><![CDATA[
				, STAR     		=  #star#	 ]]></isNotEmpty><![CDATA[
				, EXPIRATION_DT =  (case when #expirationDt# is null or #expirationDt# = '' then null else #expirationDt# end)
			WHERE S_NB   	=  #offerSnb#
		]]>
	</update>

	<insert id="workDAO.insertDeal">
		
			INSERT INTO IB_OFFER
				  ( MEMO
				  , MIDDLE_OFFER_CD
				  , OFFER_CD
				  , CATEGORY_CD
				  , CST_ID
				  , CPN_ID
				  , PRICE
				  , INVEST_PRICE
				  , ENTRUST
				  , CPN_CST		
				  <isNotEmpty property="dueDt">
				  , DUE_DT		
				  </isNotEmpty>
				  <isNotEmpty property="sellBuy">
				  , SELL_BUY		
				  </isNotEmpty>
				  <isNotEmpty property="cpnTypeCd">
				  , CPN_TYPE_CD		
				  </isNotEmpty>
				  <isNotEmpty property="cpnType">
				  , CPN_TYPE		
				  </isNotEmpty>
				  , TM_DT
				  , RG_DT
				  , UP_DT
				  , RG_ID
				  , UP_ID
				  , RG_NM
				  , FINANCING
				  , MANAGEMENT
				  , MNA
				  , ETC
				  , SHARE
				  , RESOURCE
				  , HUMAN_NET
				  , AUDIT
				  , INVEST_INTE
				  , SERVEY
				  , EXPLORING_CNT
				  , INFO_PROVIDER
				  , COWORKER
				  , SUPPORTER
				  , SUPPORTER_TEXT
				  , RECOMMEND_SNB
				  					
				  <isNotEmpty property="infoLevel">
				  , INFO_LEVEL		
				  </isNotEmpty>
				  
		 ) VALUES ( #memo#
				  , #middleOfferCd#
				  , #offerCd#
				  , #categoryCd#
				  , (CASE #cstId#
						WHEN '' THEN 0
						ELSE #cstId#
  				    END)
				  , #cpnId#
				  , #price#
				  , #investPrice#
				  , #entrust#
				  , #cpnCst#		
				  <isNotEmpty property="dueDt">
				  , #dueDt#			
				  </isNotEmpty>
				  <isNotEmpty property="sellBuy">
				  , #sellBuy#		
				  </isNotEmpty>
				  <isNotEmpty property="cpnTypeCd">
				  , #cpnTypeCd#		
				  </isNotEmpty>
				  <isNotEmpty property="cpnType">
				  , #cpnType#		
				  </isNotEmpty>
				  , concat(#tmDt#,date_format(now(), '%H%i%s'))
				  , now()
				  , now()
				  , #rgId#
				  , #rgId#
				  , #rgNm#
				  , #financing#
				  , #management#
				  , #mna#
				  , #etc#
				  , #share#
				  , #resource#
				  , #humanNet#
				  , #audit#
				  , #investInte#
				  , #servey#
				  , CASE WHEN #exploringCnt# = '' THEN NULL ELSE #exploringCnt# END
				  , #infoProvider#
				  , #coworker#
				  , #supporter#
				  , #supporterText#
				  , #rcmdSnb#				  
				  					
				  <isNotEmpty property="infoLevel">
				  , #infoLevel#		
				  </isNotEmpty>
				  
				  )
		
		<selectKey keyProperty="sNb" resultClass="string">
			SELECT LAST_INSERT_ID()
		</selectKey>
		
	</insert>

	<select id="workDAO.selectOfferInfo" parameterClass="workVO" resultClass="workVO">
			SELECT
				   S_NB  as sNb
			  FROM IB_OFFER
			 WHERE RG_ID = <![CDATA[#rgId#]]>
			   and RG_DT >=  DATE_ADD(NOW(), INTERVAL -1 MINUTE)
			order by s_nb desc limit 1
	</select>

	<insert id="workDAO.insertOfferInfo">
		<![CDATA[
			INSERT INTO IB_OFFER_INFO
				  ( OFFER_SNB
				  , STAR
				  , EXPIRATION_DT
				  , CATEGORY
				  , COMMENT
				  , RG_DT
				  , UP_DT
				  , RG_ID
				  , UP_ID
		 ) VALUES ( #offerSnb#
				  , #star#
				  , (case when #expirationDt# is null or #expirationDt# = '' then null else #expirationDt# end)
				  , #categoryCd#
				  , #comment#
				  , now()
				  , now()
				  , #rgId#
				  , #rgId#
				  )
		]]>
	</insert>

	<delete id="workDAO.deleteOfferInfo">
		<![CDATA[
			DELETE FROM IB_OFFER_INFO
			 WHERE S_NB = #offerSnb#
		]]>
	</delete>

	<update id="workDAO.updateDealMemo">
		<![CDATA[
			UPDATE IB_OFFER
			SET
				  UP_DT  	    =  now()
				, UP_ID  	  	=  #rgId#
		]]><isNotEmpty prepend="" property="memo">
				<![CDATA[	, MEMO  =  #memo#	]]>
			</isNotEmpty><isNotEmpty prepend="" property="subMemo">
				<![CDATA[	, SUB_MEMO  =  #subMemo#	]]>
			</isNotEmpty><![CDATA[
			WHERE S_NB   	  	=  #sNb#
		]]>
	</update>

	<update id="workDAO.updateKeyPointChkMemo">
		<![CDATA[
			UPDATE IB_OFFER_INFO
			SET
				  UP_DT  	    =  now()
				, UP_ID  	  	=  #rgId#
		]]><isNotEmpty prepend="" property="memo">
				<![CDATA[	, MEMO  =  #memo#	]]>
			</isNotEmpty><![CDATA[
			WHERE S_NB   	  	=  #sNb#
		]]>
	</update>

	<update id="workDAO.updateDealResult">
		<![CDATA[
			UPDATE IB_OFFER
			SET
				  UP_DT     =  now()
				, UP_ID     =  #rgId#
		]]><isEqual prepend="" property="tmpNum1" compareValue="rs">
		<![CDATA[ , RESULT	=  #result#	]]>
		</isEqual><isEqual property="tmpNum1" compareValue="op">
		<![CDATA[ , OPINION  =  #opinion#	]]>
		</isEqual><![CDATA[
			WHERE S_NB      =  #sNb#
		]]>
	</update>

	<update id="workDAO.updateDueDate">
		<![CDATA[
			UPDATE IB_OFFER
			SET
				  DUE_DT 	=  #dueDt#
				, UP_DT     =  now()
				, UP_ID     =  #rgId#
			WHERE S_NB      =  #sNb#
		]]>
	</update>

<!-- comment_mna -->
	<select id="workDAO.selectCommentMnaList" parameterClass="workVO" resultClass="egovMap">
		<![CDATA[
			SELECT
				  S_NB                as  sNb
				, OFFER_ID            as  offerId
				, CPN_NM              as  cpnNm
				, CST_NM              as  cstNm
				, RG_NM               as  rgNm
				, PROGRESS_CD         as  progressCd
				, DATE(TM_DT)         as  tmDt
				, DATE(RG_DT)         as  rgDt
			FROM IB_COMMENT_MNA
		]]>
<!-- /*
			<isNotEmpty prepend="AND" property="name">
				<![CDATA[	RG_NM = #name# 		]]>
			</isNotEmpty>
*/-->
			ORDER BY TM_DT ASC
	</select>

	<insert id="workDAO.insertCommentMna">
		<![CDATA[
			INSERT INTO IB_COMMENT_MNA
				  ( OFFER_ID
				  , CPN_NM
				  , CST_NM
				  , RG_NM
				  , PROGRESS_CD
				  , TM_DT
				  , RG_DT
				  , UP_DT
				  , RG_ID
				  , UP_ID
		 ) VALUES ( #offerId#
				  , #cpnNm#
				  , #cstNm#
				  , #rgNm#
				  , #progressCd#
				  , #tmDt#
				  , now()
				  , now()
				  , #rgId#
				  , #rgId# )
		]]>
	</insert>
	<update id="workDAO.updateCommentMna">
		<![CDATA[
			UPDATE IB_COMMENT_MNA
			SET
				  CPN_NM      =  #cpnNm#
				, CST_NM      =  #cstNm#
				, RG_NM       =  #rgNm#
				, PROGRESS_CD =  #progressCd#
				, TM_DT       =  #tmDt#
				, UP_DT       =  now()
				, UP_ID       =  #rgId#
			WHERE S_NB        =  #sNb#
		]]>
	</update>

	<select id="workDAO.selectMaxSnbINopinion" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
			SELECT
				  MAX(S_NB)       as sNb
			 FROM IB_OFFER
			WHERE RG_DT >= CURRENT_DATE()
			  AND RG_ID = #rgId#
		]]>
	</select>

	<select id="workDAO.selectMaxSnb" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
			SELECT
				  MAX(S_NB)       as sNb
			FROM IB_OFFER
			WHERE RG_DT >= CURRENT_DATE()
			  AND OFFER_CD = '11111'
		]]>
            <isNotEmpty prepend="AND" property="rgId">
				<![CDATA[	UP_ID = #rgId# 		]]>
			</isNotEmpty>
		<![CDATA[
		]]>
	</select>

	<insert id="workDAO.insertFileInfo">
		<![CDATA[
			INSERT INTO ib_file_info
					( OFFER_S_NB
					, REPORT_YN 	]]><isNotEmpty property="subCd"><![CDATA[
					, SUB_CD 		]]></isNotEmpty><![CDATA[
					, REAL_NAME
					, MAKE_NAME
					, FILE_CATEGORY
					, PATH
					, RG_DT
					, UP_DT
					, RG_ID
					, UP_ID)
			VALUES
					( #offerSnb#
					, #reportYN#	]]><isNotEmpty property="subCd"><![CDATA[
					, #subCd#		]]></isNotEmpty><![CDATA[
					, #realName#
					, #makeName#
					, #fileCategory#
					, #path#
					, now()
					, now()
					, #rgId#
					, #rgId#
					)
		]]>
	</insert>

	<update id="workDAO.updateFileInfoCheckReport">
		<![CDATA[
			update ib_file_info
			set report_yn = #reportYN#
			where offer_s_nb = #sNb#
		]]>
	</update>
	
	<select id="workDAO.selectofferInfoInCpnCst" parameterClass="workVO" resultClass="workVO">
		select
				a.S_NB				as sNb
				, case when a.category = '00002' then '자산운용' when a.category = '00003' then 'MnA' end as tmpNum1
				, a.comment			as comment
				, date(b.tm_dt)		as tmDt
				, a.rg_id			as rgId
				
		  FROM IB_OFFER_INFO a
	 LEFT JOIN IB_OFFER b ON b.S_NB = a.OFFER_SNB
	 LEFT JOIN IB_CUSTOMER c ON c.S_NB = b.CST_ID
		 WHERE (a.CATEGORY = '00002' or a.CATEGORY = '00003')<![CDATA[
		   AND (b.CPN_ID = #cpnId# or c.CPN_ID = #cpnId#)]]>
	  GROUP BY tmpNum1, comment
	  ORDER BY tmpNum1, tmDt DESC
	</select>

	<!-- 정보(핵심체크사항) -->
	<select id="workDAO.selectofferKeyPoint" parameterClass="workVO" resultClass="workVO">

			SELECT
				  A.S_NB             		as  sNb
				, J1.S_NB			 		as  memoSnb
				, DATE(A.TM_DT)      		as  tmDt
				, A.RG_NM            		as  rgNm
				, A.CPN_ID           		as  cpnId
				, B.CPN_NM           		as  cpnNm
				, case when b.s_nb is null then c.s_nb else b.s_nb end as cpnSnb
				, B.CATEGORY_BUSINESS 		as  cateBsns
				, A.CST_ID           		as  cstId
				, F.CST_NM           		as  cstNm
				, C.CPN_NM           		as  cstCpnNm
				, J1.categoryNm            	as  categoryNm
				, J1.FINANCING            	as  financing
				, J1.snb           			as  offerSnb
				, J1.CD            			as  kpcProcess
				, J1.LV            			as  lvCd
				, J1.MEMO			        as  subMemo
				, A.INFO_PROVIDER    		as  infoProvider
				, E.CST_NM           		as  infoProviderNm
				, I.CST_NM           		as  supporterNm
				, D.USR_NM           		as  coworker
				
			FROM  IB_OFFER A
	        LEFT JOIN IB_COMPANY 	B ON B.CPN_ID = A.CPN_ID
	        LEFT JOIN IB_CUSTOMER 	F ON F.S_NB = 	A.CST_ID
	        LEFT JOIN IB_COMPANY 	C ON C.CPN_ID = F.CPN_ID
	        LEFT JOIN IB_STAFF 		D ON D.CUS_ID = A.COWORKER
	        LEFT JOIN IB_CUSTOMER 	E ON E.S_NB = 	A.INFO_PROVIDER
			LEFT JOIN IB_CUSTOMER 	I ON I.S_NB = 	A.SUPPORTER
				
			RIGHT JOIN (
                    SELECT a.S_NB, a.OFFER_SNB, case when b.cd_dc is null then b.cd_nm else b.cd_dc end as categoryNm
						 , a.PROGRESS_CD	CD
						 , a.MEMO			memo
						 , a.LV_CD			lv
						 , a.S_NB			snb
						 , a.COMMENT		financing
                      FROM IB_OFFER_INFO a
					  LEFT JOIN IB_COMMON_CODE B ON (B.MENU_CD = '00018' AND B.DTAIL_CD = a.category)
					<isNotEqual prepend="" property="tmpNum2" compareValue="statsPrivateList">
						<isEqual property="selectInfo" compareValue="main">
			            	<![CDATA[	 WHERE a.PROGRESS_CD < '00003' and a.comment != ''	]]>
						</isEqual><isNotEqual property="selectInfo" compareValue="main">
			            	<![CDATA[	 WHERE a.category = #selectInfo#	]]>
						</isNotEqual>
					</isNotEqual>                      
                    ) J1 ON A.S_NB = J1.OFFER_SNB
                    
				<![CDATA[
				WHERE A.kpc_Process < '00002'
				  AND A.TM_DT between CONCAT (case when #choice_yearS# is null or #choice_yearS# = '' then #choice_year# else #choice_yearS# end, case when #choice_monthS# is null or #choice_monthS# = '' then #choice_month# else #choice_monthS# end, #choice_dayS# )
								  and CONCAT (#choice_year#, #choice_month#, #choice_day#, '235959')]]>
								  
            <isNotEqual prepend="AND" property="total" compareValue="total">
				<![CDATA[	J1.CD != '10000'	]]>
			</isNotEqual>
			<isEqual prepend="AND" property="tmpNum2" compareValue="statsPrivateList">
				<isNotEmpty property="tmpNum1">
				<![CDATA[	A.RG_NM = #tmpNum1#	]]>
				</isNotEmpty>
			</isEqual>
			<isNotEqual prepend="AND" property="selectInfo" compareValue="main">
				<![CDATA[	J1.FINANCING is not NULL     AND     J1.FINANCING <> ''	]]>
			</isNotEqual>
			
			ORDER BY  kpcProcess ASC
			<isEqual prepend="," property="sorting" compareValue="">
				<![CDATA[	A.TM_DT DESC		]]>
			</isEqual>
			<isEqual prepend="," property="sorting" compareValue="1">
				<![CDATA[	case when infoProviderNm = '' or infoProviderNm is null then 1 else 0 end, infoProviderNm ASC		]]>
			</isEqual>
			<isEqual prepend="," property="sorting" compareValue="2">
				<![CDATA[	case when cstNm = '' or cstNm is null then 1 else 0 end, cstNm ASC 		]]>
			</isEqual>
			<isEqual prepend="," property="sorting" compareValue="3">
				<![CDATA[	rgNm ASC 		]]>
			</isEqual>
			<isEqual prepend="," property="sorting" compareValue="4">
				<![CDATA[	cpnNm,cstCpnNm ASC 		]]>
			</isEqual>
			<isEqual prepend="," property="sorting" compareValue="6">
				<![CDATA[	case when cateBsns = '' or cateBsns is null then 1 else 0 end, cateBsns ASC		]]>
			</isEqual>
			<isEqual prepend="," property="sorting" compareValue="7">
				<![CDATA[	lvCd DESC, tmDt DESC		]]>
			</isEqual>
			LIMIT 30
		
		/* workDAO.selectofferKeyPoint */
	</select>

	<select id="workDAO.selectFileInfo" parameterClass="fileVO" resultClass="fileVO">
		<![CDATA[
			SELECT
				  OFFER_S_NB       as  offerSnb
				, MAKE_NAME        as  makeName
				, REAL_NAME        as  realName
				, PATH             as  path
			FROM  IB_FILE_INFO
		]]>
		<dynamic prepend="WHERE">
            <isNotEmpty prepend="AND" property="makeName">
				<![CDATA[	MAKE_NAME = #makeName#	]]>
			</isNotEmpty>
            <isNotEmpty prepend="AND" property="offerSnb">
				<![CDATA[	OFFER_S_NB = #offerSnb#	]]>
            </isNotEmpty>
            <isNotEmpty prepend="AND" property="fileCategory">
				<![CDATA[	FILE_CATEGORY = #fileCategory#	]]>
            </isNotEmpty>
            <isNotEmpty prepend="AND" property="subCd">
				<![CDATA[	SUB_CD = #subCd#	]]>
            </isNotEmpty>
		</dynamic>
		<![CDATA[
		ORDER BY  RG_DT DESC
		]]>
		<isNotEqual property="recordCountPerPage" compareValue="0">
		limit #firstIndex#, #recordCountPerPage#
		</isNotEqual>
	</select>

	<select id="workDAO.selectFileInfoList" parameterClass="fileVO" resultClass="egovMap">
		<![CDATA[
			SELECT
				  OFFER_S_NB       as  offerSnb
				, A.S_NB				as sNb
				, MAKE_NAME        as  makeName
				, REAL_NAME        as  realName
				, CASE WHEN D.CPN_NM is null THEN F.CPN_NM WHEN D.CPN_NM is not null THEN D.CPN_NM END       as  cpnNm
				, PATH             as  path
				, A.RG_ID				as rgId
				, A.RG_DT				as rgDt
				, B.USR_NM				as usrNm
				
				,(case when a.file_category = '00004' then ifnull((select private from ib_comment where s_nb = offer_s_nb), 'N') else 'N' end) as privateYn
				
			FROM IB_FILE_INFO A
			LEFT JOIN IB_STAFF B ON B.USR_ID = A.RG_ID
			LEFT JOIN IB_OFFER C ON C.S_NB = A.OFFER_S_NB
			LEFT JOIN IB_COMPANY D ON D.CPN_ID = C.CPN_ID
			LEFT JOIN IB_CUSTOMER E ON E.S_NB = C.CST_ID
			LEFT JOIN IB_COMPANY F ON F.CPN_ID = E.CPN_ID
		]]>
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="realName">
				<![CDATA[	REAL_NAME LIKE CONCAT('%',#realName#,'%') or D.CPN_NM like CONCAT('%',#realName#,'%') or F.CPN_NM like CONCAT('%',#realName#,'%')		]]>
			</isNotEmpty>
            <isEqual prepend="AND" property="fileCategory" compareValue="00000">
				<![CDATA[	FILE_CATEGORY in ('00000', '00002')	]]>				<!-- ,'00004') -->
            </isEqual>
            <isNotEqual prepend="AND" property="fileCategory" compareValue="00000">
				<![CDATA[	FILE_CATEGORY = #fileCategory#	]]>
            </isNotEqual>
		</dynamic>
		ORDER BY  A.RG_DT DESC

		<isNotEqual property="recordCountPerPage" compareValue="0">
		limit #firstIndex#, #recordCountPerPage#
		</isNotEqual>
	</select>

	<select id="workDAO.selectFileInfoListCnt" parameterClass="fileVO" resultClass="java.lang.Integer">
		<![CDATA[
			SELECT
				  COUNT(1)
			FROM  IB_FILE_INFO
		]]>
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="realName">
				<![CDATA[	REAL_NAME LIKE CONCAT('%',#realName#,'%') 		]]>
			</isNotEmpty>
		</dynamic>
	</select>

	<update id="workDAO.updateFileInfo">
		<![CDATA[
			UPDATE IB_FILE_INFO
			SET
				  REAL_NAME  =  #realName#
				  ,MAKE_NAME =  #makeName#
				  ,PATH 	 =  #path#
				  ,UP_DT 	 =  now()
				  ,UP_ID 	 =  #rgId#
		]]>
		<dynamic prepend="WHERE">
            <isNotEmpty prepend="AND" property="offerSnb">
				<![CDATA[	OFFER_S_NB = #offerSnb#	]]>
            </isNotEmpty>
            <isNotEmpty prepend="AND" property="fileCategory">
				<![CDATA[	FILE_CATEGORY = #fileCategory#	]]>
            </isNotEmpty>
		</dynamic>
	</update>

	<delete id="workDAO.deleteFileInfo">
		<![CDATA[
			DELETE FROM IB_FILE_INFO
			 WHERE S_NB = #sNb#
		]]>
	</delete>

	<delete id="workDAO.deleteFileInfoOfOfferSnb">
		<![CDATA[
			DELETE FROM IB_FILE_INFO
			 WHERE OFFER_S_NB = #offerSnb#
		]]>
	</delete>

	<update id="workDAO.updateOfferCoworker">
		<![CDATA[
			UPDATE IB_OFFER
			SET
				  COWORKER  =  #coworker#
				  ,UP_DT 	 =  now()
				  ,UP_ID 	 =  #rgId#
			WHERE S_NB      =  #sNb#
		]]>
	</update>

	<update id="workDAO.updateOfferProcess">
		<![CDATA[
			UPDATE IB_OFFER
			SET
				  KPC_PROCESS = #kpcProcess#
				  ,UP_DT 	 =  now()
				  ,UP_ID 	 =  #rgId#
			WHERE S_NB        =  #sNb#
		]]>
	</update>

	<update id="workDAO.updateOfferInfoProcess">
		<![CDATA[
			UPDATE IB_OFFER_INFO
			SET
				   PROGRESS_CD 	= #kpcProcess#
				  ,UP_DT 		= NOW()
				  ,UP_ID 		= #rgId#
			WHERE OFFER_SNB 	=  #sNb#
            ]]><isEqual prepend="AND" property="url" compareValue="financing">
				<![CDATA[	CATEGORY = '00001'	]]>
			</isEqual>
            <isEqual prepend="AND" property="url" compareValue="management">
				<![CDATA[	CATEGORY = '00002'	]]>
			</isEqual>
            <isEqual prepend="AND" property="url" compareValue="mna">
				<![CDATA[	CATEGORY = '00003'	]]>
			</isEqual>
            <isEqual prepend="AND" property="url" compareValue="etc">
				<![CDATA[	CATEGORY = '00004'	]]>
			</isEqual>
            <isEqual prepend="AND" property="url" compareValue="share">
				<![CDATA[	CATEGORY = '00005'	]]>
			</isEqual>
            <isEqual prepend="AND" property="url" compareValue="resource">
				<![CDATA[	CATEGORY = '00006'	]]>
			</isEqual>
            <isEqual prepend="AND" property="url" compareValue="humanNet">
				<![CDATA[	CATEGORY = '00007'	]]>
			</isEqual>
            <isEqual prepend="AND" property="url" compareValue="audit">
				<![CDATA[	CATEGORY = '00008'	]]>
			</isEqual>
            <isEqual prepend="AND" property="url" compareValue="investInte">
				<![CDATA[	CATEGORY = '00009'	]]>
			</isEqual>
			<isEqual prepend="AND" property="url" compareValue="servey">
				<![CDATA[	CATEGORY = '00010'	]]>
			</isEqual>
	</update>

	<select id="workDAO.selectCusBasicConnet" parameterClass="cusVO" resultClass="cusVO">
		<![CDATA[
			SELECT CusCd
			FROM  CS_Cus_Info
			WHERE DelFlag = 'N'
		]]>
            <isNotEmpty prepend="AND" property="CusNm">
				<![CDATA[	CusNm LIKE CONCAT ('%',#CusNm#,'%')	]]>
			</isNotEmpty>
            <isNotEmpty prepend="AND" property="S_Nb">
				<![CDATA[	S_Nb = #S_Nb#	]]>
			</isNotEmpty>
	</select>



	<insert id="workDAO.insertCusBasic">
		<![CDATA[
			INSERT INTO CS_Cus_Info (CusCd, CusNm, CusType, CusPhone, CusEmail, CusStatus, CusEtc, CusOfficeNm, CusOfficePosition, CusOfficeTel,
								CusAddInvestFlag, CusManagerNm, CusInviteNm,
								RegDate, RegPerSabun, DelFlag, S_Nb)

						SELECT IFNULL(LPAD(MAX(CusCd) + 1, 12, 0), '000000000001') CusCd, #CusNm#, #CusType#, #CusPhone#, #CusEmail#, #CusStatus#, #CusEtc#, #CusOfficeNm#, #CusOfficePosition#, #CusOfficeTel#,'1', #CusManagerNm#, #CusInviteNm#, NOW(), #RegPerSabun#, 'N', #S_Nb#
			 			  FROM CS_Cus_Info
		]]>
	</insert>

	<update id="workDAO.updateCusBasic">
		<![CDATA[
			UPDATE CS_Cus_Info
			SET
				  S_Nb 			=
				]]><isEmpty property="tmpId"><![CDATA[
					#S_Nb#
				]]></isEmpty><isNotEmpty property="tmpId"><![CDATA[
					#tmpId#
				]]></isNotEmpty><isNotEmpty property="CusStatus"><![CDATA[
				  ,CusStatus 	= #CusStatus#
				]]></isNotEmpty><isNotEmpty property="CusNm"><![CDATA[
				  ,CusNm 		= #CusNm#
				]]></isNotEmpty><isNotEmpty property="CusType"><![CDATA[
				  ,CusType 		= #CusType#
				]]></isNotEmpty><isNotEmpty property="CusEtc"><![CDATA[
				  ,CusEtc 		= #CusEtc#
				]]></isNotEmpty><isEqual property="CusStatus" compareValue="4"><![CDATA[
				  ,DelFlag 		= 'Y'
			    ]]></isEqual><isNotEqual property="CusStatus" compareValue="4"><![CDATA[
				  ,DelFlag 		= 'N'
			    ]]></isNotEqual><![CDATA[
			WHERE S_Nb 			= #S_Nb#
		]]>
	</update>

	<insert id="workDAO.insertCusTrade">
		<![CDATA[
			INSERT INTO CS_Trade(CusCd, TradeCd, TradeType, TradeQuarter, RegDate, RegPerSabun, DelFlag)
								SELECT (SELECT CusCd FROM CS_Cus_Info WHERE S_Nb = #S_Nb#), IFNULL(LPAD(MAX(TradeCd) + 1, 12, 0), '000000000001') TradeCd, '1', #TradeQuarter#, NOW(), #RegPerSabun#, 'N'
			  					  FROM CS_Trade
		]]>
	</insert>

	<update id="workDAO.updateCusTrade">
		<![CDATA[
			UPDATE CS_Trade
			SET
				  TradeQuarter 	= #TradeQuarter#
			WHERE CusCd 		= (SELECT CusCd FROM CS_Cus_Info WHERE S_Nb = #S_Nb#)
		]]>
	</update>
	<insert id="workDAO.insertCusWorkPer">
		<![CDATA[
			INSERT INTO CS_Cus_Worker(CusCd, CusPerCd, CusPerNm, CusPerPhone, CusPerTel, CusPerEmail, CusMailingFlag, CusPerEtc, RegDate, RegPerSabun, DelFlag)
							SELECT (SELECT CusCd FROM CS_Cus_Info WHERE S_Nb = #S_Nb#), IFNULL(LPAD(MAX(CusPerCd) + 1, 12, 0), '000000000001') CusPerCd, #CusPerNm#, #CusPhone#, #CusPerTel#, #CusEmail#, '1', #CusEtc#, NOW(), #RegPerSabun#, 'N'
  							  FROM CS_Cus_Worker
		]]>
	</insert>


	<select id="workDAO.selectTotalOfferPrice" parameterClass="cusVO" resultClass="cusVO">
		<![CDATA[
			SELECT SUM(A.PRICE) as TradeQuerter
			  FROM IB_OFFER A
			 WHERE A.MIDDLE_OFFER_CD = '00011'
			   AND A.CST_ID = #S_Nb#
		]]>
	</select>

	<update id="workDAO.updateOfferInfoLv">
		<![CDATA[
			UPDATE IB_OFFER_INFO
			SET
				   LV_CD 		= #lvCd#
				  ,UP_DT 		= NOW()
				  ,UP_ID 		= #rgId#
			WHERE S_NB 			= #sNb#
		]]>
	</update>

	<update id="workDAO.updateNetPointImportance">
		UPDATE 						  <isEqual property="tmpNum2" compareValue="1">
			IB_NET_POINT	</isEqual><isEqual property="tmpNum2" compareValue="2">
			IB_INTRODUCER	</isEqual>
		SET 										  <isEqual property="tmpNum1" compareValue="1">
			   IMPORTANCE 	= #importance#	</isEqual><isEqual property="tmpNum1" compareValue="2">
			   LV_CD		= #importance#	</isEqual>
			  ,UP_DT 		= NOW()
			  ,UP_ID 		= #rgId#
		WHERE S_NB 			= #sNb#
	</update>


	<select id="workDAO.selectComment" parameterClass="workVO" resultClass="egovMap">
			SELECT
				  A.S_NB                as  sNb
				, A.MAIN_SNB 			as  mainSnb
				, A.STTS_CD 			as  sttsCd
				, case when date(c1.up_dt) &gt;= DATE(A.TM_DT) then date(c1.up_dt) else a.tm_dt end         as  tmDt
				<isNotEqual property="selectInfo" compareValue="main">
				,(case when a.private='Y' then aes_decrypt(unhex(a.comment), md5(a.rg_id)) else IFNULL(A.comment,"-") end)	as comment				
				</isNotEqual>
				<isEqual property="selectInfo" compareValue="main">
				,substring((case when a.private='Y' then aes_decrypt(unhex(a.comment), md5(a.rg_id)) else IFNULL(A.comment,"-") end), 1, 40)	as comment				
				</isEqual>
				, a.private				as  priv
				, A.IMPORTANCE          as  importance
				, A.RG_DT               as  rgDt
				, case when date(c1.rg_dt) &gt;= DATE(A.TM_DT) then c1.nm else B.USR_NM end				as  cstNm
				, A.NAME				as name
				, A.MEMO_TYPE			AS MEMO_TYPE
				, (SELECT CD_NM
					 FROM IB_COMMON_CODE
					WHERE MENU_CD = '00026'
					  AND DTAIL_CD = A.MEMO_TYPE)	AS MEMO_TYPE_NM
				
				,(SELECT DATE(MAX(RG_DT)) FROM IB_REPLY WHERE MAIN_SNB = IF(A.MAIN_SNB=0, A.S_NB, A.MAIN_SNB)) AS lastReplyDt
				
			 FROM IB_COMMENT A
		LEFT JOIN IB_STAFF B ON A.RG_ID = B.USR_ID
		LEFT JOIN (SELECT MAIN_SNB,  STTS_CD, up_dt, rg_dt, name as nm FROM IB_REPLY WHERE STTS_CD = '00001' AND RG_ID != #rgId# GROUP BY MAIN_SNB) C1 ON A.S_NB = C1.MAIN_SNB
		LEFT JOIN (SELECT A.MAIN_SNB, A.STTS_CD, a.rg_dt FROM IB_REPLY A INNER JOIN IB_COMMENT B ON B.MAIN_SNB = A.MAIN_SNB WHERE A.STTS_CD = '00001' AND A.RG_ID = B.RG_ID AND A.RG_ID != #rgId# GROUP BY A.MAIN_SNB) C2 ON A.MAIN_SNB = C2.MAIN_SNB
		<isEqual property="selectInfo" compareValue="main">
				LEFT JOIN (SELECT OFFER_SNB FROM IB_MAINTABLE_CHECK WHERE CATEGORY = '00005' AND RG_ID = #rgId#) MTC ON MTC.OFFER_SNB = A.S_NB
		</isEqual>
			WHERE A.NAME = #name#
		
			<isEqual prepend="AND" property="selectInfo" compareValue="main">
				( MTC.OFFER_SNB = '' OR MTC.OFFER_SNB IS NULL	)
			</isEqual>
			
			AND (A.STTS_CD = '00001' OR C1.STTS_CD = '00001')
			
			<isEqual prepend="AND" property="pastYn" compareValue="Y">
				(A.TM_DT &lt; LEFT(NOW(),10)
					AND A.TM_DT &gt; DATE_ADD(NOW(), INTERVAL -90 DAY))
			</isEqual>
			
			ORDER BY IF(cstNm = #name#, 1, 0), case when cstNm = #name# then A.IMPORTANCE end DESC, IF(date(c1.up_dt) &gt;= DATE(A.TM_DT), date(c1.up_dt), a.tm_dt) DESC
			
		/* workDAO.selectComment */
	</select>

	<select id="workDAO.selectOpinion" parameterClass="workVO" resultClass="egovMap">
		<![CDATA[
			SELECT
				  A.S_NB                as  sNb
				, A.OFFER_SNB            as  offerSnb
				, DATE(A.RG_DT)         as  rgDt
				]]><isNotEqual property="selectInfo" compareValue="main"><![CDATA[
				, IFNULL(A.COMMENT,"-") as  comment
				]]></isNotEqual><isEqual property="selectInfo" compareValue="main"><![CDATA[
				, substring(IFNULL(A.COMMENT,"-"),1,40) as  comment
				]]></isEqual><![CDATA[
				, C.CPN_NM 					as  cpnNm
				
				, CASE WHEN OF.CPN_ID = '951769' THEN 'Q' WHEN SUBSTRING(C.A_CPN_ID,1,1) = 'A' THEN 'Q' ELSE SUBSTRING(C.CPN_ID,1,1) END	as  cpnStts
				, OF.progress_cd			as progressCd
				, OF.rg_id				as offerRgId
				, OF.middle_offer_cd	as middleOfferCd
				
				, cmm.cd_nm				as categoryNm
				, A.RG_ID				as rgId
				, B.division			as division
				, OF.CATEGORY_CD		as categoryCd
				, B.USR_NM              as rgNm
				, A.UP_ID               as upId
			FROM ib_recommend_opinion A
			LEFT JOIN IB_STAFF B ON A.RG_ID = B.USR_ID
			LEFT JOIN IB_OFFER OF ON OF.S_NB = A.OFFER_SNB
			LEFT JOIN IB_COMMON_CODE cmm ON (cmm.MENU_CD = '00005' AND cmm.DTAIL_CD = of.category_cd)
			LEFT JOIN IB_COMPANY C ON C.CPN_ID = of.CPN_ID
			LEFT JOIN (SELECT OFFER_SNB FROM IB_MAINTABLE_CHECK WHERE CATEGORY = '00005' AND RG_ID = #rgId#) MTC ON MTC.OFFER_SNB = A.S_NB
			LEFT JOIN ib_staff_allow_code_v alw ON (alw.USR_ID = #rgId# and alw.MENU_CD = '00005' AND alw.DTAIL_CD = OF.CATEGORY_CD)
			WHERE
				alw.cd_nm is not null
				and (MTC.OFFER_SNB = '' OR MTC.OFFER_SNB IS NULL) AND A.RG_DT between CONCAT (case when #choice_yearS# is null or #choice_yearS# = '' then #choice_year# else #choice_yearS# end, case when #choice_monthS# is null or #choice_monthS# = '' then #choice_month# else #choice_monthS# end, #choice_dayS# ) and CONCAT (#choice_year#, #choice_month#, #choice_day#, '235959')
			ORDER BY A.RG_DT DESC
			LIMIT 30
		]]>
		
		/* workDAO.selectOpinion */
	</select>


	<select id="workDAO.selectCstDealInfo" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
			SELECT
					 DATE(CS.RG_DT) as tmDt
					,J01.CPN_NM  as cpnNm
					,J02.CST_NM  as cstNm
					,J03.CPN_NM  as cpnNm1st
					,CS.NOTE

			  FROM  IB_CST_DEAL_INFO CS
		 LEFT JOIN  IB_COMPANY  J01 ON J01.S_NB = CS.S_NB_2ND
		 LEFT JOIN  IB_CUSTOMER J02 ON J02.S_NB = CS.S_NB_1ST
		 LEFT JOIN  IB_COMPANY  J03 ON J03.CPN_ID = J02.CPN_ID
			 WHERE  CS.RG_ID = #tmpId#
		]]><isNotEmpty prepend="AND" property="choice_month">
				<![CDATA[	CS.RG_DT between CONCAT (#choice_year#, #choice_month#, '01') and CONCAT (#choice_year#, #choice_month#, '31235959') 		]]>
			</isNotEmpty><![CDATA[

		 UNION

			SELECT
				  DATE(A.RG_DT)           as  tmDt
				, ''                      as  cpnNm
				, J01.CST_NM              as  cstNm
				, J02.CPN_NM              as  cpnNm1st
				, CONCAT(A.TITLE,' - ',A.NOTE)      as  note

			FROM  IB_NOTE A
	   LEFT JOIN  IB_CUSTOMER J01 ON J01.S_NB = A.CST_S_NB
	   LEFT JOIN  IB_COMPANY J02 ON J02.CPN_ID = J01.CPN_ID
			 WHERE  A.RG_ID = #tmpId#
		]]><isNotEmpty prepend="AND" property="choice_month">
				<![CDATA[	A.RG_DT between CONCAT (#choice_year#, #choice_month#, '01') and CONCAT (#choice_year#, #choice_month#, '31235959') 		]]>
			</isNotEmpty>

	</select>

	<select id="workDAO.selectNetPoint" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
			SELECT
					 DATE(CS.RG_DT) as tmDt
					,J01.CST_NM  as cstNm1st
					,J03.CPN_NM  as cpnNm1st
					,J02.CST_NM  as cstNm2nd
					,J04.CPN_NM  as cpnNm2nd
					,CS.NOTE

			  FROM  IB_NET_POINT CS
		 LEFT JOIN  IB_CUSTOMER J01 ON J01.S_NB = CS.S_NB_1ST
		 LEFT JOIN  IB_COMPANY  J03 ON J03.CPN_ID = J01.CPN_ID
		 LEFT JOIN  IB_CUSTOMER J02 ON J02.S_NB = CS.S_NB_2ND
		 LEFT JOIN  IB_COMPANY  J04 ON J04.CPN_ID = J02.CPN_ID
			 WHERE  CS.RG_ID = #tmpId#
		]]>
			<isNotEmpty prepend="AND" property="choice_month">
				<![CDATA[	CS.RG_DT between CONCAT (#choice_year#, #choice_month#, '01') and CONCAT (#choice_year#, #choice_month#, '31235959') 		]]>
			</isNotEmpty>

	</select>

	<select id="workDAO.selectHumanNet" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
			SELECT
					A.S_NB						as sNb
					,  DATE(A.RG_DT) 			as tmDt
					,  B.USR_NM				as rgNm
					,  A.S_NB_1st				as snb1st
					,  C1.CST_NM			as cstNm1st
					,  D1.CPN_NM			as cpnNm1st
					,  C1.POSITION			as position1st
					,  A.S_NB_2nd				as snb2nd
					,  C2.CST_NM			as cstNm2nd
					,  D2.CPN_NM            as cpnNm2nd
					,  C2.POSITION          as position2nd
					,  A.NOTE				as note
					,  A.IMPORTANCE			as importance
					,  A.LV_CD				as lvCd
					,  '1'					as tmpNum1
			  FROM IB_NET_POINT A
		 LEFT JOIN IB_STAFF B ON B.USR_ID = A.RG_ID
		 LEFT JOIN IB_CUSTOMER C1 ON C1.S_NB = A.S_NB_1st
		 LEFT JOIN IB_COMPANY D1 ON D1.CPN_ID = C1.CPN_ID
		 LEFT JOIN IB_CUSTOMER C2 ON C2.S_NB = A.S_NB_2nd
		 LEFT JOIN IB_COMPANY D2 ON D2.CPN_ID = C2.CPN_ID
			WHERE 1=1
			]]><isNotEqual property="tmpNum2" compareValue="excel">
				<![CDATA[ and A.RG_DT between CONCAT (#choice_year#, '0101') and CONCAT (#choice_year#, '1231235959') ]]>
			</isNotEqual>
			<isEqual prepend="and" property="tmpNum2" compareValue="statsPrivateList">
				<isNotEmpty property="tmpNum1">
				<![CDATA[ b.usr_nm = #tmpNum1# ]]>
				</isNotEmpty>
			</isEqual><![CDATA[

	UNION

			SELECT
				   A.S_NB			as sNb
				,  DATE(A.RG_DT)			as tmDt
				,  C.USR_NM			as rgNm
				,  A.RG_SNB				as snb1st
				,  B.CST_NM			as cstNm1st
				,  B1.CPN_NM        as cpnNm1st
				,  B.POSITION       as position1st
				,  A.CST_ID				as snb2nd
				,  D.CST_NM         as cstNm2nd
				,  D1.CPN_NM        as cpnNm2nd
				,  D.POSITION       as position2nd
				,  A.COMMENT		as note
				,  A.IMPORTANCE		as importance
				,  A.LV_CD			as lvCd
				,  '2'				as tmpNum1
			 FROM  IB_INTRODUCER A
		LEFT JOIN  IB_CUSTOMER B ON B.S_NB = A.RG_SNB
		LEFT JOIN  IB_COMPANY B1 ON B1.CPN_ID = B.CPN_ID
		LEFT JOIN  IB_STAFF C ON C.CUS_ID = A.STAFF_SNB
		LEFT JOIN  IB_CUSTOMER D ON D.S_NB = A.CST_ID
		LEFT JOIN  IB_COMPANY D1 ON D1.CPN_ID = D.CPN_ID
			WHERE 1=1
			]]><isNotEqual property="tmpNum2" compareValue="excel">
				<![CDATA[ and A.RG_DT between CONCAT (#choice_year#, '0101') and CONCAT (#choice_year#, '1231235959') ]]>
			</isNotEqual>
			<isEqual prepend="and" property="tmpNum2" compareValue="statsPrivateList">
			<![CDATA[ c.usr_nm = #tmpNum1# ]]></isEqual>
		  ORDER BY
			<isEqual property="sorting" compareValue="">
				<![CDATA[	tmDt DESC		]]>
			</isEqual>
			<isEqual property="sorting" compareValue="1">
				<![CDATA[	rgNm ASC		]]>
			</isEqual>
			<isEqual property="sorting" compareValue="2">
				<![CDATA[	cstNm1st ASC 		]]>
			</isEqual>
			<isEqual property="sorting" compareValue="3">
				<![CDATA[	cpnNm1st ASC 		]]>
			</isEqual>
			<isEqual property="sorting" compareValue="4">
				<![CDATA[	cstNm2nd ASC 		]]>
			</isEqual>
			<isEqual property="sorting" compareValue="5">
				<![CDATA[	cpnNm2nd ASC 		]]>
			</isEqual>
			<isEqual property="sorting" compareValue="6">
				<![CDATA[	IMPORTANCE +0 DESC 		]]>
			</isEqual>
			<isEqual property="sorting" compareValue="7">
				<![CDATA[	lvCd +0 DESC 		]]>
			</isEqual>
			,tmDt DESC
	</select>

	<select id="workDAO.selectRecommendOne" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
			SELECT
					DATE(A.TM_DT)		as  tmDt
				 ,  A.RG_NM				as  rgNm
				 ,  B.CPN_NM			as  cpnNm
				 ,  A.MEMO				as  memo
				 ,  A.S_NB				as  sNb
			  FROM  IB_OFFER A
		 LEFT JOIN  IB_COMPANY B ON A.CPN_ID = B.CPN_ID
			 WHERE  OFFER_CD = '00013'
			   AND  PROGRESS_CD != '10000'
			   AND  A.CPN_ID = #cpnId#
		  ORDER BY  TM_DT DESC
		  	 LIMIT  1
		]]>
	</select>


	<select id="workDAO.selectBusinessTmdt" parameterClass="workVO" resultClass="workVO">		
		SELECT S_NB  as sNb
		<isEqual property="tmpId" compareValue="title">
		  FROM IB_BUSINESS_RECORD
		 WHERE NAME = #name#
		</isEqual>
		<isEqual property="tmpId" compareValue="cpnNm">
		  FROM IB_OFFER
		 WHERE RG_NM = #name#
		</isEqual>
		   AND TM_DT BETWEEN #tmDt# AND CONCAT( #tmDt#,'235959')
			   
		/* workDAO.selectBusinessTmdt */
	</select>

	<update id="workDAO.updateBusinessTmdt">		
		UPDATE
		<isEqual property="tmpId" compareValue="title">
		  IB_BUSINESS_RECORD
		</isEqual>
		<isEqual property="tmpId" compareValue="cpnNm">
		  IB_OFFER
		</isEqual>
		
		SET	   TM_DT		= #tmDt#
			  ,UP_DT 		= NOW()
			  ,UP_ID 		= #rgId#
			  
		WHERE S_NB 			= #sNb#
		
		/* workDAO.updateBusinessTmdt */
	</update>

	
	<!-- 업무보고(메모) 참조인명 문자열 -->
	<select id="workDAO.selectSameCommentStaffName" parameterClass="workVO" resultClass="workVO">
		SELECT S_NB								as sNb
			  ,MAIN_SNB							as mainSnb
		      ,GROUP_CONCAT(NAME SEPARATOR ',')	as cmntStaffs
		      
		  FROM IB_COMMENT
		 WHERE MAIN_SNB != 0
		
		<isNotEmpty prepend="AND" property="choice_month">
			TM_DT between CONCAT (#choice_year#, #choice_monthS#, '01') and CONCAT (#choice_year#, #choice_month#, '31235959')
		</isNotEmpty>
		
		<!-- <isEmpty prepend="AND" property="mainSnb"> -->
		<isEqual prepend="AND" property="mainSnb" compareValue="0">
			MAIN_SNB = #sNb#
		</isEqual>
		
		<!-- <isNotEmpty prepend="AND" property="mainSnb"> -->
		<isGreaterThan prepend="AND" property="mainSnb" compareValue="0">
			MAIN_SNB = #mainSnb#		<!-- (select main_snb from ib_comment where s_nb = #sNb#) -->
		</isGreaterThan>
		<!-- </isNotEmpty> -->
		GROUP BY  MAIN_SNB
 		HAVING  COUNT(1)>0
 			   
 		/* workDAO.selectSameCommentStaffName */
	</select>
	
	
	<!-- 업무보고(메모) 참조인명 문자열 -->
	<select id="workDAO.selectSameCommentStaffNameEach" parameterClass="workVO" resultClass="workVO">
		SELECT S_NB					as sNb
			  ,MAIN_SNB				as mainSnb
		      ,NAME					as name
		      
		  FROM IB_COMMENT
		 WHERE MAIN_SNB != 0
		
		<isEqual prepend="AND" property="mainSnb" compareValue="0">
			MAIN_SNB = #sNb#
		</isEqual>
		
		<isGreaterThan prepend="AND" property="mainSnb" compareValue="0">
			MAIN_SNB = #mainSnb#
		</isGreaterThan>
		
 		/* workDAO.selectSameCommentStaffNameEach */
	</select>
	
	
	<select id="workDAO.selectSameCommentStaffNameForSms" parameterClass="workVO" resultClass="String">		
			   SELECT
			          GROUP_CONCAT(NAME SEPARATOR ',')		as staffNmForSms
			     FROM IB_COMMENT
			     
			    WHERE (MAIN_SNB = #mainSnb# OR S_NB = #mainSnb#)
				  AND NAME != #rgNm#
				  AND MAIN_SNB != 0
 		/* workDAO.selectSameCommentStaffNameForSms */
	</select>
	

	<select id="workDAO.selectInsideSystemInfo" parameterClass="staffVO" resultClass="staffVO">
		
		SELECT PerPW	as usrPw
		  FROM ERP.ERP_PER
		 WHERE PerSabun = #sabun#
		
		<!-- SELECT B.PerPW			as usrPw
		  FROM IB_STAFF A
	 	  LEFT JOIN	erp.ERP_Per B ON A.SABUN = B.PerSabun
		 WHERE USR_ID = #usrId#
 		-->
 		/* work.xml id="workDAO.selectInsideSystemInfo" */
	</select>

	<select id="workDAO.selectOfferJointProgress" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
				SELECT
						A.S_NB			sNb
					 ,  A.OFFER_SNB		offerSnb
					 ,  A.STAFF_SNB		staffSnb
					 ,  A.RATIO			ratio
					 ,  A.COMMENT		comment
					 ,  STF.USR_NM		staffNm
				  FROM	IB_JOINT_PROGRESS A
				LEFT JOIN IB_STAFF STF ON STF.S_NB = A.STAFF_SNB
		]]><dynamic prepend="WHERE">
            <isNotEmpty prepend="AND" property="offerSnb">
				<![CDATA[	A.OFFER_SNB = #offerSnb#		]]>
			</isNotEmpty>
		</dynamic>
	</select>


	<update id="workDAO.updateOfferJointProgress">
		<![CDATA[
			UPDATE
			  IB_JOINT_PROGRESS
			SET
				   STAFF_SNB	= #staffSnb#
				  ,RATIO 		= #ratio#
				  ,COMMENT 		= #comment#
				  ,UP_DT 		= NOW()
				  ,UP_ID 		= #rgId#
			WHERE S_NB 			= #sNb#
		]]>
	</update>

	<insert id="workDAO.insertOfferJointProgress">
		<![CDATA[
			INSERT INTO IB_JOINT_PROGRESS
				  (
				 	OFFER_SNB
				  , STAFF_SNB
				  , RATIO
				  , COMMENT
				  , RG_DT
				  , UP_DT
				  , RG_ID
				  , UP_ID
		 ) VALUES (
		 			#offerSnb#
				  , #staffSnb#
				  , #ratio#
				  , #comment#
				  , now()
				  , now()
				  , #rgId#
				  , #rgId#
				  )
		]]>
	</insert>

	<delete id="workDAO.deleteOfferJointProgress">
		<![CDATA[
			DELETE FROM IB_JOINT_PROGRESS
			 WHERE S_NB      =  #sNb#
		]]>
	</delete>

	<insert id="workDAO.insertIntroducer">
		<![CDATA[
			INSERT INTO IB_INTRODUCER
				  (
				 	TM_DT
				  , RG_NM
				  , RG_SNB
				  , STAFF_SNB
				  , CST_ID
				  , COMMENT
				  , RG_DT
				  , UP_DT
				  , RG_ID
				  , UP_ID
		 ) VALUES (
		 			#tmDt#
				  , #rgNm#
				  , #rgSnb#
				  , #staffSnb#
				  , #cstId#
				  , #comment#
				  , now()
				  , now()
				  , #rgId#
				  , #rgId#
				  )
		]]>
	</insert>

	<update id="workDAO.updateIntroducer">
		<![CDATA[
			UPDATE
			  IB_INTRODUCER
			SET
				   RG_SNB 		= #rgSnb#
				  ,STAFF_SNB 	= #staffSnb#
				  ,CST_ID 		= #cstId#
				  ,COMMENT 		= #comment#
				  ,UP_DT 		= NOW()
				  ,UP_ID 		= #rgId#
			WHERE S_NB 			= #sNb#
		]]>
	</update>

	<select id="workDAO.selectIntroducerOne" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
				SELECT
						A.S_NB			as sNb
					 ,  A.TM_DT			as tmDt
					 ,  A.RG_SNB		as rgSnb
					 ,  A.STAFF_SNB		as staffSnb
					 ,  A.CST_ID		as cstId
					 ,	A.COMMENT		as comment
					 ,  CONCAT(C.CST_NM, ' : ', D.CPN_NM) as text
					 ,  CONCAT(F.CST_NM, ' : ', G.CPN_NM) as text0
					 ,  CASE WHEN E.USR_NM is not null THEN '1' WHEN E.USR_NM is NULL THEN '0' END as tmpNum1
					 ,  A.RG_ID			as rgId
				  FROM  IB_INTRODUCER A
			 LEFT JOIN  IB_CUSTOMER C ON C.S_NB = A.CST_ID
			 LEFT JOIN  IB_COMPANY D ON D.CPN_ID = C.CPN_ID
			 LEFT JOIN  IB_STAFF E ON E.CUS_ID = A.RG_SNB
			 LEFT JOIN  IB_CUSTOMER F ON F.S_NB = A.RG_SNB
			 LEFT JOIN  IB_COMPANY G ON G.CPN_ID = F.CPN_ID
				 WHERE  A.S_NB  =  #sNb#
		]]>
	</select>

	<select id="workDAO.selectIntroducer" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
				SELECT
						A.S_NB			as sNb
					 ,  A.TM_DT			as tmDt
					 ,  CONCAT(F.CST_NM, ' : ', B.USR_NM,' ↔ ', C.CST_NM, ' (', D.CPN_NM,') ', ' <font color="green">소개</font>') as text
				  FROM	IB_INTRODUCER A
			 LEFT JOIN  IB_STAFF B ON B.CUS_ID = A.STAFF_SNB
			 LEFT JOIN  IB_CUSTOMER C ON C.S_NB = A.CST_ID
			 LEFT JOIN  IB_COMPANY D ON D.CPN_ID = C.CPN_ID
			 LEFT JOIN  IB_STAFF E ON E.USR_ID = A.RG_ID
			 LEFT JOIN  IB_CUSTOMER F ON F.S_NB = A.RG_SNB
			 LEFT JOIN  IB_COMPANY G ON G.CPN_ID = F.CPN_ID
		]]><dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="choice_month">
				<![CDATA[	A.TM_DT between CONCAT (#choice_year#, #choice_month#, '01') and CONCAT (#choice_year#, #choice_month#, '31235959') 		]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="name">
				<![CDATA[	E.USR_NM = #name# 		]]>
			</isNotEmpty>
		</dynamic>
	</select>

	<delete id="workDAO.deleteIntroducer">
		<![CDATA[
			DELETE FROM IB_INTRODUCER
			 WHERE S_NB      =  #sNb#
		]]>
	</delete>


	<select id="workDAO.selectInsideList" parameterClass="workVO" resultClass="workVO">
		
		SELECT * 
		  FROM(
		
				SELECT
					  A.SCHESEQ			as sNb
					  
					<!-- , CONCAT(SUBSTRING(A.SCHESDATE,1,8),(case when A.SCHESDAY<10 then concat('0',A.SCHESDAY) else A.SCHESDAY end))			as tmDt -->
					, concat(a.ScheSYear, '-', LPAD(a.ScheSMonth, 2, '0'), '-', LPAD(a.ScheSDay, 2, '0')) as tmDt
					
					, B.USR_NM              as  name
					<!-- , CASE WHEN A.ScheGubun = 'All' THEN 2 ELSE 1 END             as  bsnsRecPrivate -->
					, CASE WHEN TRUE THEN 2 ELSE 1 END             as  bsnsRecPrivate
					, A.SchePublicFlag 		as schePublicFlag
					, IFNULL(A.SCHECON,"-")    as  note
					, A.schetype AS type
					, A.SCHESTIME  as tt
					, A.SCHESTIMEAMPM  as ap
					, (CASE WHEN ScheSTimeAMPM = 'PM' AND SUBSTRING(A.ScheSTime, 1, 2) != '12'
							THEN CONCAT(REPLACE(SUBSTRING(A.ScheSTime, 1, 2), ':', '') + 12, ':', REPLACE(SUBSTRING(A.ScheSTime, 3), ':', '')) ELSE A.ScheSTime END) as viewTime
					, CONCAT('[InS] ',
						(CASE WHEN ScheSTimeAMPM = 'PM' AND SUBSTRING(A.ScheSTime, 1, 2) != '12'
							THEN CONCAT(REPLACE(SUBSTRING(A.ScheSTime, 1, 2), ':', '') + 12, ':', REPLACE(SUBSTRING(A.ScheSTime, 3), ':', '')) ELSE A.ScheSTime END)
						, ' ', IFNULL(A.SCHETITLE,"-"))   as  title
			FROM erp.ERP_SCHEDULE A
			JOIN IB_STAFF B ON B.SABUN = A.PERSABUN
			where a.delflag = 'N'
			<isNotEmpty prepend="AND" property="name">
				B.USR_NM = #name#
			</isNotEmpty>
			  <!-- and A.SchePublicFlag = 'Y' -->


			UNION

				SELECT
					  C.SCHESEQ			as sNb
					  
					<!-- , CONCAT(SUBSTRING(C.SCHESDATE,1,8),(case when C.SCHESDAY<10 then concat('0',C.SCHESDAY) else C.SCHESDAY end))			as tmDt -->
					, concat(c.ScheSYear, '-', LPAD(c.ScheSMonth, 2, '0'), '-', LPAD(c.ScheSDay, 2, '0')) as tmDt
					
					, B.USR_NM              as  name
					<!-- , CASE WHEN C.ScheGubun = 'All' THEN 2 ELSE 1 END             as  bsnsRecPrivate -->
					, CASE WHEN TRUE THEN 2 ELSE 1 END             as  bsnsRecPrivate
					, (SELECT SchePublicFlag FROM ERP.ERP_SCHEDULE WHERE ScheSeq = A.ScheSeq)	as schePublicFlag
					, IFNULL(C.SCHECON,"-")    as  note
					, C.schetype AS type
					, C.SCHESTIME  as tt
					, C.SCHESTIMEAMPM  as ap
					, (CASE WHEN ScheSTimeAMPM = 'PM' AND SUBSTRING(C.ScheSTime, 1, 2) != '12'
						THEN CONCAT(REPLACE(SUBSTRING(C.ScheSTime, 1, 2), ':', '') + 12, ':', REPLACE(SUBSTRING(C.ScheSTime, 3), ':', '')) ELSE C.ScheSTime END) as viewTime
					, CONCAT('[InS] ',
						 (CASE WHEN ScheSTimeAMPM = 'PM' AND SUBSTRING(C.ScheSTime, 1, 2) != '12'
						THEN CONCAT(REPLACE(SUBSTRING(C.ScheSTime, 1, 2), ':', '') + 12, ':', REPLACE(SUBSTRING(C.ScheSTime, 3), ':', '')) ELSE C.ScheSTime END)
						, ' ', IFNULL(C.SCHETITLE,"-"))   as  title
			FROM erp.ERP_SCHEDULEENTRY A
			JOIN IB_STAFF B ON B.SABUN = A.PERSABUN
			LEFT JOIN erp.ERP_SCHEDULE C ON C.SCHESEQ = A.SCHESEQ
			where a.delflag = 'N'
			  and c.delflag = 'N'
			<isNotEmpty prepend="AND" property="name">
				B.USR_NM = #name#
			</isNotEmpty>
			  
			  <!-- and SchePublicFlag = 'Y' -->

			) uo
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="choice_month">
				<![CDATA[	uo.tmDt between CONCAT (#choice_year#,'-', #choice_month#,'-', '01') and CONCAT (#choice_year#,'-', #choice_month#,'-', '31') 		]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="name">
				<![CDATA[	uo.name= #name# 		]]>
			</isNotEmpty>
			<isEqual prepend="AND" property="tmpNum2" compareValue="2">
				<![CDATA[	uo.bsnsRecPrivate= #tmpNum2# 		]]>
			</isEqual>
		</dynamic>
		
			ORDER BY uo.name ASC, uo.tmDt ASC, STR_TO_DATE(uo.viewTime,'%T') ASC
			
		/* workDAO.selectInsideList */
	</select>
	
	
	<select id="workDAO.selectInsideOne" parameterClass="workVO" resultClass="workVO">
			SELECT * FROM(
				SELECT
					  A.SCHESEQ			as sNb
					, A.SCHESDATE			as tmDt
					, B.USR_NM              as  name
					, CASE WHEN A.ScheGubun = 'All' THEN 2 ELSE 1 END             as  bsnsRecPrivate
					, IFNULL(A.SCHECON,"-")    as  note
					, A.SCHESTIME  as tt
					, A.SCHESTIMEAMPM  as ap
					, (CASE WHEN ScheSTimeAMPM = 'PM' AND SUBSTRING(A.ScheSTime, 1, 2) != '12'
							THEN CONCAT(REPLACE(SUBSTRING(A.ScheSTime, 1, 2), ':', '') + 12, ':', REPLACE(SUBSTRING(A.ScheSTime, 3), ':', '')) ELSE A.ScheSTime END) as viewTime
					, CONCAT('[InS] ',
						(CASE WHEN ScheSTimeAMPM = 'PM' AND SUBSTRING(A.ScheSTime, 1, 2) != '12'
							THEN CONCAT(REPLACE(SUBSTRING(A.ScheSTime, 1, 2), ':', '') + 12, ':', REPLACE(SUBSTRING(A.ScheSTime, 3), ':', '')) ELSE A.ScheSTime END)
						, ' ', IFNULL(A.SCHETITLE,"-"))   as  title
			FROM erp.ERP_SCHEDULE A
			LEFT JOIN IB_STAFF B ON B.SABUN = A.PERSABUN
			where a.delflag = 'n'
			and A.SchePublicFlag = 'Y'

			UNION

				SELECT
					  C.SCHESEQ			as sNb
					, C.SCHESDATE			as tmDt
					, B.USR_NM              as  name
					, CASE WHEN C.ScheGubun = 'All' THEN 2 ELSE 1 END             as  bsnsRecPrivate
					, IFNULL(C.SCHECON,"-")    as  note
					, C.SCHESTIME  as tt
					, C.SCHESTIMEAMPM  as ap
					, (CASE WHEN ScheSTimeAMPM = 'PM' AND SUBSTRING(C.ScheSTime, 1, 2) != '12'
						THEN CONCAT(REPLACE(SUBSTRING(C.ScheSTime, 1, 2), ':', '') + 12, ':', REPLACE(SUBSTRING(C.ScheSTime, 3), ':', '')) ELSE C.ScheSTime END) as viewTime
					, CONCAT('[InS] ',
						 (CASE WHEN ScheSTimeAMPM = 'PM' AND SUBSTRING(C.ScheSTime, 1, 2) != '12'
						THEN CONCAT(REPLACE(SUBSTRING(C.ScheSTime, 1, 2), ':', '') + 12, ':', REPLACE(SUBSTRING(C.ScheSTime, 3), ':', '')) ELSE C.ScheSTime END)
						, ' ', IFNULL(C.SCHETITLE,"-"))   as  title
			FROM erp.ERP_SCHEDULEENTRY A
			LEFT JOIN IB_STAFF B ON B.SABUN = A.PERSABUN
			LEFT JOIN erp.ERP_SCHEDULE C ON C.SCHESEQ = A.SCHESEQ
			where a.delflag = 'n'
			  and c.delflag = 'n'
			) uo
			<dynamic prepend="WHERE">
				<isNotEmpty prepend="AND" property="sNb">
					uo.sNb = #sNb#
				</isNotEmpty>
			</dynamic>
			limit 1
	</select>

	<select id="workDAO.selectCompanyExploring" parameterClass="cpnVO" resultClass="cpnVO">
		<![CDATA[
				SELECT
					A.S_NB									as sNb
					,  B.S_NB								as cpnSnb
					,  B.PER								as per
					,  B.CPN_ID								as cpnId
					,  B.CPN_NM								as cpnNm
					,  CONCAT(FLOOR(B.SHARE*100),'%')		as share
					,  CONCAT(FLOOR(B.FLUCTUATION),' 억')	as fluctuation
					,  B.CATEGORY_BUSINESS					as categoryBusiness
					,  B.PBR								as pbr
					,  B.EXPLORING							as exploring
					,  B.OPINION							as opinion
					,  A.RANK								as rank
					,  CONCAT(FLOOR(B.DEBT_RATIO*100),'%')		as debtRatio
					,  C.visit						as tmpNum1
					,  C.recommend					as tmpNum2
					,  ST.USR_NM							as rgNm
					,  date(B.UP_DT)						as upDt
				FROM IB_EXPLORING A
				LEFT JOIN IB_COMPANY B ON A.CPN_ID = B.CPN_ID
				LEFT JOIN IB_STAFF ST ON B.UP_ID = ST.USR_ID
				LEFT JOIN (SELECT
									CPN_ID as cpnId
				                  , max(case when offer_cd = '00003' then 'Y' end) as visit
				                  , max(case when offer_cd = '00013' then 'Y' end) as recommend
				             FROM IB_OFFER
				            WHERE OFFER_CD IN ('00003', '00013')
				              AND EXPLORING_CNT = #exploringCnt#
				            GROUP BY cpnId)  C on A.CPN_ID = C.cpnId
				WHERE A.COUNT = #exploringCnt#
		]]>
			<isEmpty property="tmpNum1">
				<![CDATA[	AND  B.PBR = 'A'		]]>
			</isEmpty>
			<isEqual property="tmpNum1" compareValue="0">
				<![CDATA[	AND  B.PBR IN ('A','B')		]]>
			</isEqual>
			<isNotEqual property="name" compareValue="0">
				<isNotEqual property="name" compareValue="">
				<![CDATA[	AND  B.PER = #name#		]]>
				</isNotEqual>
			</isNotEqual>

			  ORDER BY
			<isEqual prepend="" property="sorting" compareValue="">
				<![CDATA[	B.PBR ASC, B.EXPLORING ASC, A.RANK +0 ASC		]]>
			</isEqual>
			<isEqual prepend="" property="sorting" compareValue="1">
				<![CDATA[	B.PER ASC , B.CPN_NM ASC		]]>
			</isEqual>
			<isEqual prepend="" property="sorting" compareValue="2">
				<![CDATA[	B.CPN_NM ASC 		]]>
			</isEqual>
			<isEqual prepend="" property="sorting" compareValue="3">
				<![CDATA[	B.SHARE DESC 		]]>
			</isEqual>
			<isEqual prepend="" property="sorting" compareValue="4">
				<![CDATA[	B.CATEGORY_BUSINESS ASC 		]]>
			</isEqual>
			<isEqual prepend="" property="sorting" compareValue="5">
				<![CDATA[	B.FLUCTUATION +0 DESC 		]]>
			</isEqual>
			<isEqual prepend="" property="sorting" compareValue="6">
				<![CDATA[	B.DEBT_RATIO +0 ASC 		]]>
			</isEqual>
	</select>

	<select id="workDAO.selectExploringCount" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
				SELECT
						COUNT			as exploringCnt
				  FROM	IB_EXPLORING
			  GROUP BY  COUNT
			  ORDER BY  COUNT DESC
			     LIMIT  4
		]]>
	</select>

	<select id="workDAO.selectCompanyOpinion" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
				SELECT
						OPINION			as opinion
				  FROM	IB_COMPANY
				 WHERE  CPN_ID 			= #cpnId#
			     LIMIT  1
		]]>
	</select>

	<update id="workDAO.updateCompanyExloring">
		<![CDATA[
			UPDATE
			  IB_COMPANY
			SET
				   EXPLORING 	= #exploring#
				  ,UP_DT 		= NOW()
				  ,UP_ID 		= #rgId#
			WHERE S_NB 			= #sNb#
		]]>
	</update>

	<update id="workDAO.updateCompanyPbr">
		<![CDATA[
			UPDATE
			  IB_COMPANY
			SET
				   PBR 			= #pbr#
				  ,UP_DT 		= NOW()
				  ,UP_ID 		= #rgId#
			WHERE S_NB 			= #sNb#
		]]>
	</update>

	<update id="workDAO.updateCompanyOpinion">
		<![CDATA[
			UPDATE
			  IB_COMPANY
			SET
				   OPINION		= #opinion#		]]><isEqual property="tmpNum1" compareValue="exp"><![CDATA[
				  ,PBR			= #pbr#			]]></isEqual><![CDATA[
				  ,OPINION_REG 	= CONCAT(#rgId#,'^_^',NOW())
				  ,UP_DT 		= NOW()
				  ,UP_ID 		= #rgId#
			]]>
		<dynamic prepend="WHERE">
			<isNotEqual prepend="and" property="tmpNum1" compareValue="exp">
				<![CDATA[	S_NB 			= #sNb# 		]]>
			</isNotEqual><isEqual prepend="and" property="tmpNum1" compareValue="exp">
				<![CDATA[	CPN_ID 			= #cpnId# 		]]>
			</isEqual>
		</dynamic>
	</update>

	<update id="workDAO.updateCompanyRank">
		<![CDATA[
			UPDATE
			  IB_EXPLORING
			SET
				   RANK			= #rank#
				  ,UP_DT 		= NOW()
				  ,UP_ID 		= #rgId#
			WHERE S_NB 			= #sNb#
		]]>
	</update>

	<select id="workDAO.selectAuditList" parameterClass="workVO" resultClass="workVO">
				SELECT
						A.S_NB			as sNb
					 ,  A.CST_NM		as cstNm
					 ,  B.CPN_NM		as cpnNm
					 ,  C.USR_NM		as rgNm
					 ,  D.TITLE	    as title
					 ,  D.NOTE	    as note
					 ,  E.sum  	    as tmpNum1
				  FROM  IB_CUSTOMER A
		     LEFT JOIN  IB_COMPANY B ON B.CPN_ID = A.CPN_ID
		     LEFT JOIN  IB_STAFF C ON C.USR_ID = A.RG_ID
		     LEFT JOIN  (SELECT sub.CST_S_NB, sub.TITLE, sub.NOTE FROM (SELECT * FROM IB_NOTE ORDER BY RG_DT DESC) sub GROUP BY sub.CST_S_NB
		     ) D ON D.CST_S_NB = A.S_NB
		     LEFT JOIN  (SELECT SUM(1) as sum , S_NB_1st FROM IB_CST_DEAL_INFO GROUP BY S_NB_1st
		     ) E ON E.S_NB_1st = A.S_NB
		         WHERE  A.CATEGORY_PERSON_CD IN ('00001', '00003')
			  ORDER BY
			<isEqual prepend="" property="sorting" compareValue="">
				cstNm ASC
			</isEqual>
			<isEqual prepend="" property="sorting" compareValue="1">
				case when cpnNm is null then 1 else 0 end asc, cpnNm ASC
			</isEqual>
			<isEqual prepend="" property="sorting" compareValue="2">
				rgNm ASC
			</isEqual>
	</select>

	<select id="workDAO.selectResourceList" parameterClass="workVO" resultClass="workVO">
				SELECT
						A.S_NB			as sNb
					 ,  A.CST_NM		as cstNm
					 ,  B.CPN_NM		as cpnNm
					 ,  C.USR_NM		as rgNm
					 ,  D.TITLE	    as title
					 ,  D.NOTE	    as note
					 ,  F.sum  	    as tmpNum2
					 ,  F.ssum  	    as maxRatio
					 ,  F.sssum  	    as curRatio
				  FROM  IB_CUSTOMER A
		     LEFT JOIN  IB_COMPANY B ON B.CPN_ID = A.CPN_ID
		     LEFT JOIN  IB_STAFF C ON C.USR_ID = A.RG_ID
		     LEFT JOIN  (SELECT sub.CST_S_NB, sub.TITLE, sub.NOTE FROM (SELECT * FROM IB_NOTE ORDER BY RG_DT DESC) sub GROUP BY sub.CST_S_NB
		     ) D ON D.CST_S_NB = A.S_NB
		     LEFT JOIN  (SELECT
		     					SUM(CASE WHEN A.COMMENT != '' THEN 1 END) AS SUM
		     				  , AVG((((SELECT MAX(unitPrice) FROM CS_Cate_Price WHERE cateCd = J.CPN_ID AND STR_TO_DATE(priceDate,'%Y-%m-%d') >= CAST(DATE_FORMAT(J.TM_DT,'%Y-%m-%d') AS CHAR(10)))-M1.unitPrice)/M1.unitPrice)) as ssum
		     				  , AVG((((SELECT unitPrice FROM CS_Cate_Price WHERE cateCd = J.CPN_ID ORDER BY priceDate DESC LIMIT 1)-M1.unitPrice)/M1.unitPrice)) as sssum
		     				  , J.CST_ID
		     			   FROM IB_OFFER_INFO A
		     		  	   LEFT JOIN IB_OFFER J ON J.S_NB = OFFER_SNB
		     		 	   LEFT JOIN CS_Cate_Price M1 ON (M1.cateCd = J.CPN_ID AND STR_TO_DATE(M1.priceDate,'%Y-%m-%d') = CAST(DATE_FORMAT(J.TM_DT,'%Y-%m-%d') AS CHAR(10)))
		     		  	   WHERE J.CST_ID != 0 AND A.CATEGORY = '00006'
		     		   	GROUP BY J.CST_ID
			 		) F ON F.CST_ID = A.S_NB
		         WHERE  A.CATEGORY_PERSON_CD IN ('00002', '00003')
			  ORDER BY
			<isEqual prepend="" property="sorting" compareValue="">
				cstNm ASC
			</isEqual>
			<isEqual prepend="" property="sorting" compareValue="1">
				case when cpnNm is null then 1 else 0 end asc, cpnNm ASC
			</isEqual>
			<isEqual prepend="" property="sorting" compareValue="2">
				rgNm ASC
			</isEqual>
	</select>

	<select id="workDAO.selectResourceDetailList" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
				SELECT
						A.S_NB			as sNb
					 ,  A.CST_NM		as cstNm
					 ,  C.USR_NM		as rgNm
					 ,  F.CPN_NM	    as cpnNm
					 ,  E.COMMENT  	    as note
					 ,  DATE(E.TM_DT)	as tmDt
					 ,  (SELECT MIN(unitPrice) FROM CS_Cate_Price WHERE cateCd = E.CPN_ID AND STR_TO_DATE(priceDate,'%Y-%m-%d') >= CAST(DATE_FORMAT(E.TM_DT,'%Y-%m-%d') AS CHAR(10)))  	    as minPrice
					 ,  (SELECT MAX(unitPrice) FROM CS_Cate_Price WHERE cateCd = E.CPN_ID AND STR_TO_DATE(priceDate,'%Y-%m-%d') >= CAST(DATE_FORMAT(E.TM_DT,'%Y-%m-%d') AS CHAR(10)))  	    as maxPrice
					 ,  (SELECT unitPrice FROM CS_Cate_Price WHERE cateCd = E.CPN_ID AND STR_TO_DATE(priceDate,'%Y-%m-%d') = CAST(DATE_FORMAT(E.TM_DT,'%Y-%m-%d') AS CHAR(10)))  	    as regPrice
					 ,  (SELECT unitPrice FROM CS_Cate_Price WHERE cateCd = E.CPN_ID ORDER BY priceDate DESC LIMIT 1)  	    as curPrice
				  FROM  IB_CUSTOMER A
		     LEFT JOIN  (SELECT J.CST_ID, J.CPN_ID, J.TM_DT, A.RG_ID, A.COMMENT FROM IB_OFFER_INFO A LEFT JOIN IB_OFFER J ON J.S_NB = A.OFFER_SNB WHERE A.CATEGORY = '00006' ORDER BY J.TM_DT DESC) E ON E.CST_ID = A.S_NB
		     LEFT JOIN  IB_COMPANY F ON F.CPN_ID = E.CPN_ID
		     LEFT JOIN  IB_STAFF C ON C.USR_ID = E.RG_ID
		         WHERE  A.CATEGORY_PERSON_CD IN ('00002', '00003')
		           AND  C.USR_NM IS NOT NULL
		]]>
			  ORDER BY
			<isEqual prepend="" property="sorting" compareValue="">
				<![CDATA[	cstNm ASC, tmDt DESC		]]>
			</isEqual>
			<isEqual prepend="" property="sorting" compareValue="1">
				<![CDATA[	tmDt DESC		]]>
			</isEqual>
			<isEqual prepend="" property="sorting" compareValue="2">
				<![CDATA[	rgNm ASC 		]]>
			</isEqual>
			<isEqual prepend="" property="sorting" compareValue="3">
				<![CDATA[	cpnNm ASC 		]]>
			</isEqual>
	</select>

	<select id="workDAO.selectAuditDetailList" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
				SELECT
						A.S_NB			as sNb
					 ,  A.CST_NM		as cstNm
					 ,  D2.USR_NM		as rgNm
					 ,  D1.CPN_NM	    as cpnNm
					 ,  D.NOTE  	    as note
					 ,  DATE(D.RG_DT)	as tmDt
				  FROM  IB_CUSTOMER A
			 LEFT JOIN  IB_CST_DEAL_INFO D ON D.S_NB_1st = A.S_NB
		     LEFT JOIN  IB_COMPANY D1 ON D1.S_NB = D.S_NB_2nd
		     LEFT JOIN  IB_STAFF D2 ON D2.USR_ID = D.RG_ID
		         WHERE  A.CATEGORY_PERSON_CD IN ('00001', '00003')
		]]>
			  ORDER BY
			<isEqual prepend="" property="sorting" compareValue="">
				<![CDATA[	cstNm ASC, tmDt DESC		]]>
			</isEqual>
			<isEqual prepend="" property="sorting" compareValue="1">
				<![CDATA[	rgNm DESC		]]>
			</isEqual>
			<isEqual prepend="" property="sorting" compareValue="2">
				<![CDATA[	case when cpnNm is null then 1 else 0 end asc, cpnNm ASC 		]]>
			</isEqual>
	</select>

	<insert id="workDAO.insertMainTableCheck">
		<![CDATA[
			INSERT INTO IB_MAINTABLE_CHECK
				  (
				    OFFER_SNB
				  , CATEGORY
				  , RG_DT
				  , UP_DT
				  , RG_ID
				  , UP_ID
		 ) VALUES (
				    #offerSnb#
				  , #categoryCd#
				  , now()
				  , now()
				  , #rgId#
				  , #rgId#
				  )
		]]>
	</insert>

	<delete id="workDAO.deleteMaintableCheck">
		<![CDATA[
			DELETE FROM IB_MAINTABLE_CHECK
			 WHERE CATEGORY = #categoryCd#
			   AND OFFER_SNB = #mainSnb#
		]]>
	</delete>

	<select id="workDAO.selectAnalysisCommentsList" parameterClass="workVO" resultClass="workVO">
				SELECT
						A.OFFER_SNB				as sNb
					 ,  B.USR_NM				as rgNm
					 ,  date(C.TM_DT)			as rgDt
					 ,  CASE WHEN D.S_NB IS NULL THEN E1.S_NB ELSE D.S_NB END						as cpnSnb
					 ,  CASE WHEN D.CPN_NM IS NULL THEN E1.CPN_NM ELSE D.CPN_NM END					as cpnNm
					 ,  ''	as cpnAddr					 
					 <!-- ,	(select addr from companyinfo where comcd = (
    								case when d.cpn_id is null then e1.cpn_id else d.cpn_id end)) 	as cpnAddr -->
					 ,  CASE WHEN d.a_cpn_id IS NULL OR d.a_cpn_id = '' then (case when C.CPN_ID IS NULL OR C.CPN_ID = '' THEN (CASE WHEN e1.a_cpn_id IS NULL OR e1.a_cpn_id = '' then E.CPN_ID else e1.a_cpn_id end) ELSE C.CPN_ID END) else d.a_cpn_id end tmpNum2
					 ,  A.STAR					as star
					 ,  DATE(A.RG_DT)			AS infoRgDt
					 ,  A.EXPIRATION_DT			AS expTerm
					 ,  (SELECT unitPrice FROM CS_Cate_Price WHERE cateCd = (CASE WHEN d.a_cpn_id IS NULL OR d.a_cpn_id = '' then (case when C.CPN_ID IS NULL OR C.CPN_ID = '' THEN (CASE WHEN e1.a_cpn_id IS NULL OR e1.a_cpn_id = '' then E.CPN_ID else e1.a_cpn_id end) ELSE C.CPN_ID END) else d.a_cpn_id end) AND priceDate &gt;= DATE_ADD(DATE(A.RG_DT), INTERVAL A.EXPIRATION_DT MONTH) ORDER BY PRICEDATE ASC LIMIT 1 )	as expPrice
					 ,  (SELECT unitPrice FROM CS_Cate_Price WHERE cateCd = (CASE WHEN d.a_cpn_id IS NULL OR d.a_cpn_id = '' then (case when C.CPN_ID IS NULL OR C.CPN_ID = '' THEN (CASE WHEN e1.a_cpn_id IS NULL OR e1.a_cpn_id = '' then E.CPN_ID else e1.a_cpn_id end) ELSE C.CPN_ID END) else d.a_cpn_id end) AND priceDate &lt;= DATE(A.RG_DT) ORDER BY PRICEDATE DESC LIMIT 1)	as expStartPrice
					 ,	DATE_ADD(A.RG_DT, INTERVAL A.EXPIRATION_DT MONTH)	as expDt
					 ,	A.RG_DT												as expStartDt
					 ,  NOW()												as nowDt
					 ,  CASE WHEN C.OFFER_CD = '00002' THEN 'IR' WHEN C.OFFER_CD = '00003' THEN '탐방' WHEN C.OFFER_CD = '00004' THEN '분석' END tmpNum1
					 ,  A.COMMENT				as comment
					 ,  (SELECT MIN(unitPrice) FROM CS_Cate_Price WHERE cateCd = (CASE WHEN d.a_cpn_id IS NULL OR d.a_cpn_id = '' then (case when C.CPN_ID IS NULL OR C.CPN_ID = '' THEN (CASE WHEN e1.a_cpn_id IS NULL OR e1.a_cpn_id = '' then E.CPN_ID else e1.a_cpn_id end) ELSE C.CPN_ID END) else d.a_cpn_id end) AND STR_TO_DATE(priceDate,'%Y-%m-%d') >= CAST(DATE_FORMAT(C.TM_DT,'%Y-%m-%d') AS CHAR(10)))  	    as minPrice
					 ,  (SELECT MAX(unitPrice) FROM CS_Cate_Price WHERE cateCd = (CASE WHEN d.a_cpn_id IS NULL OR d.a_cpn_id = '' then (case when C.CPN_ID IS NULL OR C.CPN_ID = '' THEN (CASE WHEN e1.a_cpn_id IS NULL OR e1.a_cpn_id = '' then E.CPN_ID else e1.a_cpn_id end) ELSE C.CPN_ID END) else d.a_cpn_id end) AND STR_TO_DATE(priceDate,'%Y-%m-%d') >= CAST(DATE_FORMAT(C.TM_DT,'%Y-%m-%d') AS CHAR(10)))  	    as maxPrice
					 ,  (SELECT unitPrice FROM CS_Cate_Price WHERE cateCd = (CASE WHEN d.a_cpn_id IS NULL OR d.a_cpn_id = '' then (CASE WHEN C.CPN_ID IS NULL OR C.CPN_ID = '' THEN (CASE WHEN e1.a_cpn_id IS NULL OR e1.a_cpn_id = '' then E.CPN_ID else e1.a_cpn_id end) ELSE C.CPN_ID END) else d.a_cpn_id end) AND priceDate &lt;= DATE(C.TM_DT) ORDER BY PRICEDATE DESC LIMIT 1)  	    as regPrice
					 ,  (SELECT unitPrice FROM CS_Cate_Price WHERE cateCd = (CASE WHEN d.a_cpn_id IS NULL OR d.a_cpn_id = '' then (CASE WHEN C.CPN_ID IS NULL OR C.CPN_ID = '' THEN (CASE WHEN e1.a_cpn_id IS NULL OR e1.a_cpn_id = '' then E.CPN_ID else e1.a_cpn_id end) ELSE C.CPN_ID END) else d.a_cpn_id end) ORDER BY priceDate DESC LIMIT 1)  	    as curPrice
				  FROM  IB_OFFER_INFO A
			 LEFT JOIN  IB_STAFF B ON B.USR_ID = A.RG_ID
			 LEFT JOIN  IB_OFFER C ON C.S_NB = A.OFFER_SNB
			 LEFT JOIN  IB_COMPANY D ON D.CPN_ID = C.CPN_ID
			 LEFT JOIN  IB_CUSTOMER E ON E.S_NB = C.CST_ID
			 LEFT JOIN  IB_COMPANY E1 ON E1.CPN_ID = E.CPN_ID
				WHERE  C.OFFER_CD IN ('00002','00003','00004')
				  AND  A.COMMENT != ''
				  AND  A.CATEGORY = '00008'
			
			<isNotEqual prepend="" property="srchYear" compareValue="9999">
				<isNotEmpty prepend="" property="srchYear">
					  AND C.TM_DT LIKE CONCAT(#srchYear#,'%')
				</isNotEmpty>
			</isNotEqual>
				  
			<isEqual prepend="and" property="page" compareValue="1">
				A.STAR = #page#
			</isEqual>
			<isEqual prepend="and" property="page" compareValue="2">
				A.STAR = #page#
			</isEqual>
			<isEqual prepend="and" property="page" compareValue="3">
				A.STAR = #page#
			</isEqual>
			<isEqual prepend="and" property="page" compareValue="4">
				A.STAR = #page#
			</isEqual>
			<isEqual prepend="and" property="page" compareValue="5">
				A.STAR = #page#
			</isEqual>
			<isNotEmpty prepend="" property="name">
				<![CDATA[	AND  B.USR_NM = #name#		]]>
			</isNotEmpty>
			  ORDER BY
			<isEqual prepend="" property="sorting" compareValue="">
				rgDt DESC
			</isEqual>
			<isEqual prepend="" property="sorting" compareValue="a">
				rgNm ASC, rgDt DESC, a.star DESC
			</isEqual>
			<isEqual prepend="" property="sorting" compareValue="b">
				cpnNm ASC
			</isEqual>
			<isEqual prepend="" property="sorting" compareValue="c">
				a.star desc, rgDt desc
			</isEqual>
	</select>

	<select id="workDAO.selectOfferMnaStaff" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
			SELECT
				  S_NB                as  sNb
				, STAFF_NM            as  usrNm
			FROM ib_offer_mna_staff
		   WHERE OFFER_SNB = #offerSnb#
		]]>
	</select>

	<insert id="workDAO.insertOfferMnaStaff">
		<selectKey keyProperty="sNb" resultClass="string">
			SELECT ifnull(MAX(S_NB),0) + 1 FROM ib_offer_mna_staff
		</selectKey>
		<![CDATA[
			INSERT INTO ib_offer_mna_staff
				  ( S_NB
				  , OFFER_SNB
				  , STAFF_NM
				  , RG_DT
				  , UP_DT
				  , RG_ID
				  , UP_ID
		 ) VALUES ( #sNb#
				  , #offerSnb#
				  , #memoSndName#
				  , now()
				  , now()
				  , #rgId#
				  , #rgId#
				  )
		]]>
	</insert>

	<delete id="workDAO.deleteOfferMnaStaff">
		<![CDATA[
			DELETE FROM ib_offer_mna_staff
			 WHERE OFFER_SNB = #offerSnb#
		]]>
	</delete>

	<update id="workDAO.updateOfferCpnId">
		<![CDATA[
			UPDATE IB_OFFER
			SET
				   cpn_id = #aCpnId#
			 where cpn_id = #cpnId#
		]]>
	</update>

	<select id="workDAO.selectOutcomeList" parameterClass="workVO" resultClass="workVO">
		<![CDATA[
			select
					io.s_nb						as  sNb
					, date(io.TM_DT)			as  tmDt
					, ic.cpn_nm					as  cpnNm
					, io.CPN_TYPE 				as  cpnType
					, Cmm.CD_NM 	 			as  categoryNm
					, io.price					as  price
					, io.INVEST_PRICE			as  investPrice
					, iod.price					as  tmpNum1
					, iod.margin				as  tmpNum2
					, io.rg_nm					as  rgNm
					, ifnull(iod.cnt,0)+ifnull(iod.scnt,0)+ifnull(ijp.cnt,0)	as  jointCnt
					, io.OPINION 				as  investOpinion
					, date(iod.rg_dt)			as  rgDt
			from  ib_offer io
		LEFT JOIN IB_COMMON_CODE Cmm ON (Cmm.MENU_CD = '00005' AND Cmm.DTAIL_CD = io.category_cd)
		left join ib_company ic on ic.cpn_id = io.cpn_id
		left join (select sub.rg_dt, sub.offer_snb, count(1) cnt, sum(sub.cnt) scnt, sum(sub.price) price, sum(sub.margin) margin
						,sum(sub.flag) flag
					from (select siod.*, case when (ist.usr_nm = #tmpNum1# or ijp.flag>0) then 1 else 0 end flag, ijp.cnt cnt
									from IB_OFFER_DISPOSAL  siod
									left join ib_staff ist on ist.s_nb = siod.staff_snb
									left join (select sijp.offer_snb, count(1) cnt, case when ist1.usr_nm = #tmpNum1# then 1 else 0 end flag
												from ib_joint_progress sijp
												left join ib_staff ist1 on ist1.s_nb = sijp.staff_snb
												where sijp.category = '2'
												group by sijp.offer_snb
											) ijp on ijp.OFFER_SNB = siod.s_nb
						) sub
					group by sub.offer_snb
					) iod on iod.offer_snb = io.s_nb

		left join (select sijp.offer_snb, count(1) cnt, case when ist1.usr_nm = #tmpNum1# then 1 else 0 end flag
					from ib_joint_progress sijp
					left join ib_staff ist1 on ist1.s_nb = sijp.staff_snb
					where sijp.category  = '1'
					group by sijp.offer_snb
					) ijp on ijp.OFFER_SNB = io.s_nb

			where iod.price != '' and ifnull(iod.price,0) != 0
		]]>
			<isNotEmpty prepend="AND" property="tmpNum1">
			  <![CDATA[ (io.RG_NM = #tmpNum1# or iod.flag>0 or ijp.flag>0)]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="choice_month">
				<![CDATA[	iod.rg_DT between CONCAT (#choice_yearS#, #choice_monthS#, '01') and CONCAT (#choice_year#, #choice_month#, '31235959') 		]]>
			</isNotEmpty>
		 order by io.s_nb desc
	</select>

	<select id="workDAO.selectStaffList4incharge" parameterClass="staffVO" resultClass="staffVO">
	<![CDATA[
			select
					concat (stf.usr_nm,' ',count(1)) 	as usrNm
					,ichrg.rg_id		as usrId
			from ib_incharge ichrg
			left join ib_staff stf on stf.usr_id = ichrg.rg_id
			group by ichrg.rg_id
		]]>
	</select>

	<select id="workDAO.selectMnaMatchCpnList" parameterClass="rcmdVO" resultClass="rcmdVO">
	<![CDATA[
			select
					ichrg.s_nb				as sNb
					, ichrg.comment			as comment
					, cpn.s_nb				as cpnSnb
					, cpn.cpn_nm			as cpnNm
					, stf.usr_nm			as usrNm
			from ib_offer_mna_match_cpn ichrg
			left join ib_company cpn on cpn.cpn_id = ichrg.cpn_id
			left join ib_staff stf on stf.usr_id = ichrg.rg_id
			where ichrg.offer_snb = #sNb#
		]]>
	</select>

	<insert id="workDAO.insertMnaMatchCpn">
		<![CDATA[
			INSERT INTO ib_offer_mna_match_cpn
				  ( OFFER_SNB
				  , cpn_id
				  , RG_DT
				  , UP_DT
				  , RG_ID
				  , UP_ID
		 ) VALUES ( #sNb#
				  , #matchCpn#
				  , now()
				  , now()
				  , #rgId#
				  , #rgId#
				  )
		]]>
	</insert>

	<delete id="workDAO.deleteMnaMatchCpn">
		<![CDATA[
			DELETE FROM ib_offer_mna_match_cpn
			 WHERE S_NB = #sNb#
		]]>
	</delete>

	<select id="workDAO.selectMatrixList" parameterClass="workVO" resultClass="workVO">
	<![CDATA[
			select t.*
			from
			(
				select
					sub.snb 											as sNb
					,sub.cpnSnb											as cpnSnb
					,sum(sub.tmpNum1)                                          as tmpNum1
					,sub.cpnNm                                          as cpnNm
					,sub.categoryNm                                     as categoryNm
					,concat('<span class="clk" onclick="bsnsPop(event,this,' ,group_concat(sub.snb,');"><a>',sub.financing SEPARATOR  '</a></span><br/><span class="clk" onclick="bsnsPop(event,this,') ,'</a></span>')     as financing
					,concat('<span class="clk" onclick="bsnsPop(event,this,' ,group_concat(sub.snb,');"><a>',sub.management SEPARATOR '</a></span><br/><span class="clk" onclick="bsnsPop(event,this,') ,'</a></span>')     as management
					,concat('<span class="clk" onclick="bsnsPop(event,this,' ,group_concat(sub.snb,');"><a>',sub.mna SEPARATOR        '</a></span><br/><span class="clk" onclick="bsnsPop(event,this,') ,'</a></span>')     as mna
					,concat('<span class="clk" onclick="bsnsPop(event,this,' ,group_concat(sub.snb,');"><a>',sub.etc SEPARATOR        '</a></span><br/><span class="clk" onclick="bsnsPop(event,this,') ,'</a></span>')     as etc
				from(select 
						oi.offer_snb as snb
						,case when cpn.s_nb is null then cstcpn.s_nb else cpn.s_nb end as cpnSnb
						,case when (replace(oi.comment,' ','') like concat('%',replace(#tmpNum2#,' ',''),'%')) <> '' then 1 else 0 end tmpNum1
						,replace(case when cpn.cpn_nm is not null then cpn.cpn_nm else cstcpn.cpn_nm end,'(주)','') as cpnNm
						,case when cpn.CATEGORY_BUSINESS is not null then cpn.CATEGORY_BUSINESS when cstcpn.CATEGORY_BUSINESS is not null then cstcpn.category_business else o.cpn_type end as categoryNm
						,case when oi.category = '00001' or oi.category = '00007' then concat('<b>',stf.usr_nm,'</b> - ',replace(oi.comment,#tmpNum2#,concat('<font color=blue>',#tmpNum2#,'</font>')))
						 end   as financing
						,case when oi.category = '00002' then concat('<b>',stf.usr_nm,'</b> - ',replace(oi.comment,#tmpNum2#,concat('<font color=blue>',#tmpNum2#,'</font>')))
						 end   as management
						,case when oi.category = '00003' then concat('<b>',stf.usr_nm,'</b> - ',replace(oi.comment,#tmpNum2#,concat('<font color=blue>',#tmpNum2#,'</font>')))
						 end   as mna
						,case when oi.category != '00001' and oi.category != '00002' and oi.category != '00003' and oi.category != '00007' then concat('<b>',stf.usr_nm,'</b> - ',replace(oi.comment,#tmpNum2#,concat('<font color=blue>',#tmpNum2#,'</font>')))
						 end   as etc
					from ib_offer_info oi
					left join ib_offer o on o.s_nb = oi.offer_snb
					left join ib_company cpn on cpn.cpn_id = o.cpn_id
					left join ib_customer cst on cst.s_nb = o.cst_id
					left join ib_company cstcpn on cstcpn.cpn_id = cst.cpn_id
					left join ib_staff stf on stf.usr_id = oi.rg_id
					where 1=1 ]]>
					<isNotEmpty prepend="and" property="search">
					<![CDATA[
						replace( case when cpn.CATEGORY_BUSINESS is not null then cpn.CATEGORY_BUSINESS when cstcpn.CATEGORY_BUSINESS is not null then cstcpn.category_business else o.cpn_type end ,' ','') like concat('%',replace(#search#,' ',''),'%')
					]]>
					</isNotEmpty>
					<![CDATA[
						and oi.comment is not null and oi.comment <> ''
						and (case when cpn.cpn_nm is not null then cpn.cpn_nm else cstcpn.cpn_nm end) is not null and (case when cpn.cpn_nm is not null then cpn.cpn_nm else cstcpn.cpn_nm end) <> ''
						
				)sub
				where cpnNm != '-' and cpnNm !='.' and cpnNm !='000'
				group by sub.cpnNm
			) t
		]]>
		<dynamic prepend="WHERE">
			<isEmpty prepend="and" property="search">
				<![CDATA[ (t.tmpNum1) > 0 ]]>
			</isEmpty>
		</dynamic>
		<isEqual property="sorting" compareValue="1">
			order by t.cpnNm desc
		</isEqual>
		<isEqual property="sorting" compareValue="2">
			order by t.categoryNm desc, t.cpnNm
		</isEqual>
	</select>
	
	<select id="workDAO.selectMatrix2List" parameterClass="workVO" resultClass="workVO">
	<![CDATA[
		select *
		  from (
				select
					cpn.CPN_NM as cpnNm
					,cpn.s_nb  as cpnId
					,case when cst.category_person_cd = 2 then cst.s_nb end      as snb1st
					,case when cst.category_person_cd = 2 then cst.cst_nm end    as cstNm1st
					,case when cst.category_person_cd = 2 then t.cpnSnb end      as cpnSnb1st
					,case when cst.category_person_cd = 2 then t.cpn_nm end      as cpnNm1st
					,case when cst.category_person_cd = 2 then t.comment end     as tmpNum1
					,case when cst.category_person_cd = 2 then replace(substring(t.tm_dt,3,9),'-','.') end       as tmDt
					
					,case when cst.category_person_cd = 2 then (SELECT MIN(unitPrice) FROM CS_Cate_Price WHERE cateCd = t.CPN_ID AND STR_TO_DATE(priceDate,'%Y-%m-%d') >= CAST(DATE_FORMAT(t.tm_dt,'%Y-%m-%d') AS CHAR(10))) end  	    as minPrice
					,case when cst.category_person_cd = 2 then (SELECT MAX(unitPrice) FROM CS_Cate_Price WHERE cateCd = t.CPN_ID AND STR_TO_DATE(priceDate,'%Y-%m-%d') >= CAST(DATE_FORMAT(t.tm_dt,'%Y-%m-%d') AS CHAR(10))) end  	    as maxPrice
					,case when cst.category_person_cd = 2 then (SELECT unitPrice FROM CS_Cate_Price WHERE cateCd = t.CPN_ID AND STR_TO_DATE(priceDate,'%Y-%m-%d') = CAST(DATE_FORMAT(t.tm_dt,'%Y-%m-%d') AS CHAR(10))) end  	    as regPrice
					,case when cst.category_person_cd = 2 then (SELECT unitPrice FROM CS_Cate_Price WHERE cateCd = t.CPN_ID ORDER BY priceDate DESC LIMIT 1) end  	    as curPrice
					
					,case when cst.category_person_cd = 1 then cst.s_nb end      as snb2nd
					,case when cst.category_person_cd = 1 then cst.cst_nm end    as cstNm2nd
					,case when cst.category_person_cd = 1 then d1.s_nb end       as cpnSnb2nd
					,case when cst.category_person_cd = 1 then d1.cpn_nm end     as cpnNm2nd
					,case when cst.category_person_cd = 1 then d.note end        as tmpNum2

				 from ib_customer cst
			left join ib_company cpn on cpn.cpn_id = cst.cpn_id
			left join (
					select ofif.rg_dt, of.cst_id, of.cpn_id, of.tm_dt, ofCpn.cpn_nm, ofif.comment, ofCpn.s_nb as cpnSnb  
					from ib_offer of
					left join ib_company ofCpn on ofCpn.cpn_id = of.cpn_id
					left join ib_offer_info ofif on ofif.offer_snb  = of.S_NB
					where ofif.category = 6
			) t on t.cst_id = cst.s_nb
			LEFT JOIN IB_CST_DEAL_INFO D ON D.S_NB_1st = cst.S_NB
			LEFT JOIN IB_COMPANY D1 ON D1.S_NB = D.S_NB_2nd
				where cst.category_person_cd in (1,2)
				order by cpn.cpn_nm, t.rg_dt desc
		) top
		left join ib_vc vc on replace(vc.vc_nm,'(주)','') = top.cpnnm
where (vc.vc_nm is not null or top.cpnnm like '%자문%')
		]]><isNotEmpty property="search"><![CDATA[
		and (top.cpnNm like concat('%',#search#,'%') or top.cpnNm1st like concat('%',#search#,'%') or top.cpnNm2nd like concat('%',#search#,'%'))
		]]></isNotEmpty>
		<isEqual property="sorting" compareValue="">
			order by case when top.cpnNm is null then 1 else 0 end, top.cpnNm
		</isEqual>
		<isEqual property="sorting" compareValue="1">
			order by case when top.cstNm1st is null then 1 else 0 end, top.cstNm1st
		</isEqual>
		<isEqual property="sorting" compareValue="2">
			order by case when top.cstNm2nd is null then 1 else 0 end, top.cstNm2nd
		</isEqual>
	</select>	
	<select id="workDAO.selectMatrix3List" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	<![CDATA[
		select *
		  from (
				select
					cpn.CPN_NM as cpnNm
					,cpn.s_nb  as cpnSnb
					
					,case when cst.category_person_cd = 2 then cst.s_nb end      as snb1st
					,case when cst.category_person_cd = 2 then cst.cst_nm end    as cstNm1st
					,case when cst.category_person_cd = 2 then t.cpnSnb end      as cpnSnb1st
					,case when cst.category_person_cd = 2 then t.cpn_nm end      as cpnNm1st
					,case when cst.category_person_cd = 2 then t.comment end     as tmpNum1
					,case when cst.category_person_cd = 2 then replace(substring(t.tm_dt,3,9),'-','.') end       as tmDt
					
					,case when cst.category_person_cd = 2 then (SELECT MIN(unitPrice) FROM CS_Cate_Price WHERE cateCd = t.CPN_ID AND STR_TO_DATE(priceDate,'%Y-%m-%d') >= CAST(DATE_FORMAT(t.tm_dt,'%Y-%m-%d') AS CHAR(10))) end  	    as minPrice
					,case when cst.category_person_cd = 2 then (SELECT MAX(unitPrice) FROM CS_Cate_Price WHERE cateCd = t.CPN_ID AND STR_TO_DATE(priceDate,'%Y-%m-%d') >= CAST(DATE_FORMAT(t.tm_dt,'%Y-%m-%d') AS CHAR(10))) end  	    as maxPrice
					,case when cst.category_person_cd = 2 then (SELECT unitPrice FROM CS_Cate_Price WHERE cateCd = t.CPN_ID AND STR_TO_DATE(priceDate,'%Y-%m-%d') = CAST(DATE_FORMAT(t.tm_dt,'%Y-%m-%d') AS CHAR(10))) end  	    as regPrice
					,case when cst.category_person_cd = 2 then (SELECT unitPrice FROM CS_Cate_Price WHERE cateCd = t.CPN_ID ORDER BY priceDate DESC LIMIT 1) end  	    as curPrice
					
					,case when cst.category_person_cd = 1 then cst.s_nb end      as snb2nd
					,case when cst.category_person_cd = 1 then cst.cst_nm end    as cstNm2nd
					,case when cst.category_person_cd = 1 then d1.s_nb end       as cpnSnb2nd
					,case when cst.category_person_cd = 1 then d1.cpn_nm end     as cpnNm2nd
					,case when cst.category_person_cd = 1 then d.note end        as tmpNum2

				 from ib_customer cst
			left join ib_company cpn on cpn.cpn_id = cst.cpn_id
			left join (
					select ofif.rg_dt, of.cst_id, of.cpn_id, of.tm_dt, ofCpn.cpn_nm, ofif.comment, ofCpn.s_nb as cpnSnb  
					from ib_offer of
					left join ib_company ofCpn on ofCpn.cpn_id = of.cpn_id
					left join ib_offer_info ofif on ofif.offer_snb  = of.S_NB
					where ofif.category = 6
			) t on t.cst_id = cst.s_nb
			LEFT JOIN IB_CST_DEAL_INFO D ON D.S_NB_1st = cst.S_NB
			LEFT JOIN IB_COMPANY D1 ON D1.S_NB = D.S_NB_2nd
				where cst.category_person_cd in (1,2)
				order by cpn.cpn_nm, t.rg_dt desc
		) top
		left join ib_vc vc on replace(vc.vc_nm,'(주)','') = top.cpnnm
where (vc.vc_nm is not null or top.cpnnm like '%자문%')
		]]><isNotEmpty property="search"><![CDATA[
		and (top.cpnNm like concat('%',#search#,'%') or top.cpnNm0 like concat('%',#search#,'%') or top.cpnNm1st like concat('%',#search#,'%') or top.cpnNm2nd like concat('%',#search#,'%'))
		]]></isNotEmpty>
		<isEqual property="sorting" compareValue="">
			order by case when top.cpnNm is null then 1 else 0 end, top.cpnNm
		</isEqual>
		<isEqual property="sorting" compareValue="1">
			order by case when top.cstNm1st is null then 1 else 0 end, top.cstNm1st
		</isEqual>
		<isEqual property="sorting" compareValue="2">
			order by case when top.cstNm2nd is null then 1 else 0 end, top.cstNm2nd
		</isEqual>
	</select>

	<update id="workDAO.updateMnaMatchComment">
		<![CDATA[
			UPDATE ib_offer_mna_match_cpn
			SET
				   comment = #comment#
				   , up_id = #rgId#
			 where s_nb = #sNb#
		]]>
	</update>
	
	<update id="workDAO.updateMiddleOfferCd">
		<![CDATA[
			UPDATE ib_offer
			SET
				   middle_offer_cd = #middleOfferCd#
				   , offer_cd = #offerCd#
				   , up_id = #rgId#
			 where s_nb = #sNb#
		]]>
	</update>
	
	<!-- 파일삭제 추가 20151001 -->
	<update id="workDAO.deleteFile">
		<![CDATA[
			DELETE FROM ib_file_info
			 WHERE offer_s_nb = #offerSNb#
			   AND make_name = #makeName#
		]]>
	</update>
	
	
	
	
	
	
	
	
	<!-- ================================== 메모박스 관련 :S ================================== -->
	
	<!-- 메모리스트 -->
	<select id="work.selectMemoList" parameterClass="HashMap" resultClass="HashMap">
		select *
		  from(
		  
			select (case when L.grpMemCnt = 1 then 'MY' when L.mainSnb = 0 then 'SEND' else 'RECV' end) as mType
					, L.*
			  from(
			
				select a.s_nb		as sNb
					  ,a.main_snb	as mainSnb
					  ,a.stts_cd	as sttsCd
					  ,a.private	as private
					  ,a.importance	as importance
					  ,a.name		as name
					  ,(SELECT DIVISION FROM IB_STAFF WHERE USR_NM = A.name)			as division
					  
					  ,left((case when a.private='Y' then aes_decrypt(unhex(a.comment), md5(a.rg_id)) else IFNULL(A.comment,"-") end), 60)	as comment
					  ,a.major		as major
					  ,date_format(a.tm_dt, '%Y-%m-%d')	as tmDt
					  ,a.rg_id		as rgId
					  ,a.up_id		as upId
							
					  ,(case when a.main_snb = 0 then a.s_nb else a.main_snb end) as newMainSnb
							
					  ,(select count(1) from ib_comment where main_snb = (case when a.main_snb = 0 then a.s_nb else a.main_snb end) 
															   or s_nb = (case when a.main_snb = 0 then a.s_nb else a.main_snb end) ) as grpMemCnt	<!-- 참여자수 -->
															   
					  ,(select group_concat(name) from ib_comment where main_snb = (case when a.main_snb = 0 then a.s_nb else a.main_snb end) 
												   or s_nb = (case when a.main_snb = 0 then a.s_nb else a.main_snb end) ) as grpMemNms
															   
					  ,(select count(1) from ib_reply where main_snb = (case when a.main_snb = 0 then a.s_nb else a.main_snb end)) as repCnt		<!-- 댓글수 -->
					  
					  ,(select rg_dt from ib_reply where main_snb = (case when a.main_snb = 0 then a.s_nb else a.main_snb end) order by s_nb desc limit 1) as repLastDt	<!-- 최신댓글날짜 -->
					  
					  ,(case
						when a.main_snb = 0 then	<!-- 주메모 일때 -->
							ifnull((select (case when rep_snb = 0 then '00002' else stts_cd end) from ib_reply where main_snb = a.s_nb order by s_nb desc limit 1), '00002')
							<!-- 댓글이 없으면 무조건 읽은상태, 마지막이 내가 쓴 댓글이면 무조건 읽은상태, 마지막이 다른사람이 쓴글이면 마지막 댓글의 읽은 상태코드 반환 -->
						else
							a.stts_cd	<!-- 내가 수신자인 메모일때, 메모의 상태코드가 읽은 상태 -->
						end
					   ) as readStts	<!-- 읽은상태 -->
					  
					  ,a.frst_stts_cd		as frstReadStts		<!-- 첫글 읽은상태 -->
					  
					  ,(select name from ib_comment where s_nb = a.main_snb) as sendNm						<!-- 발송자명 -->
					  ,(select group_concat(name) from ib_comment where main_snb = a.s_nb) as recvNms		<!-- 수신자들명 -->
					  
					  ,(select group_concat(comment order by s_nb) from ib_reply where main_snb = (case when a.main_snb = 0 then a.s_nb else a.main_snb end)) as commentsReply
					  
					  ,concat(
					  	ifnull((select group_concat(REAL_NAME) from IB_FILE_INFO WHERE FILE_CATEGORY = '00004' and OFFER_S_NB = (case when a.main_snb = 0 then a.s_nb else a.main_snb end)),'')
					  	,
					  	ifnull((select group_concat(T.REAL_NAME) from IB_FILE_INFO T WHERE T.FILE_CATEGORY = '00005' and exists (
																						select 1
																						  from ib_reply
																						 where main_snb = (case when a.main_snb = 0 then a.s_nb else a.main_snb end)
																						   and s_nb = T.offer_s_nb
																					  )), '')
					  	) as files
					  
					  , A.MEMO_TYPE						AS memoType
					  , (SELECT CD_NM
						   FROM IB_COMMON_CODE
						  WHERE MENU_CD = '00026'
						    AND DTAIL_CD = A.MEMO_TYPE)	AS memoTypeNm
					  
				 FROM IB_COMMENT	a
				
				WHERE 1=1
				  AND a.TM_DT BETWEEN #startDt# AND #endDt#
				  AND a.name = #usrNm#
		
			) L
			
		) K
		
		where 1=1
		
		
		<isNotEmpty prepend="AND" property="memoType">
			K.mType = #memoType#
		</isNotEmpty>
		
		<isNotEmpty prepend="" property="srchTxt">
			<isNotEmpty prepend="AND" property="srchTxtType">
				<isEqual property="srchTxtType" compareValue="CONT">
					( K.comment like concat('%', #srchTxt#, '%') or K.commentsReply like concat('%', #srchTxt#, '%') )
				</isEqual>
				<isEqual property="srchTxtType" compareValue="SEND">
					K.sendNm like concat('%', #srchTxt#, '%')
				</isEqual>
				<isEqual property="srchTxtType" compareValue="RECV">
					K.recvNms like concat('%', #srchTxt#, '%')
				</isEqual>
				<isEqual property="srchTxtType" compareValue="FILE">
					K.files like concat('%', #srchTxt#, '%')
				</isEqual>			
			</isNotEmpty>
			<isEmpty prepend="AND" property="srchTxtType">
				(
						( K.comment like concat('%', #srchTxt#, '%') or K.commentsReply like concat('%', #srchTxt#, '%') )
					or
						K.sendNm like concat('%', #srchTxt#, '%')
					or
						K.recvNms like concat('%', #srchTxt#, '%')
					or
						K.files like concat('%', #srchTxt#, '%')
				)
			</isEmpty>
		</isNotEmpty>
		
		<isEqual prepend="AND" property="noRead" compareValue="Y">
			K.readStts = '00001'
		</isEqual>
		
		
		order by  <isEqual property="lastRepOrdr" compareValue="Y">K.repLastDt desc,</isEqual>  K.tmDt desc, sNb desc
	
		<isNotEmpty prepend="" property="limit">
			LIMIT #offset#, #limit#
		</isNotEmpty>
		
		/* work.selectMemoList */
	</select>
	
	
	<!-- 메모 수 -->
	<select id="work.selectMemoListCount" parameterClass="HashMap" resultClass="Integer">
	
		select count(*)
		  from(
		  
			select (case when L.grpMemCnt = 1 then 'MY' when L.mainSnb = 0 then 'SEND' else 'RECV' end) as mType
					, L.*
			  from(
			
				select a.s_nb		as sNb
					  ,a.main_snb	as mainSnb
					  ,a.stts_cd	as sttsCd
					  ,a.private	as private
					  ,a.importance	as importance
					  ,a.name		as name
					  ,(case when a.private='Y' then aes_decrypt(unhex(a.comment), md5(a.rg_id)) else IFNULL(A.comment,"-") end)	as comment
					  
					  ,a.major		as major
					  <!-- ,date_format(a.tm_dt, '%Y-%m-%d')	as tmDt
					  ,a.rg_id		as rgId
					  ,a.up_id		as upId -->
							
					  ,(select count(1) from ib_comment where main_snb = (case when a.main_snb = 0 then a.s_nb else a.main_snb end) 
															   or s_nb = (case when a.main_snb = 0 then a.s_nb else a.main_snb end) ) as grpMemCnt	<!-- 참여자수 -->
															   
					  <!-- ,(select count(1) from ib_reply where main_snb = (case when a.main_snb = 0 then a.s_nb else a.main_snb end)) as repCnt -->		<!-- 댓글수 -->
					  
					  ,(case
						when a.main_snb = 0 then	<!-- 주메모 일때 -->
							ifnull((select (case when rep_snb = 0 then '00002' else stts_cd end) from ib_reply where main_snb = a.s_nb order by s_nb desc limit 1), '00002')
							<!-- 댓글이 없으면 무조건 읽은상태, 마지막이 내가 쓴 댓글이면 무조건 읽은상태, 마지막이 다른사람이 쓴글이면 마지막 댓글의 읽은 상태코드 반환 -->
						else
							a.stts_cd	<!-- 내가 수신자인 메모일때, 메모의 상태코드가 읽은 상태 -->
						end
					   ) as readStts	<!-- 읽은상태 -->
					  
					  ,(select name from ib_comment where s_nb = a.main_snb) as sendNm						<!-- 발송자명 -->
					  ,(select group_concat(name) from ib_comment where main_snb = a.s_nb) as recvNms		<!-- 수신자들명 -->
					  
					  ,(select group_concat(comment order by s_nb) from ib_reply where main_snb = (case when a.main_snb = 0 then a.s_nb else a.main_snb end)) as commentsReply
					  
					  ,concat(
					  	ifnull((select group_concat(REAL_NAME) from IB_FILE_INFO WHERE FILE_CATEGORY = '00004' and OFFER_S_NB = (case when a.main_snb = 0 then a.s_nb else a.main_snb end)),'')
					  	,
					  	ifnull((select group_concat(T.REAL_NAME) from IB_FILE_INFO T WHERE T.FILE_CATEGORY = '00005' and exists (
																						select 1
																						  from ib_reply
																						 where main_snb = (case when a.main_snb = 0 then a.s_nb else a.main_snb end)
																						   and s_nb = T.offer_s_nb
																					  )), '')
					  	) as files
					  
				from ib_comment	a
				
				where 1=1
				  and a.TM_DT BETWEEN #startDt# AND #endDt#
				  and a.name = #usrNm#
			    
			) L
			
		) K
		
		where 1=1
		
		
		<isNotEmpty prepend="AND" property="memoType">
			K.mType = #memoType#
		</isNotEmpty>
		
		<isNotEmpty prepend="" property="srchTxt">
			<isNotEmpty prepend="AND" property="srchTxtType">
				<isEqual property="srchTxtType" compareValue="CONT">
					( K.comment like concat('%', #srchTxt#, '%') or K.commentsReply like concat('%', #srchTxt#, '%') )
				</isEqual>
				<isEqual property="srchTxtType" compareValue="SEND">
					K.sendNm like concat('%', #srchTxt#, '%')
				</isEqual>
				<isEqual property="srchTxtType" compareValue="RECV">
					K.recvNms like concat('%', #srchTxt#, '%')
				</isEqual>
				<isEqual property="srchTxtType" compareValue="FILE">
					K.files like concat('%', #srchTxt#, '%')
				</isEqual>			
			</isNotEmpty>
			<isEmpty prepend="AND" property="srchTxtType">
				(
						( K.comment like concat('%', #srchTxt#, '%') or K.commentsReply like concat('%', #srchTxt#, '%') )
					or
						K.sendNm like concat('%', #srchTxt#, '%')
					or
						K.recvNms like concat('%', #srchTxt#, '%')
					or
						K.files like concat('%', #srchTxt#, '%')
				)
			</isEmpty>
		</isNotEmpty>
		
		<isEqual prepend="AND" property="noRead" compareValue="Y">
			K.readStts = '00001'
		</isEqual>
				
		/* work.selectMemoListCount */
	</select>
	
	
	<!-- 메모 상세 보기 -->
	<select id="work.selectMemoDetail" parameterClass="HashMap" resultClass="HashMap">
		select k.*
		from (
	
			select s_nb as mainSnb, name 
				  ,(case when private='Y' then aes_decrypt(unhex(comment), md5(rg_id)) else IFNULL(comment,"-") end) as	comment
				  ,date_format(rg_dt, '%Y-%m-%d%H:%i') as dt
				  ,'' as isFile
				  ,'' as mkNm
			from ib_comment
			where 1=1
			  and s_nb = #mainSnb#
			
			union all
			
			select main_snb as mainSnb, name, comment, date_format(rg_dt, '%Y-%m-%d%H:%i') as dt
				  ,'' as isFile
				  ,'' as mkNm
			from ib_reply
			where 1=1
			  and main_snb = #mainSnb#
			  
			union all
    
		    select '' as mainSnb, (select usr_nm from ib_staff where usr_id = a.rg_id) as name, a.real_name as comment, date_format(rg_dt, '%Y-%m-%d%H:%i') as dt
		    	  , 'Y' as isFile
		    	  , a.make_name as mkNm
			  from ib_file_info A
			 where 1=1
			   and a.file_category = '00004'
			   and exists (		
					select 1
						from ib_comment
					   where s_nb = #mainSnb#
						 and s_nb = a.offer_s_nb
				  )
		      
			union all
		    
		    select '' as mainSnb, (select usr_nm from ib_staff where usr_id = a.rg_id) as name, a.real_name as comment, date_format(rg_dt, '%Y-%m-%d%H:%i') as dt
		    	  , 'Y' as isFile
		    	  , a.make_name as mkNm
			  from ib_file_info A
			 where 1=1
			   and a.file_category = '00005'
			   and exists (
					select 1
						from ib_reply
					   where main_snb = #mainSnb#
						 and s_nb = a.offer_s_nb
				  )
			  
		) k
		order by k.dt
		
		/* work.selectMemoDetail */
	</select>
	
	
	<update id="work.updateMemoMainStatus">
			UPDATE IB_COMMENT
			SET
				  STTS_CD   =  IF((SELECT RG_ID FROM IB_COMMENT WHERE S_NB = #sNb#) = #rgId#,'',#sttsCd# )
				  
				, FRST_STTS_CD = '00002'  
				  
				, UP_DT     =  now()
				, UP_ID     =  #rgId#
				
			WHERE S_NB      =  #sNb#

		/* work.updateMemoMainStatus */
	</update>
	<update id="work.updateMemoReplyStatus">
		<![CDATA[
			UPDATE IB_REPLY
			SET
				  STTS_CD   =  #sttsCd#
				, UP_DT     =  now()
				, UP_ID     =  #rgId#
				
			WHERE MAIN_SNB	=  #sNb#
		]]>
	</update>
	
	
	<!-- 메모 참여자 수신 확인 -->
	<select id="work.selectMemoRecvInfo" parameterClass="HashMap" resultClass="HashMap">
		SELECT 
				  K.isMaster
				, K.name
				, K.readStts
				, K.frstReadStts
				, (
					SELECT positionNm 
					FROM erp.erp_per_position 
					WHERE positionCd = (SELECT POSITION FROM IB_STAFF WHERE USR_NM = K.name ORDER BY S_NB DESC LIMIT 1)
				
					) AS position	<!-- 나중에수정 -->
				, (SELECT SABUN FROM IB_STAFF WHERE USR_NM = K.name ORDER BY S_NB DESC LIMIT 1) AS sabun		<!-- 나중에수정 -->
			
		  FROM (
				SELECT  a.main_snb,
						CASE WHEN a.main_snb = 0 THEN 'Y' else '' END AS isMaster,
						name,
					    CASE WHEN a.main_snb = 0 THEN IFNULL((SELECT (CASE WHEN REP_SNB = 0 THEN '00002' ELSE STTS_CD END) FROM IB_REPLY WHERE MAIN_SNB = #mainSnb# ORDER BY s_nb DESC LIMIT 1), '00002')
							ELSE stts_cd
						END AS readStts,
						a.frst_stts_cd	AS frstReadStts
				FROM IB_COMMENT a
				WHERE (a.s_nb = #mainSnb# and a.main_snb = 0) OR a.main_snb = #mainSnb#
		    ) K
		    
		ORDER BY K.main_snb, K.frstReadStts DESC, K.readStts DESC, K.name
	
		/* work.selectMemoRecvInfo */
	</select>
	
	
	<!-- 메모 내용(메모 재전송 기능 위해) -->
	<select id="work.selectMemoCntnt" parameterClass="HashMap" resultClass="HashMap">		
		select s_nb as mainSnb
			  ,name 
			  ,(case when private='Y' then aes_decrypt(unhex(comment), md5(rg_id)) else IFNULL(comment,"-") end) as	comment
			  ,date_format(tm_dt, '%Y-%m-%d') as dt
			  ,'' as isFile
			  ,'' as mkNm
			  
			  ,(select cal_date 
				  FROM calendar
				 where cal_date > date(now())
				   and holiflag = 'N'
				 order by cal_date asc
				 limit 1) resendDate			<!-- 재전송할 날짜 -->
			  
		from ib_comment
		where 1=1
		  and s_nb = #mainSnb#
			
		/* work.selectMemoCntnt */
	</select>
	
	
	<insert id="work.cloneResendMemoMain" parameterClass="HashMap">
			INSERT INTO IB_COMMENT
				  ( NAME
				  , MAIN_SNB
				  , COMMENT
				  , IMPORTANCE
				  , PRIVATE
				  , MAJOR
				  , STTS_CD
				  , TM_DT
				  , RG_DT
				  , UP_DT
				  , RG_ID
				  , UP_ID
				  )
				  
			SELECT NAME
				  , MAIN_SNB
				  , case when private = 'Y' then hex(aes_encrypt(#comment#,md5(#usrId#))) else #comment# end
				  , IMPORTANCE
				  , PRIVATE
				  , MAJOR
				  , ''
				  , #tmDt#
				  , now()
				  , now()
				  , #usrId#
				  , #usrId#
			  FROM IB_COMMENT
			 WHERE S_NB = #sNb#
			 
		<selectKey keyProperty="s" resultClass="String">
			SELECT LAST_INSERT_ID()
		</selectKey>
		/* work.cloneResendMemoMain */
	</insert>
	
	
	<insert id="work.cloneResendMemoSub" parameterClass="HashMap">
		INSERT INTO IB_COMMENT
			  ( NAME
			  , MAIN_SNB
			  , COMMENT
			  , IMPORTANCE
			  , PRIVATE
			  , MAJOR
			  , STTS_CD
			  , TM_DT
			  , RG_DT
			  , UP_DT
			  , RG_ID
			  , UP_ID
			  )
			  
		SELECT NAME
			  , #mainSnb#
			  , case when private = 'Y' then hex(aes_encrypt(#comment#,md5(#usrId#))) else #comment# end
			  , IMPORTANCE
			  , PRIVATE
			  , MAJOR
			  , '00001'
			  , #tmDt#
			  , now()
			  , now()
			  , #usrId#
			  , #usrId#
		  FROM IB_COMMENT
		 WHERE MAIN_SNB = #sNb#
		/* work.cloneResendMemoSub */
	</insert>
	
	<insert id="work.cloneResendFile" parameterClass="HashMap">
		INSERT INTO IB_FILE_INFO(
			OFFER_S_NB, SUB_CD, REPORT_YN, REAL_NAME, MAKE_NAME, PATH, RG_DT, UP_DT, RG_ID, UP_ID, FILE_CATEGORY
		    )
		    
		    SELECT #offerSnb#, SUB_CD, REPORT_YN, REAL_NAME, MAKE_NAME, PATH, RG_DT, UP_DT, RG_ID, UP_ID, FILE_CATEGORY
		      FROM IB_FILE_INFO
		     WHERE OFFER_S_NB = #sNb#
		       AND FILE_CATEGORY = '00004'
		     
		/* work.cloneResendFile */
	</insert>
	<insert id="work.clonePropDealFile" parameterClass="HashMap">
		INSERT INTO IB_FILE_INFO(
			OFFER_S_NB, SUB_CD, REPORT_YN, REAL_NAME, MAKE_NAME, PATH, RG_DT, UP_DT, RG_ID, UP_ID, FILE_CATEGORY
		    )
		    
		    SELECT #offerSnb#, SUB_CD, REPORT_YN, REAL_NAME, MAKE_NAME, PATH, RG_DT, UP_DT, RG_ID, UP_ID, FILE_CATEGORY
		      FROM IB_FILE_INFO
		     WHERE OFFER_S_NB = #sNb#
		       AND FILE_CATEGORY = '00000'
		     
		/* work.clonePropDealFile */
	</insert>
			
	<!-- ================================== 메모박스 관련 :E ================================== -->
	
	
	
	<!-- ================================== 정보등급 관련 :S ================================== -->
	<!-- 정보등급 (실제 배정되어 있는 등급 숫자들 -->
	<select id="work.selectInfoLevelList" resultClass="String">
		select *
		  from ( 
				 SELECT DISTINCT MNA_LEVEL		as lvl	  
				  FROM IB_STAFF
				 WHERE SRT_CD &lt; 100
				   AND MNA_LEVEL IS NOT NULL
				  
				 union
				 
				 SELECT DISTINCT INFO_LEVEL		as lvl  
				  FROM IB_STAFF
				 WHERE SRT_CD &lt; 100
				   AND INFO_LEVEL IS NOT NULL
			) K
		order by K.lvl asc
	</select>
	
	<!-- 정보등급별 사용자(M&A 외) -->
	<select id="work.selectInfoLevelUser" parameterClass="HashMap" resultClass="HashMap">
		SELECT 
			   INFO_LEVEL									as lvl
		      ,GROUP_CONCAT(USR_NM ORDER BY USR_NM ASC)		as names
		      ,''											as btn
		      
		  FROM IB_STAFF
		 WHERE SRT_CD &lt; 100
		 GROUP BY INFO_LEVEL
		 ORDER BY INFO_LEVEL DESC
	
		/* work.selectInfoLevelUser */
	</select>
	<!-- 정보등급별 사용자(M&A) -->
	<select id="work.selectMnaLevelUser" parameterClass="HashMap" resultClass="HashMap">
		SELECT 
			   MNA_LEVEL									as lvl
		      ,GROUP_CONCAT(USR_NM ORDER BY USR_NM ASC)		as names
		      ,''											as btn
		      
		  FROM IB_STAFF
		 WHERE SRT_CD &lt; 100
		 GROUP BY MNA_LEVEL
		 ORDER BY MNA_LEVEL DESC
	
		/* work.selectMnaLevelUser */
	</select>
	
	<!-- ================================== 정보등급 관련 :E ================================== -->
	
	
	<!-- ================================== 투자심의 관련 :S ================================== -->
	<!-- 투자심의 정보 -->
	<select id="work.selectInvestInfo" parameterClass="HashMap" resultClass="HashMap">
		SELECT *
	       FROM (
	        
		        SELECT M.*
				  FROM (
						SELECT A.S_NB									AS sNb
							  ,A.DEAL_ID								AS offerSnb
							  ,A.STAFF_ID								AS staffId
						      ,A.REVIEW									AS review
						      ,A.REVIEW_MEMO							AS reviewMemo
						      ,A.CREATE_DATE							AS createDate
						      ,DATE_FORMAT(A.CREATE_DATE, '%Y-%m-%d')	AS createDt
						      ,A.UPDATE_DATE							AS updateDate
						      
						      ,B.USR_NM									AS staffNm
						      ,B.REVIEW_LEVEL							AS reviewLevel
		                      
		                      ,'Y'										AS isDealReview
						      
						 FROM IB_DEAL_REVIEW	A
						 LEFT JOIN IB_STAFF		B	ON B.S_NB = A.STAFF_ID
						WHERE A.DEAL_ID = #offerSnb#				
					) M
				
				UNION ALL
				
				SELECT ''												AS sNb
					  ,K.OFFER_SNB										AS offerSnb
				      ,''												AS staffId
				      ,K.STAR											AS review
				      ,K.COMMENT										AS reviewMemo
				      ,K.RG_DT											AS createDate
				      ,DATE_FORMAT(K.RG_DT, '%Y-%m-%d')					AS createDt
				      ,K.UP_DT											AS updateDate
				      		      
				      ,K.rgNm											AS staffNm
				      ,(SELECT REVIEW_LEVEL FROM IB_STAFF WHERE USR_ID = K.RG_ID) AS reviewLevel
		              
		              ,'N'												AS isDealReview
				    
				  FROM (
				
					SELECT (CASE WHEN B.CPN_ID IS NULL OR B.CPN_ID = '' THEN (SELECT CPN_ID FROM IB_CUSTOMER WHERE S_NB = B.CST_ID)	ELSE B.CPN_ID END) AS investCpnId
						  , A.OFFER_SNB, A.STAR, A.COMMENT, A.RG_DT, A.UP_DT, A.RG_ID, B.RG_NM AS rgNm
					FROM IB_OFFER_INFO		A
					LEFT JOIN IB_OFFER		B ON A.OFFER_SNB = B.S_NB
					WHERE A.CATEGORY = '00008'
					  AND B.OFFER_CD IN ('00002','00003','00004')
					  <!-- AND B.TM_DT &gt;= (SELECT DATE(DATE_ADD(TM_DT, INTERVAL -2 MONTH)) FROM IB_OFFER WHERE S_NB = #offerSnb#) -->
					  AND B.TM_DT &gt;= (SELECT DATE(DATE_ADD(TM_DT, INTERVAL -7 DAY)) FROM IB_OFFER WHERE S_NB = #offerSnb#)
					  AND B.TM_DT &lt; (SELECT DATE_ADD(DATE(TM_DT), INTERVAL 6 MONTH) FROM IB_OFFER WHERE S_NB = #offerSnb#)
					)	K
				WHERE K.investCpnId = (SELECT CPN_ID FROM IB_OFFER WHERE S_NB = #offerSnb#)
	        
			) T
	    
	    ORDER BY (CASE WHEN T.reviewLevel = 'M' THEN 2
					   WHEN T.reviewLevel = 'F' THEN 1
					   ELSE 100
				   END ) ASC, T.createDate DESC
		
		/* work.selectInvestInfo */
	</select>
	
	
	<!-- 투자심의 저장 -->
	<insert id="work.insertMyInvest" parameterClass="HashMap">
		INSERT INTO IB_DEAL_REVIEW
				  (
				    DEAL_ID
				  , STAFF_ID
				  , REVIEW
				  , REVIEW_MEMO
				  
				  , CREATE_DATE
				  , CREATED_BY
				  , UPDATE_DATE
				  , UPDATED_BY
				  
		 ) VALUES (
				    #sNb#
				  , #userSeq#
				  , #chkStar#
				  , #reviewMemo#
				  
				  , now()
				  , #userSeq#
				  , now()
				  , #userSeq#
				  )
		  ON DUPLICATE KEY UPDATE
				    REVIEW   	=  #chkStar#
				  , REVIEW_MEMO	=  #reviewMemo#

				  , UPDATE_DATE	=  now()
				  , UPDATED_BY	=  #userSeq#

		/* work.insertMyInvest */
	</insert>
	
	
	<!-- ================================== 투자심의 관련 :E ================================== -->
	
	
	<update id="work.doSaveInvestDt" parameterClass="HashMap">	
		UPDATE IB_OFFER
		SET
			  INVEST_DT = STR_TO_DATE(#investDt#, '%Y-%m-%d')
			  
			, UP_DT     = now()
			, UP_ID     = #rgId#
			
		WHERE S_NB      = #sNb#
		/* work.doSaveInvestDt */
	</update>
	
	
	<!-- 업무보고 유형 변경 -->
	<update id="work.updateMemoType" parameterClass="HashMap">	
		UPDATE IB_COMMENT
		   SET
		   	   MEMO_TYPE = #memoType#
			  
			  ,UP_DT     = now()
			  ,UP_ID     = #rgId#
			
		WHERE S_NB      = #memoSnb#
		   OR MAIN_SNB	= #memoSnb#
		/* work.updateMemoType */
	</update>
	
	
	<!-- 업무보고 참조인 삭제 -->
	<delete id="work.deleteMemoStaffComment" parameterClass="HashMap">	
		DELETE FROM IB_COMMENT
		 WHERE 1=1
		   AND NAME = #name#
		   AND (CASE
					WHEN #mainSnb# = '' THEN FALSE
					WHEN #mainSnb# = '0' THEN FALSE			        
			        ELSE MAIN_SNB = #mainSnb#
				END)
		   AND MAIN_SNB &gt; 0
		/* work.deleteMemoStaffComment */
	</delete>
	
	
	<!-- 업무보고 참조인 삭제 -->
	<delete id="work.deleteMemoStaffReply" parameterClass="HashMap">	
		DELETE FROM IB_REPLY
		 WHERE 1=1
		   AND NAME = #name#
		   AND (CASE
					WHEN #mainSnb# = '' THEN FALSE
					WHEN #mainSnb# = '0' THEN FALSE					
			        ELSE MAIN_SNB = #mainSnb#
				END)
		   AND MAIN_SNB &gt; 0
		/* work.deleteMemoStaffReply */
	</delete>
	
	
	<!-- 삭제하려는 참조인 댓글 존재 확인 -->
	<select id="work.checkMemoReplyExist" parameterClass="HashMap" resultClass="HashMap">		
		SELECT COUNT(*)		AS replyCnt
		  FROM IB_REPLY 
		 WHERE NAME = #name#
		   AND MAIN_SNB = #mainSnb#
		   AND (CASE WHEN #mainSnb# IS NULL THEN FALSE
					  WHEN #mainSnb# = '0' THEN FALSE
		     		  WHEN #mainSnb# = '' THEN FALSE
					  ELSE TRUE
		     	  END)
				
		/* work.checkMemoReplyExist */
	</select>
	
	
	<!-- 모바일 업무일지 : S -->
	
	<!-- 업무리스트 -->
	<select id="work.getWorkListByNoPaging" parameterClass="HashMap" resultClass="HashMap">
		
		SELECT 
				  S_NB		AS sNb
				, NAME		AS name
				, TITLE		AS title
				, NOTE		AS note
				, PROCESS	AS process
				, PRIVATE	AS private
				, DATE_FORMAT(TM_DT,'%Y-%m-%d')		AS tmDt
				, DATE_FORMAT(TM_DT, '%Y-%m-%d')	AS calDate
				
		FROM SYNERGYMAIN.IB_BUSINESS_RECORD
		
		WHERE 1=1	
		
		<isNotEmpty prepend="AND" property="sabun">
			 NAME = (SELECT USR_NM FROM IB_STAFF WHERE SABUN = #sabun#)
		</isNotEmpty>
		
		<isNotEmpty prepend="AND" property="workSnb">
			 S_NB = #workSnb#
		</isNotEmpty>
		
		<isNotEmpty prepend="AND" property="selectYM">
			 DATE_FORMAT(TM_DT , '%Y-%m') = #selectYM#
		</isNotEmpty>	
		
		<isNotEmpty prepend="AND" property="selectDate">
			 DATE_FORMAT(TM_DT , '%Y-%m-%d') = #selectDate#
		</isNotEmpty>
		
		ORDER BY TM_DT ASC, PROCESS DESC
	
	</select>
	
	<!-- 메모리스트 -->
	<select id="work.getMemoListForMobile" parameterClass="HashMap" resultClass="HashMap">
		
		SELECT 
			AL2.*
			
			FROM(
				SELECT 
					 AL.*
		           , (CASE WHEN AL.grpMemCnt = 1 THEN 'MEMO' WHEN AL.mainSnb = 0 THEN 'REV' ELSE 'SEND' END) AS memoKind
		        
		        
			     FROM(
						SELECT
								
									  A.S_NB			AS sNb
									, A.MAIN_SNB		AS mainSnb
									, A.STTS_CD			AS sttsCd
									, A.PRIVATE			AS private
									, A.IMPORTANCE		AS importance
									
									, A.NAME			AS name
									, LEFT((CASE WHEN A.PRIVATE='Y' THEN AES_DECRYPT(UNHEX(A.COMMENT), MD5(A.RG_ID)) ELSE IFNULL(A.comment,"-") END), 60)	AS comment
									, A.MAJOR			AS major
									, A.RG_ID			AS rgId
									, A.UP_ID			AS upId
									, A.FRST_STTS_CD	AS frstReadStts		
									, A.MEMO_TYPE		AS memoType
									
									, IF(A.MEMO_TYPE != '00010', 
										(SELECT CD_NM FROM IB_COMMON_CODE WHERE MENU_CD = '00026' AND DTAIL_CD = A.MEMO_TYPE),''
									
									)	AS memoTypeNm
									
									, DATE_FORMAT(A.TM_DT, '%Y-%m-%d')	AS tmDt
									
									, DATE_FORMAT(A.TM_DT, '%Y-%m-%d')	AS calDate
									
									, (SELECT COUNT(1) FROM IB_REPLY WHERE MAIN_SNB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB))+1 AS repCnt		
												  
									, (SELECT RG_DT FROM IB_REPLY WHERE MAIN_SNB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB)  ORDER BY S_NB DESC LIMIT 1) AS repLastDt
												  
									, (CASE WHEN A.MAIN_SNB = 0 
											THEN IFNULL((SELECT (CASE WHEN REP_SNB = 0 THEN '00002' ELSE STTS_CD END) FROM IB_REPLY WHERE MAIN_SNB = A.S_NB ORDER BY S_NB DESC LIMIT 1), '00002')
											ELSE A.STTS_CD	END
									   ) AS readStts	
									
									, IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB)  AS newMainSnb
									, (SELECT COUNT(1) FROM IB_COMMENT 
										WHERE MAIN_SNB  = IF(A.MAIN_SNB = 0 ,A.S_NB ,A.MAIN_SNB) 
												OR S_NB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB) 
									   ) AS grpMemCnt
									
									
									
									, (SELECT 
                    						GROUP_CONCAT(NAME)
						                FROM
						                    IB_COMMENT
						                WHERE
						                    MAIN_SNB = IF(A.MAIN_SNB = 0,A.S_NB,A.MAIN_SNB)
						                        OR S_NB = IF(A.MAIN_SNB = 0, A.S_NB, A.MAIN_SNB)) AS grpMemNms
				   
									, IFNULL((SELECT NAME FROM IB_COMMENT WHERE S_NB = A.MAIN_SNB ),'') AS sendNm
									
									, IFNULL((SELECT NAME FROM IB_COMMENT WHERE MAIN_SNB = A.S_NB ORDER BY TM_DT ASC LIMIT 1),'') AS revNm
									
									, IFNULL((SELECT GROUP_CONCAT(NAME) FROM IB_COMMENT WHERE MAIN_SNB = A.S_NB),'') AS revNms
									
																						   
									
												  
									, (SELECT GROUP_CONCAT(COMMENT) FROM IB_REPLY WHERE MAIN_SNB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB)) AS commentsReply
												  
									, (SELECT COUNT(1) FROM IB_FILE_INFO 
										WHERE (FILE_CATEGORY = '00004' AND OFFER_S_NB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB) )
											 OR 
											  (FILE_CATEGORY = '00005' AND EXISTS ( SELECT 1 
																					FROM IB_REPLY 
																					
																					WHERE MAIN_SNB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB) 
																						  AND S_NB = OFFER_S_NB
																					)
											   )
												
										) AS fileCount
										
									,  CONCAT(
						  					IFNULL((SELECT GROUP_CONCAT(REAL_NAME) FROM IB_FILE_INFO WHERE FILE_CATEGORY = '00004' AND OFFER_S_NB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB) ),'')
						  					,
						  					IFNULL((SELECT GROUP_CONCAT(T.REAL_NAME) 
						  								FROM IB_FILE_INFO T 
						  								
						  								WHERE T.FILE_CATEGORY = '00005' 
						  								AND OFFER_S_NB IN  ( SELECT S_NB FROM IB_REPLY WHERE MAIN_SNB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB))), '')
						  			 	) AS files	
									  
						FROM IB_COMMENT	A
			            
			             WHERE 1=1
			              <isNotEmpty prepend="AND" property="startDate">
			              		A.TM_DT BETWEEN #startDate# AND  #endDate# 
			              </isNotEmpty>
			              
			              <isNotEmpty prepend="AND" property="selectDate">
			              		DATE_FORMAT(A.TM_DT , '%Y-%m-%d') = #selectDate#
			              </isNotEmpty>
			              
			              <isNotEmpty prepend="AND" property="selectYM">
			              		DATE_FORMAT(A.TM_DT , '%Y-%m') = #selectYM#
			              </isNotEmpty>
			              
			              <isNotEmpty property="sabun">
			              		<isEmpty prepend="AND" property="sNb">
			              			A.NAME = (SELECT USR_NM FROM IB_STAFF WHERE SABUN = #sabun#)
			              			AND IF( A.MAIN_SNB != 0 ,EXISTS( SELECT 
									                1
									            FROM
									                IB_COMMENT
									            WHERE
									                S_NB = A.MAIN_SNB), 1=1)
			              		</isEmpty>
			              </isNotEmpty>
			              
			              <isNotEmpty prepend="AND" property="sNb">
								A.S_NB = #sNb# 
						  </isNotEmpty>
			              
			     	)AS AL
				)AS AL2	
				
				WHERE 1=1
				
				
				<isNotEmpty prepend="AND" property="memoKind">
					AL2.memoKind = #memoKind#
				</isNotEmpty>
				
				
				<isNotEmpty prepend="" property="srchTxt">
					<isNotEmpty prepend="AND" property="srchTxtType">
						<isEqual property="srchTxtType" compareValue="CONT">
							( AL2.COMMENT LIKE CONCAT('%', #srchTxt#, '%') OR AL2.COMMENTSREPLY LIKE CONCAT('%', #srchTxt#, '%') )
						</isEqual>
						<isEqual property="srchTxtType" compareValue="SEND">
							AL2.SENDNM LIKE CONCAT('%', #srchTxt#, '%')
						</isEqual>
						<isEqual property="srchTxtType" compareValue="RECV">
							AL2.REVNMS LIKE CONCAT('%', #srchTxt#, '%')
						</isEqual>
						<isEqual property="srchTxtType" compareValue="FILE">
							AL2.FILES LIKE CONCAT('%', #srchTxt#, '%')
						</isEqual>			
					</isNotEmpty>
					<isEmpty prepend="AND" property="srchTxtType">
						(
								( AL2.COMMENT like concat('%', #srchTxt#, '%') or AL2.COMMENTSREPLY LIKE CONCAT('%', #srchTxt#, '%') )
							OR
								AL2.SENDNM like concat('%', #srchTxt#, '%')
							OR
								AL2.REVNMS LIKE CONCAT('%', #srchTxt#, '%')
							OR
								AL2.FILES LIKE CONCAT('%', #srchTxt#, '%')
						)
					</isEmpty>
				</isNotEmpty>
				
				<isEqual prepend="AND" property="noRead" compareValue="Y">
					readStts = '00001'
				</isEqual>
		
		
		ORDER BY  
		
		<isEqual property="lastRepOrdr" compareValue="Y"> repLastDt desc,</isEqual>  
		
		tmDt DESC, sNb DESC
		
		<isNotEmpty property="limit">
			LIMIT #offset#, #limit#
		</isNotEmpty>
	
	
		/* work.getMemoListForMobile */
	</select>
	
	
	<!-- 메모리스트 (모바일 카운트)-->
	<select id="work.getMemoListForMobileCount" parameterClass="HashMap" resultClass="Integer">
		
		SELECT COUNT(*) FROM(
			SELECT AL2.*
			
			FROM(
				SELECT AL.*
					, (CASE WHEN AL.grpMemCnt = 1 THEN 'MEMO' WHEN AL.mainSnb = 0 THEN 'REV' ELSE 'SEND' END) AS memoKind
				
				FROM(	
			
							SELECT
										
								  A.S_NB			AS sNb
								, A.MAIN_SNB		AS mainSnb
								, A.STTS_CD			AS sttsCd
								, A.PRIVATE			AS private
								, A.IMPORTANCE		AS importance
								, A.NAME			AS name
								, (CASE WHEN A.PRIVATE='Y' THEN AES_DECRYPT(UNHEX(A.COMMENT), MD5(A.RG_ID)) ELSE IFNULL(A.comment,"-") END)	AS comment
								, A.MAJOR			AS major
								, A.RG_ID			AS rgId
								, A.UP_ID			AS upId
								, A.FRST_STTS_CD	AS frstReadStts		
								
								, DATE_FORMAT(A.TM_DT, '%Y-%m-%d')	AS tmDt
								
								, DATE_FORMAT(A.TM_DT, '%Y-%m-%d')	AS calDate
								
								, (SELECT COUNT(1) FROM IB_REPLY WHERE MAIN_SNB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB))+1 AS repCnt		
											  
								, (SELECT RG_DT FROM IB_REPLY WHERE MAIN_SNB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB)  ORDER BY S_NB DESC LIMIT 1) AS repLastDt
											  
								, (CASE WHEN A.MAIN_SNB = 0 
										THEN IFNULL((SELECT (CASE WHEN REP_SNB = 0 THEN '00002' ELSE STTS_CD END) FROM IB_REPLY WHERE MAIN_SNB = A.S_NB ORDER BY S_NB DESC LIMIT 1), '00002')
										ELSE A.STTS_CD	END
								   ) AS readStts	
								
								, IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB)  AS newMainSnb
								, (SELECT COUNT(1) FROM IB_COMMENT 
									WHERE MAIN_SNB  = IF(A.MAIN_SNB = 0 ,A.S_NB ,A.MAIN_SNB) 
											OR S_NB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB) 
								   ) AS grpMemCnt
								
								
								
								, (SELECT 
		                 						GROUP_CONCAT(NAME)
					                FROM
					                    IB_COMMENT
					                WHERE
					                    MAIN_SNB = IF(A.MAIN_SNB = 0,A.S_NB,A.MAIN_SNB)
					                        OR S_NB = IF(A.MAIN_SNB = 0, A.S_NB, A.MAIN_SNB)) AS grpMemNms
			   
								, IFNULL((SELECT NAME FROM IB_COMMENT WHERE S_NB = A.MAIN_SNB ),'') AS sendNm
								
								, IFNULL((SELECT NAME FROM IB_COMMENT WHERE MAIN_SNB = A.S_NB ORDER BY TM_DT ASC LIMIT 1),'') AS revNm
								
								, IFNULL((SELECT GROUP_CONCAT(NAME) FROM IB_COMMENT WHERE MAIN_SNB = A.S_NB),'') AS revNms
								
																					   
								
											  
								, (SELECT GROUP_CONCAT(COMMENT) FROM IB_REPLY WHERE MAIN_SNB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB)) AS commentsReply
											  
								, (SELECT COUNT(1) FROM IB_FILE_INFO 
									WHERE (FILE_CATEGORY = '00004' AND OFFER_S_NB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB) )
										 OR 
										  (FILE_CATEGORY = '00005' AND EXISTS ( SELECT 1 
																				FROM IB_REPLY 
																				
																				WHERE MAIN_SNB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB) 
																					  AND S_NB = OFFER_S_NB
																				)
										   )
											
									) AS fileCount
									
								 , 	CONCAT(
					  					IFNULL((SELECT GROUP_CONCAT(REAL_NAME) FROM IB_FILE_INFO WHERE FILE_CATEGORY = '00004' AND OFFER_S_NB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB) ),'')
					  					,
					  					IFNULL((SELECT GROUP_CONCAT(T.REAL_NAME) 
					  								FROM IB_FILE_INFO T 
					  								
					  								WHERE T.FILE_CATEGORY = '00005' 
					  								AND OFFER_S_NB IN ( SELECT S_NB FROM IB_REPLY WHERE MAIN_SNB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB))), '')
					  			 	) AS files	
											  
							 FROM IB_COMMENT	A	  
							
				             WHERE 1=1
				              <isNotEmpty prepend="AND" property="startDate">
				              		A.TM_DT BETWEEN #startDate# AND  #endDate# 
				              </isNotEmpty>
				              
				              <isNotEmpty prepend="AND" property="selectDate">
				              		DATE_FORMAT(A.TM_DT , '%Y-%m-%d') = #selectDate#
				              </isNotEmpty>
				              
				              <isNotEmpty prepend="AND" property="selectYM">
				              		DATE_FORMAT(A.TM_DT , '%Y-%m') = #selectYM#
				              </isNotEmpty>
				              
				              <isNotEmpty property="sabun">
				              		<isEmpty prepend="AND" property="sNb">
				              			A.NAME = (SELECT USR_NM FROM IB_STAFF WHERE SABUN = #sabun#)
				              		</isEmpty>
				              </isNotEmpty>
				              
				              <isNotEmpty prepend="AND" property="sNb">
									A.S_NB = #sNb# 
							  </isNotEmpty>
				              
				     )AS AL
				     
				)AS AL2     
					
				WHERE 1=1
				
				
				<isNotEmpty prepend="AND" property="memoKind">
					AL2.memoKind = #memoKind#
				</isNotEmpty>
			
				
				<isNotEmpty prepend="" property="srchTxt">
					<isNotEmpty prepend="AND" property="srchTxtType">
						<isEqual property="srchTxtType" compareValue="CONT">
							( AL2.COMMENT LIKE CONCAT('%', #srchTxt#, '%') OR AL2.COMMENTSREPLY LIKE CONCAT('%', #srchTxt#, '%') )
						</isEqual>
						<isEqual property="srchTxtType" compareValue="SEND">
							AL2.SENDNM LIKE CONCAT('%', #srchTxt#, '%')
						</isEqual>
						<isEqual property="srchTxtType" compareValue="RECV">
							AL2.REVNMS LIKE CONCAT('%', #srchTxt#, '%')
						</isEqual>
						<isEqual property="srchTxtType" compareValue="FILE">
							AL2.FILES LIKE CONCAT('%', #srchTxt#, '%')
						</isEqual>			
					</isNotEmpty>
					<isEmpty prepend="AND" property="srchTxtType">
						(
								( AL2.COMMENT LIKE CONCAT('%', #srchTxt#, '%') OR AL2.COMMENTSREPLY LIKE CONCAT('%', #srchTxt#, '%') )
							OR
								AL2.SENDNM LIKE CONCAT('%', #srchTxt#, '%')
							OR
								AL2.REVNMS LIKE CONCAT('%', #srchTxt#, '%')
							OR
								AL2.FILES LIKE CONCAT('%', #srchTxt#, '%') 
						)
					</isEmpty>
				</isNotEmpty>
				
				<isEqual prepend="AND" property="noRead" compareValue="Y">
					AL2.readStts = '00001'
				</isEqual>
			
		)AS T
	
	
		/* work.getMemoListForMobileCount */
	</select>
	
	<!-- 댓글 -->
	<select id="work.getReplyInfo" parameterClass="HashMap" resultClass="HashMap">		
		select 
			    S_NB 		AS 	id
			  , MAIN_SNB 	AS mainSnb  
			  , NAME		AS 	name 	
			  , COMMENT 	AS	comment
			  , DATE_FORMAT(TM_DT, '%Y-%m-%d') AS dt
			  ,'' 			AS isFile
			  ,'' 			AS mkNm
			  
			  ,''			AS resendDate			<!-- 재전송할 날짜 -->
			  
		FROM IB_REPLY
		WHERE 1=1
		  AND S_NB = #mainSnb#
			
		/* work.getReplyInfo */
	</select>
	
	<!-- 메모 등록  -->
	<insert id="work.insertMemoNew">
			
			INSERT INTO IB_COMMENT
				  ( 
				  	NAME
				  , MAIN_SNB
				  , COMMENT
				  , IMPORTANCE
				  , PRIVATE
				  , MAJOR
				  , STTS_CD
				  , TM_DT
				  , FRST_STTS_CD
				  , RG_DT
				  , UP_DT
				  , RG_ID
				  , UP_ID
				  , MEMO_TYPE
		 ) VALUES ( 
		 			(SELECT USR_NM FROM IB_STAFF WHERE SABUN = #memoSndSabun# ORDER BY S_NB DESC LIMIT 1 )
				  , #mainSnb#
				  , #comment#
				  , #importance#
				  , #priv#
				  , CASE WHEN #major# = '' OR #major# IS NULL THEN 'N' ELSE #major# END
				  , #sttsCd#
				  , #tmDt#
				  , #firSttsCd#
				  , NOW()
				  , NOW()
				  , #rgId#
				  , #rgId#
				  , #memoType#
				  )
		<selectKey keyProperty="sNb" resultClass="string">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	
		
	<!-- 메모 상세 보기(모바일 파일 수정시 오류가 잇어 새로만듬) -->
	<select id="work.getMemoMobileDetail" parameterClass="HashMap" resultClass="HashMap">
		
		SELECT K.*
		FROM (
	
			SELECT 
					S_NB 	  AS mainSnb
				  , NAME 	  AS name
				  , (CASE WHEN PRIVATE='Y' THEN AES_DECRYPT(UNHEX(COMMENT), MD5(RG_ID)) ELSE IFNULL(COMMENT,"-") END) AS comment
				  , DATE_FORMAT(RG_DT, '%Y-%m-%d %H:%i:%s') AS dt
				  , '' 		  AS isFile
				  , '' 		  AS mkNm
				  , S_NB 	  AS id
				  , '' 		  AS fileCategory
				  , '0' 	  AS fileSnb
				  
				  , 1 		  AS commentType
				  , S_NB 	  AS orderSnb
				  
			FROM IB_COMMENT
			WHERE 1=1
			  AND S_NB = #mainSnb#
			
			UNION ALL
			
			SELECT 
				     MAIN_SNB   AS mainSnb
				   , NAME		AS name
				   , COMMENT	AS comment
				   , DATE_FORMAT(RG_DT, '%Y-%m-%d %H:%i:%s') AS dt
				   , '' 		AS isFile
				   , '' 		AS mkNm
				   , S_NB 		AS id
				   , '' 		AS fileCategory
				   , '0' 		AS fileSnb
				   
				   , 3 		  	AS commentType
				   , S_NB 	  	AS orderSnb
				   
			FROM IB_REPLY
			WHERE 1=1
			  AND MAIN_SNB = #mainSnb#
			  
			UNION ALL
    
		    SELECT 
		    		  '' 		 AS mainSnb
		    		, (SELECT USR_NM FROM IB_STAFF WHERE USR_ID = A.RG_ID) AS name
		    		, A.REAL_NAME AS comment
		    		, DATE_FORMAT(RG_DT, '%Y-%m-%d %H:%i:%s') AS dt
		    	    , 'Y' 		 AS isFile
		    	    , A.MAKE_NAME  AS mkNm
		    	    , '' 		 AS id
		    	    , '00004' 	 AS fileCategory
		    	    , A.s_nb	 AS fileSnb
		    	    
		    	    , 2 		 AS commentType
				    , OFFER_S_NB AS orderSnb
			  
			 FROM IB_FILE_INFO A
			 WHERE 1=1
			   AND A.FILE_CATEGORY = '00004'
			   AND EXISTS (		
					SELECT 1
						FROM IB_COMMENT
					    WHERE S_NB = #mainSnb#
						 AND S_NB = A.OFFER_S_NB
				  )
		      
			UNION ALL
		    
		    SELECT 
		    		  '' 			AS mainSnb
		    		, (SELECT USR_NM FROM IB_STAFF WHERE USR_ID = A.RG_ID) AS name
		    		, A.REAL_NAME 	AS comment
		    		, DATE_FORMAT(RG_DT, '%Y-%m-%d %H:%i:%s') AS dt
		    	    , 'Y'			AS isFile
		    	  	, A.MAKE_NAME 	AS mkNm
		    	  	, '' 			AS id
		    	  	, '00005' 		AS fileCategory
		    	  	, A.s_nb 		AS fileSnb
		    	  
		    	    , 3 		   	AS commentType
				    , OFFER_S_NB 	AS orderSnb
			  
			  FROM IB_FILE_INFO A
			  WHERE 1=1
			   AND A.FILE_CATEGORY = '00005'
			   AND EXISTS (
					SELECT 1
						FROM IB_REPLY
					   WHERE MAIN_SNB = #mainSnb#
						 AND S_NB = A.OFFER_S_NB
				  )
			  
		) K
		
		ORDER BY K.COMMENTTYPE ASC, K.orderSnb ASC, K.dt ASC
		
		/* work.getMemoMobileDetail */
	</select>
	
	<!-- 문자전송을 위한 정보  -->
	<select id="work.getInfoForSendSms" parameterClass="HashMap" resultClass="HashMap">		
		
		SELECT 
			
			   DATE_FORMAT(TM_DT, '%Y-%m-%d') AS tmDt
			  ,GROUP_CONCAT(name)			  AS entryNameList
			  ,GROUP_CONCAT(staff.sabun)	  AS entryUserList
			  ,comment			 			  AS orgComment
			  
			  
		FROM IB_COMMENT AS comment 
		LEFT OUTER JOIN IB_STAFF  AS staff ON comment.NAME = staff.USR_NM 
		
		WHERE 1=1
		  AND 
        
        <isEmpty property="all">
        	MAIN_SNB = #memoSnb#
        </isEmpty> 
          
        <isNotEmpty property="all">
        	(MAIN_SNB = #memoSnb# OR comment.S_NB = #memoSnb#)
        </isNotEmpty>   
        	
		/* work.getInfoForSendSms */
	</select>
	
	
	<!-- 참가자 추가 등록 -->
	<insert id="work.insertAddEntryMemo">
		
			INSERT INTO IB_COMMENT
				  ( NAME
				  , MAIN_SNB
				  , COMMENT
				  , IMPORTANCE
				  , PRIVATE
				  , MAJOR
				  , STTS_CD
				  , TM_DT
				  , RG_DT
				  , UP_DT
				  , RG_ID
				  , UP_ID
				  , MEMO_TYPE
				  
		 ) SELECT 
					(SELECT USR_NM FROM IB_STAFF WHERE SABUN = #memoSndSabun# ORDER BY S_NB DESC LIMIT 1 )
				  , #mainSnb#
				  , COMMENT
				  , IMPORTANCE
				  , PRIVATE
				  , MAJOR
				  , '00001'
				  , TM_DT
				  , NOW()
				  , NOW()
				  , RG_ID
				  , RG_ID
				  , MEMO_TYPE
				  
				  
				  FROM IB_COMMENT WHERE S_NB = #mainSnb#
				  
		<selectKey keyProperty="sNb" resultClass="string">
			SELECT LAST_INSERT_ID()
		</selectKey>		  
	
	</insert>
	
	<!-- 중요도 일괄수정 -->
	<update id="work.updateImportance">
		UPDATE IB_COMMENT
			SET
				 IMPORTANCE  =  #importance#
				
			
			WHERE 1=1
			AND 
			
			(CASE
					WHEN #memoSnb# = '' THEN FALSE
					WHEN #memoSnb# = '0' THEN FALSE			        
			        ELSE (S_NB =  #memoSnb# OR MAIN_SNB  =  #memoSnb#)
				END
			  )
		
	</update>
	
	<!-- 메모 첫글 정보 -->
	<select id="work.getFirstCommentInfo" parameterClass="HashMap" resultClass="HashMap">		
		SELECT 
		        S_NB 		AS sNb 
			  , MAIN_SNB 	AS mainSnb
			  , NAME 
			  , (CASE WHEN PRIVATE='Y' THEN AES_DECRYPT(UNHEX(COMMENT), MD5(RG_ID)) ELSE IFNULL(COMMENT,"-") END) AS	comment
			  , IMPORTANCE 	AS importance
			  , PRIVATE 	AS private
			  , MEMO_TYPE 	AS memoType
			  , RG_ID		AS rgId
			  , DATE_FORMAT(TM_DT,'%Y-%m-%d')	AS tmDt
		
			  
		FROM IB_COMMENT
		WHERE 1=1
		 <isEmpty prepend="AND" property="mainSnb">
		 		S_NB	= #sNb#
		 </isEmpty>
		 <isNotEmpty prepend="AND" property="mainSnb">
		 		MAIN_SNB = #mainSnb# ORDER BY UP_DT DESC LIMIT 1
		 </isNotEmpty>
		 	
		/* work.getFirstCommentInfo */
	</select>
	
	<!-- 메모 첫글 확인 갯수 -->
	<select id="work.getCommentFirstReadCount" parameterClass="HashMap" resultClass="Integer">		
		SELECT 
		      COUNT(*)
		
		FROM IB_COMMENT
		WHERE 1=1
		 	AND MAIN_SNB = #sNb#
		 	AND FRST_STTS_CD = '00002'
		
		 
		 	
		/* work.getCommentFirstReadCount */
	</select>
	
	<!-- 오늘 신규 메모 -->
	<select id="work.getTodayNewMemoList" parameterClass="HashMap" resultClass="HashMap">		
		SELECT 
			
			  A.S_NB			AS sNb
			, A.MAIN_SNB		AS mainSnb
			, A.STTS_CD			AS sttsCd
			, A.PRIVATE			AS private
			, A.IMPORTANCE		AS importance
			, A.NAME			AS name	
			
			, IF(A.MEMO_TYPE != '00010', 
					(SELECT CD_NM FROM IB_COMMON_CODE WHERE MENU_CD = '00026' AND DTAIL_CD = A.MEMO_TYPE),''
				
				)	AS memoTypeNm
			
			, DATE_FORMAT(A.TM_DT,'%Y-%m-%d')	AS tmDt	
			
			, LEFT((CASE WHEN A.PRIVATE='Y' THEN AES_DECRYPT(UNHEX(A.COMMENT), MD5(A.RG_ID)) ELSE IFNULL(A.comment,"-") END), 60)	AS comment
			, (SELECT COUNT(1) FROM IB_REPLY WHERE MAIN_SNB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB))+1 AS repCnt	
			
			, (CASE WHEN A.MAIN_SNB = 0 
					THEN IFNULL((SELECT (CASE WHEN REP_SNB = 0 THEN '00002' ELSE STTS_CD END) FROM IB_REPLY WHERE MAIN_SNB = A.S_NB ORDER BY S_NB DESC LIMIT 1), '00002')
					ELSE A.STTS_CD	END
			   ) AS readStts
			
			, (SELECT COUNT(1) FROM IB_COMMENT 
						WHERE MAIN_SNB  = IF(A.MAIN_SNB = 0 ,A.S_NB ,A.MAIN_SNB) 
								OR S_NB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB) 
			   ) AS grpMemCnt
			   
			, IFNULL((SELECT NAME FROM IB_COMMENT WHERE S_NB = A.MAIN_SNB ),'') AS sendNm
			, IFNULL((SELECT NAME FROM IB_COMMENT WHERE MAIN_SNB = A.S_NB ORDER BY TM_DT ASC LIMIT 1),'') AS revNm   
			
			, (SELECT COUNT(1) FROM IB_FILE_INFO 
						WHERE (FILE_CATEGORY = '00004' AND OFFER_S_NB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB) )
							 OR 
							  (FILE_CATEGORY = '00005' AND EXISTS ( SELECT 1 
																	FROM IB_REPLY 
																	
																	WHERE MAIN_SNB = IF(A.MAIN_SNB = 0 ,a.S_NB ,A.MAIN_SNB) 
																		  AND S_NB = OFFER_S_NB
																	)
							   )
				
				) AS fileCount
			
		FROM IB_COMMENT AS A 
		WHERE 
			(A.NAME = (SELECT 
							USR_NM
						FROM
							IB_STAFF
						WHERE
							SABUN = #sabun#)
			)
			
			AND				
			(			
				<!-- 내가신규로 추가된 건 -->
				(DATE_FORMAT(A.RG_DT,'%Y-%m-%d') = DATE_FORMAT(now(),'%Y-%m-%d') 
					AND 
					(SELECT 
						DATE_FORMAT(B.RG_DT,'%Y-%m-%d') 
			            
			            FROM IB_COMMENT AS B  
			            WHERE B.S_NB  = IF(A.MAIN_SNB =0, A.s_nb, A.MAIN_SNB)
			            
					) != DATE_FORMAT(A.RG_DT,'%Y-%m-%d')
			        
			      
			        AND TM_DT != DATE_FORMAT(NOW(),'%Y-%m-%d') 
			 
			    )
		    
	  			OR
	  			
		   		<!-- 신규 댓글 추가된 건 -->
				(
					 IF(A.MAIN_SNB = 0, A.S_NB, A.MAIN_SNB)  IN (
			
					 	SELECT MAIN_SNB
					 	
					 	FROM IB_REPLY AS R 
					 	WHERE DATE_FORMAT(R.RG_DT,'%Y-%m-%d') = DATE_FORMAT(NOW(),'%Y-%m-%d') 
					 		AND R.RG_ID != #rgId#
				 
					)
					AND A.TM_DT &lt; DATE_FORMAT(NOW(),'%Y-%m-%d')
			       
			    )
			)  

		ORDER BY TM_DT DESC ;
		 	
		/*work.getTodayNewMemoList*/
	</select>
	
		
	<!-- 회사명 수정 -->
	<update id="work.modifyCpnNm">
		UPDATE IB_COMPANY
		   SET
			  CPN_NM 	=  #cpnNm#
			
			, UP_DT     =  now()
			, UP_ID     =  #rgId#
			
		WHERE S_NB      =  #cpnSnb#
		
		/* work.modifyCpnNm */
	</update>
	
	
	<!-- 회사 간단 조회 -->
	<select id="work.selectSimpleCompanyInfo" parameterClass="HashMap" resultClass="HashMap">		
		SELECT S_NB		AS cpnSnb
			  ,CPN_NM	AS cpnNm
		
		FROM IB_COMPANY
		WHERE 1=1
		 	AND S_NB = #cpnSnb#		 
		 	
		/* work.selectSimpleCompanyInfo */
	</select>
	
	<!-- 투자사(경쟁사) 등록 20170822 ksm -->
	<insert id="work.insertInvestorCompany" parameterClass="HashMap">
		INSERT INTO BASE.BS_INVESTOR_COMPANY (
				    CPN_ID
				  , CREATED_BY
				  , CREATE_DATE
				  , UPDATED_BY
				  , UPDATE_DATE
		)
		VALUES (
				    #cpnId#
				  , #rgId#
				  , now()
				  , #rgId#
				  , now()
		)
			
		/* work.insertInvestorCompany */
	</insert>
	
	<!-- 투자사(경쟁사) 등록시 중복 체크 20170825 ksm-->
	<select id="work.selectInvestorCompany" parameterClass="HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1)
		
		FROM BASE.BS_INVESTOR_COMPANY
		WHERE CPN_ID = #cpnId#
		AND USE_YN = 'Y'		
		
		/* work.selectInvestorCompany */
	</select>
	
	<!-- 투자사(경쟁사) 담당자 검색  20170823 ksm -->
	<select id="work.selectInvestorManager" parameterClass="HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1)
		
		FROM BASE.BS_INVESTOR_COMPANY_MANAGER
		WHERE INVESTOR_ID	= #investorId#		 
		AND USE_YN = 'Y'
		 	
		/* work.selectInvestorManager */
	</select>
	
	<!-- 투자사(경쟁사) 담당자 등록  20170823 ksm -->
	<insert id="work.insertInvestorManager" parameterClass="HashMap">
		INSERT INTO BASE.BS_INVESTOR_COMPANY_MANAGER (
				    INVESTOR_ID
				  , MANAGER_NM
				  , CREATED_BY
				  , CREATE_DATE
				  , UPDATED_BY
				  , UPDATE_DATE
		)
		VALUES (
				    #investorId#
				  , #managerNm#
				  , #rgId#
				  , now()
				  , #rgId#
				  , now()
		)
			
		/* work.insertInvestorManager */
	</insert>
	
	<!-- 투자사(경쟁사) 담당자명 수정 20170823 ksm -->
	<update id="work.modifyInvestorManager" parameterClass="HashMap">
		UPDATE BASE.BS_INVESTOR_COMPANY_MANAGER
		   SET
			  MANAGER_NM 	=  #managerNm#
			, UPDATED_BY    =  #rgId#
			, UPDATE_DATE   =  now()
			
		WHERE INVESTOR_ID   =  #investorId#
		
		/* work.modifyInvestorManager */
	</update>
	
	<!-- 투자사(경쟁사) 삭제 20170912 ksm -->
	<update id="work.delInvestorCompany" parameterClass="HashMap">
		UPDATE BASE.BS_INVESTOR_COMPANY
		   SET
			  USE_YN 		=  'N'
			, UPDATED_BY    =  #rgId#
			, UPDATE_DATE   =  now()
			
		WHERE INVESTOR_ID   =  #investorId#
		
		/* work.delInvestorCompany */
	</update>
	
	<!-- 딜리스트 (모바일 조건 추가로 인한 신규 구현) -->
	<select id="work.selectOfferAllDealListForMobile" parameterClass="workVO" resultClass="HashMap">
		SELECT  AL.* 
			
		FROM(
		
			SELECT
				  A.S_NB								AS sNb
				, A.MIDDLE_OFFER_CD 					AS middleOfferCd
				, C.CD_NM 								AS middleOfferNm
				, B.CD_NM 								AS offerNm
				, DATE_FORMAT(A.TM_DT,'%Y-%m-%d') 		AS tmDt
				, DATE_FORMAT(A.DUE_DT,'%Y-%m-%d')		AS dueDt
				, DATEDIFF(now(),DATE(A.DUE_DT))		AS diffDt
				, A.RG_NM 								AS rgNm
				, (SELECT PHN_1 FROM IB_STAFF WHERE USR_ID = A.RG_ID)	AS rgUserPhn
				, F.CPN_NM 								AS cpnNm
				
				, CASE WHEN A.CPN_ID = '951769' THEN 'Q' WHEN SUBSTRING(F.A_CPN_ID,1,1) = 'A' THEN 'Q' ELSE SUBSTRING(F.CPN_ID,1,1) END	as  cpnStts
				
				, D.S_NB								AS cstSnb
				, D.CST_NM 								AS cstNm
				, E.CPN_NM 								AS cstCpnNm
				, concat(substring(A.MEMO,1,10),'...')	AS memo
				, concat(substring(A.MEMO,1,40),(case when length(A.MEMO)>40 then '...' else '' end))		as  memoLong
				
				, A.CATEGORY_CD 						AS categoryCd
				, (SELECT TEMP
					 FROM IB_COMMON_CODE
					WHERE MENU_CD = '00005'
					  AND DTAIL_CD = A.CATEGORY_CD ) 	AS categoryNm
				
				, IFNULL(A.PRICE,'')					AS price
				, IFNULL(A.INVEST_PRICE,'') 	   		AS investPrice
				, A.PROGRESS_CD 						AS progressCd
				, Cmm.CD_NM 	 						AS progressNm
				, A.OPINION 							AS investOpinion
				, A.SELL_BUY 							AS sellBuy
				, Cm2.CD_NM 							AS cpnTypeCdNm
				, A.CPN_TYPE 							AS cpnType
				, mcc.CPN_NM 							AS matchCpnNm
				, mnaS.STAFF_NM 						AS usrNm
				, COUNT(TT.s_nb)						AS analysis
				, (SELECT RG_NM FROM IB_OFFER WHERE S_NB = A.RECOMMEND_SNB)		AS recommendNm
				
				  
			<![CDATA[
				, (SELECT COUNT(S_NB)
				 	 FROM IB_RECOMMEND_OPINION
					WHERE CATEGORY = '00001'
					  AND OFFER_SNB = A.S_NB
					  AND date(RG_DT) >= date(A.RG_DT)) 						AS opinion
				, (SELECT MAX(RG_DT)
				 	 FROM IB_RECOMMEND_OPINION
					WHERE CATEGORY = '00001'
					  AND OFFER_SNB = A.S_NB
					  AND RG_DT >= CURDATE() - INTERVAL 1 DAY) 					AS tmpNum1
				, CASE WHEN A.RG_DT >= CURDATE() - INTERVAL 1 DAY THEN A.RG_DT ELSE '' END 	as tmpNum2
				, (SELECT COUNT(1)
						FROM IB_FILE_INFO
						WHERE FILE_CATEGORY = '00000'
						  AND A.S_NB = OFFER_S_NB)								AS fileCnt
				, (SELECT COUNT(1)
						FROM IB_FILE_INFO subA
						LEFT JOIN IB_RECOMMEND_OPINION subB ON subB.S_NB = subA.OFFER_S_NB
						WHERE FILE_CATEGORY = '00002'
						  AND A.S_NB = subB.OFFER_SNB)							AS commentFileCnt
						  
				, A.INFO_LEVEL							as infoLevel
				, A.RG_ID								as rgId
				
				]]>
				
				,(SELECT DIVISION FROM IB_STAFF WHERE USR_ID = A.RG_ID)			AS division
				, F.CPN_ID														AS cpnId
				, F.A_CPN_ID													AS aCpnId
				
				
				, IFNULL((SELECT USR_NM FROM synergymain.IB_STAFF WHERE S_NB =
					(SELECT USER_ID FROM BASE.BS_ANAL_USER WHERE OFFER_ID = A.S_NB AND DELETE_FLAG ='N' ORDER BY CREATE_DATE ASC LIMIT 1)
				  ),'')	AS analUserFirst
				, IFNULL((SELECT COUNT(*) FROM BASE.BS_ANAL_USER WHERE OFFER_ID = A.S_NB AND DELETE_FLAG ='N'),0) AS analUserCount
				
				
				,IFNULL(getAnalStatus(A.S_NB),0) AS analEachCount
				
				,(
					CASE WHEN A.CATEGORY_CD = '00008' THEN '1|1'
					ELSE IFNULL(getAnalysisValSimple(A.S_NB),'0|0')
					END
				
				) AS analVal
			 	
				,(SELECT DEAL_SMS FROM IB_STAFF WHERE USR_ID = A.RG_ID)	AS dealSms			
				,(SELECT PHN_1 FROM IB_STAFF WHERE USR_ID = A.RG_ID)	AS rgStaffPhn1
								
				<![CDATA[ 
						  
			FROM IB_OFFER A
	            LEFT JOIN IB_COMMON_CODE B ON (B.MENU_CD = '00002' AND B.DTAIL_CD = A.OFFER_CD)
	            LEFT JOIN IB_COMMON_CODE C ON (C.MENU_CD = '00011' AND C.DTAIL_CD = A.MIDDLE_OFFER_CD)
	            LEFT JOIN IB_COMMON_CODE Cmm ON (Cmm.MENU_CD = '00004' AND Cmm.DTAIL_CD = A.PROGRESS_CD)
	            LEFT JOIN IB_COMMON_CODE Cm2 ON (Cm2.MENU_CD = '00017' AND Cm2.DTAIL_CD = A.CPN_TYPE_CD)
	            LEFT JOIN IB_CUSTOMER D ON D.S_NB = A.CST_ID
	            LEFT JOIN IB_COMPANY E ON E.CPN_ID = D.CPN_ID
	            LEFT JOIN IB_COMPANY F ON F.CPN_ID = A.CPN_ID
	            LEFT JOIN IB_CUSTOMER G ON G.S_NB = A.INFO_PROVIDER
	            LEFT JOIN IB_CUSTOMER K ON K.S_NB = A.COWORKER
	            LEFT JOIN IB_COMPANY H ON H.CPN_ID = G.CPN_ID
	            LEFT JOIN IB_CUSTOMER I ON I.S_NB = A.SUPPORTER
          		LEFT JOIN IB_JOINT_PROGRESS L ON L.OFFER_SNB = A.S_NB
          		LEFT JOIN (
							select
									imcc.offer_snb
									, GROUP_CONCAT(Mc.cpn_nm SEPARATOR '<br/>,') cpn_nm
							from  ib_offer_mna_match_cpn imcc
							LEFT JOIN IB_COMPANY Mc ON Mc.CPN_ID = imcc.cpn_id
							group by imcc.offer_snb
							)mcc ON mcc.OFFER_SNB = A.S_NB
	            LEFT JOIN ib_offer_mna_staff mnaS ON mnaS.OFFER_SNB = A.S_NB
	      ]]>
	            
			  	LEFT OUTER JOIN 
			  		(
			  		select KK.*
			  		  from(
			  		
				           SELECT s_nb, CPN_ID, tm_dt
				             FROM IB_OFFER
				            WHERE OFFER_CD = '00004'
				  			  
				  			union
				  		  
				          	select m.s_nb, cpn_id
				          			,m.tm_dt
							  from ib_offer		m
							  join ib_offer_info	n on m.s_nb = n.offer_snb and n.category = '00008' <!--  m&a -->
							 where offer_cd in ('00002', '00003')
							   
				           ) KK
			         ) TT on TT.cpn_id = a.cpn_id
			         	 
			         	  and date(date_add(A.TM_DT, interval -7 day)) &lt;= date(TT.TM_DT)
		        
		           
			WHERE 1=1
			  		
			<!-- 기간검색 -->
			<isNotEmpty prepend="AND" property="dealSearchStartDate">
				DATE_FORMAT(A.TM_DT, '%Y-%m-%d') BETWEEN #dealSearchStartDate# AND #dealSearchEndDate#
			</isNotEmpty>
		
			<!-- 등록자 -->
			<isNotEmpty prepend="AND" property="searchUserArr">
				<iterate prepend="A.RG_ID IN " property="searchUserArr" open="(" close=")" conjunction=",">
					#searchUserArr[]#
				</iterate>
			</isNotEmpty>
			
			
			<isEqual prepend="" property="sorting" compareValue="00000">					<!-- 탭 '전체' -->
				
				AND	A.MIDDLE_OFFER_CD IN ('00001', '00002', '00003', '00004', '00005')
				
			</isEqual>
			
			<!-- 탭 '전체' 이외의 탭 -->	
			<isNotEqual prepend="" property="sorting" compareValue="00000">					
		
				<isNotEmpty prepend="AND" property="middleOfferCd">
					<isEqual prepend="" property="middleOfferCd" compareValue="00004">		<!-- 제안중 -->
						A.MIDDLE_OFFER_CD IN ('00004','00005') 	
						
						<isEqual prepend="" property="isEtc" compareValue="Y">				<!-- 제안중00004 이면서 -->
							AND A.CATEGORY_CD NOT IN ('00001','00002','00003','00015')	
						</isEqual>
						
					</isEqual>
					
					<isNotEqual prepend="" property="middleOfferCd" compareValue="00004">	
						A.MIDDLE_OFFER_CD = #middleOfferCd# 	
					</isNotEqual>
					
					<![CDATA[ AND A.CATEGORY_CD IS NOT NULL AND  A.CATEGORY_CD <> '' ]]>
				</isNotEmpty>
				
				<isEmpty prepend="AND" property="middleOfferCd">
					A.MIDDLE_OFFER_CD IN ('00001', '00002', '00003')	
				</isEmpty>
				
				<!-- 딜 제안중이 아닐때 -->
				<isNotEqual prepend="" property="sorting" compareValue="null">
					
					<!--  메자닌인 경우 -->
					<isEqual prepend="AND" property="sorting" compareValue="00001"> 
							A.CATEGORY_CD IN ('00001','00002','00003','00015')		<!-- CB(00001), BW(00002), EB(00003), RCPS(00015) -->
						
						<isEqual prepend="AND" property="listed" compareValue="N">						
							(F.CPN_ID NOT LIKE 'A%' AND (F.A_CPN_ID IS NULL OR F.A_CPN_ID NOT LIKE 'A%'))		<!-- 비상장 -->
						</isEqual>
						<isNotEqual prepend="AND" property="listed" compareValue="N">						
							(F.CPN_ID LIKE 'A%' OR F.A_CPN_ID LIKE 'A%')	<!-- 상장 -->
						</isNotEqual>					
					</isEqual>
					<!--  //메자닌인 경우// -->
					
					<!-- 메자닌이 아닌경우 -->
					<isNotEqual prepend="AND" property="sorting" compareValue="00001"> 
						<isNotEqual prepend="" property="tmpNum2" compareValue="statsPrivateList">
							<isNotEqual property="sorting" compareValue="0">
								<isNotEqual property="sorting" compareValue="00014">							
									<isEqual property="sorting" compareValue="00003">	<!-- 00003.. 유증(00004), 블록딜(00005), 실권주(00006), 워런트(00007) -->
										A.CATEGORY_CD IN ('00004','00005','00006','00007')	
									</isEqual>
									<isNotEqual property="sorting" compareValue="00003">
										A.CATEGORY_CD = #sorting#	
									</isNotEqual>
								</isNotEqual>
								<isEqual property="sorting" compareValue="00014">
										A.CATEGORY_CD IN ('00011','00014')	
								</isEqual>
							</isNotEqual>
							<isEqual property="sorting" compareValue="0">
									A.CATEGORY_CD IN (
											select	group_concat(cmm.dtail_cd SEPARATOR ',')
											from ib_staff_allow_code alw
											left join ib_staff st on st.permission = alw.perm_code
											left join IB_COMMON_CODE cmm on cmm.s_nb = alw.code_snb
											where st.usr_id = #rgId#
											and cmm.menu_cd = '00005'
											group by cmm.menu_cd) 
							</isEqual>
						</isNotEqual>
						<isEqual prepend="" property="tmpNum2" compareValue="statsPrivateList">
							<isNotEmpty property="tmpNum1">
								A.RG_NM = #tmpNum1# 	
							</isNotEmpty>
						</isEqual>
					</isNotEqual>
					<!-- //메자닌이 아닌경우// -->
					
					
				</isNotEqual>
				<!-- //딜 제안중이 아닐때// -->
				
			</isNotEqual>
			<!--// 탭 '전체' 이외의 탭 //-->
			
			
			AND
			<!-- 진행상태 -->	
			(CASE
				WHEN A.CATEGORY_CD = '00008' THEN
				<isNotEmpty property="dealMNASearchStatus">
					 A.PROGRESS_CD IN ($dealMNASearchStatus$)
				</isNotEmpty>
				<isEmpty property="dealMNASearchStatus">	<!-- 진행 전체 -->
					 1 = 1
				</isEmpty>
				ELSE
				<isNotEmpty property="dealSearchStatus">
					 A.PROGRESS_CD IN ($dealSearchStatus$)
				</isNotEmpty>
				<isEmpty property="dealSearchStatus">		<!-- 진행 전체 -->
					 1 = 1
				</isEmpty>
				
			END)
			<!-- //진행상태// -->
			
			<!-- 회사명 검색 -->
			<isNotEmpty property="search">
				AND	(F.CPN_NM like concat('%', #search# ,'%') OR A.MEMO like concat('%', #search# ,'%')) 
			</isNotEmpty>
			<!-- //회사명 검색// -->
			
			<isEmpty property="search">
				<isEqual prepend="" property="sorting" compareValue="00000">
					<isEqual prepend="" property="allDealYn" compareValue="N">
						AND A.CATEGORY_CD IN ('00012','00016')
					</isEqual>
				</isEqual>	
			</isEmpty>
			
			
			
			
			GROUP BY A.S_NB
			ORDER BY 
			
			<isNotEqual property="sorting" compareValue="00008">
				
				(CASE
					WHEN A.CATEGORY_CD = '00008' THEN '00001'
					ELSE A.PROGRESS_CD
				 END) ASC,
			</isNotEqual>
			
			<isEqual prepend="" property="total" compareValue="sellBuy">
				A.SELL_BUY ASC ,
			</isEqual>
				
				
				CASE WHEN A.DUE_DT IS NULL THEN 1 ELSE 0 END, A.TM_DT DESC
		) AS AL
		
		WHERE 1 = 1
		
		<!-- 투자 심의 점수 -->
		<isNotEmpty property="dealAnalStartPrice">
		
			AND #dealAnalStartPrice# &lt;= IFNULL((SUBSTRING_INDEX(AL.analVal, '|', -1) / SUBSTRING_INDEX(AL.analVal, '|', 1)),'0.0')
		</isNotEmpty>
		
		<isNotEmpty property="dealAnalEndPrice">
			
			AND #dealAnalEndPrice# &gt;= IFNULL((SUBSTRING_INDEX(AL.analVal, '|', -1) / SUBSTRING_INDEX(AL.analVal, '|', 1)),'0.0')
		</isNotEmpty>
		<!-- //투자 심의 점수// -->
				
		/* work.selectOfferAllDealListForMobile */
	
	</select>
	
	<!-- 딜 코멘트 리스트 -->
	<select id="work.selectDealCommentList" parameterClass="HashMap" resultClass="HashMap">
		SELECT AL.* FROM(
			SELECT
					  OF.S_NB					AS  sNb
					, RP.S_NB					AS  commentSnb
					, (SELECT USR_NM FROM IB_STAFF WHERE RP.RG_ID = USR_ID)		AS  rgNm
					, OF.MIDDLE_OFFER_CD 		AS  middleOfferCd
					, C.CD_NM 					AS  middleOfferNm
					, B.CD_NM 					AS  offerNm
					, DATE_FORMAT(RP.RG_DT,'%Y-%m-%d') 	AS  tmDt
					, OF.PRICE 					AS  price
					, OF.INVEST_PRICE 	   		AS  investPrice
					, OF.PROGRESS_CD 			AS  progressCd
					, OF.CATEGORY_CD 			AS  categoryCd
					, (SELECT TEMP FROM IB_COMMON_CODE WHERE MENU_CD = '00005' AND DTAIL_CD = OF.CATEGORY_CD) AS categoryNm
					, RP.COMMENT 				AS  memo
					, OF.CPN_ID					AS  cpnId
					
					, (SELECT A_CPN_ID FROM IB_COMPANY WHERE CPN_ID = OF.CPN_ID)			AS  aCpnId
				
					, (SELECT CPN_NM FROM IB_COMPANY WHERE CPN_ID = OF.CPN_ID)				AS  cpnNm
				
					, (SELECT GROUP_CONCAT(subA.REAL_NAME)
							FROM IB_FILE_INFO subA
							WHERE FILE_CATEGORY = '00002' AND RP.S_NB = subA.OFFER_S_NB )	AS commentFileNm		  
							  
				FROM IB_RECOMMEND_OPINION RP
					LEFT JOIN IB_OFFER OF ON OF.S_NB = RP.OFFER_SNB
					LEFT JOIN IB_COMMON_CODE B ON (B.MENU_CD = '00002' AND B.DTAIL_CD = OF.OFFER_CD)
		            LEFT JOIN IB_COMMON_CODE C ON (C.MENU_CD = '00011' AND C.DTAIL_CD = OF.MIDDLE_OFFER_CD)
		         
					
				WHERE OF.S_NB IS NOT NULL
				
				<isNotEmpty property="dealCommentSearchStartDate">
					AND DATE_FORMAT(RP.RG_DT, '%Y-%m-%d') between #dealCommentSearchStartDate# AND #dealCommentSearchEndDate#
				</isNotEmpty>
				
				
				ORDER BY RP.RG_DT DESC
		)AS AL
		
		WHERE 1=1
		
		<isEqual prepend="" property="sorting" compareValue="00000">					<!-- 탭 '전체' -->
			AND middleOfferCd IN ('00001', '00002', '00003', '00004', '00005')
		</isEqual>
		
		<!-- 탭 '전체' 이외의 탭 -->	
		<isNotEqual prepend="" property="sorting" compareValue="00000">
			
			<isNotEmpty prepend="AND" property="middleOfferCd">
				
				<isEqual prepend="" property="middleOfferCd" compareValue="00004">		<!-- 제안중 -->
					middleOfferCd IN ('00004','00005') 	
				</isEqual>
				<isNotEqual prepend="" property="middleOfferCd" compareValue="00004">	
					middleOfferCd = #middleOfferCd# 	
				</isNotEqual>
				
				<![CDATA[ AND categoryCd IS NOT NULL AND categoryCd <> '' ]]>
			</isNotEmpty>	
			
			<isEmpty prepend="AND" property="middleOfferCd">
					middleOfferCd IN ('00001', '00002', '00003')	
			</isEmpty>
			
			<!-- 딜 제안중이 아닐때 -->
			<isNotEqual prepend="" property="sorting" compareValue="null">
				
				<!--  메자닌인 경우 -->
				<isEqual prepend="AND" property="sorting" compareValue="00001"> 
						categoryCd IN ('00001','00002','00003','00015')		<!-- CB(00001), BW(00002), EB(00003), RCPS(00015) -->
					
					<isEqual prepend="AND" property="listed" compareValue="N">						
						(cpnId NOT LIKE 'A%' AND (aCpnId IS NULL OR aCpnId NOT LIKE 'A%'))		<!-- 비상장 -->
					</isEqual>
					<isNotEqual prepend="AND" property="listed" compareValue="N">						
						(cpnId LIKE 'A%' OR aCpnId LIKE 'A%')	<!-- 상장 -->
					</isNotEqual>					
				</isEqual>
				<!--  //메자닌인 경우// -->
				
				<!-- 메자닌이 아닌경우 -->
				<isNotEqual prepend="AND" property="sorting" compareValue="00001"> 
					<isNotEqual prepend="" property="tmpNum2" compareValue="statsPrivateList">
						<isNotEqual property="sorting" compareValue="0">
							<isNotEqual property="sorting" compareValue="00014">							
								<isEqual property="sorting" compareValue="00003">	<!-- 00003.. 유증(00004), 블록딜(00005), 실권주(00006), 워런트(00007) -->
									categoryCd IN ('00004','00005','00006','00007')	
								</isEqual>
								<isNotEqual property="sorting" compareValue="00003">
									categoryCd = #sorting#	
								</isNotEqual>
							</isNotEqual>
							<isEqual property="sorting" compareValue="00014">
									categoryCd IN ('00011','00014')	
							</isEqual>
						</isNotEqual>
						
					</isNotEqual>
					
				</isNotEqual>
				<!-- //메자닌이 아닌경우// -->
			</isNotEqual>
			<!-- //딜 제안중이 아닐때// -->
		</isNotEqual>
		
		
		<!-- 검색 조건 -->
		<isNotEmpty property="dealCommentSearchTxt">
			
			<isEmpty property="dealCommentSearchType">									<!-- 검색조건 없을떄 -->
				AND (
					AL.cpnNm LIKE CONCAT('%', #dealCommentSearchTxt# ,'%') 				<!-- 회사명 -->
					OR AL.memo LIKE CONCAT('%', #dealCommentSearchTxt# ,'%')			<!-- 내용 -->
					OR AL.rgNm LIKE CONCAT('%', #dealCommentSearchTxt# ,'%')			<!-- 등록자 -->
					OR AL.commentFileNm LIKE CONCAT('%', #dealCommentSearchTxt# ,'%')	<!-- 파일명 -->
				)	
			</isEmpty>
			
			<isNotEmpty property="dealCommentSearchType">								<!-- 검색조건 있을떄 -->
				AND $dealCommentSearchType$ LIKE CONCAT('%', #dealCommentSearchTxt# ,'%')
			</isNotEmpty>
			
		</isNotEmpty>
		
		<isEqual prepend="" property="allDealYn" compareValue="N">
			AND categoryCd IN ('00012','00016')
		</isEqual>
		
		
		/* work.selectDealCommentList */
	</select>	
	
	<!-- 딜 갯수 -->
	<select id="work.getMainDealNCommentCount"  parameterClass="HashMap" resultClass="HashMap">
		
		SELECT  
		
		(	
			SELECT COUNT(*) 
			
			 FROM IB_OFFER
	
			 WHERE 1 = 1 AND	MIDDLE_OFFER_CD IN ('00001', '00002', '00003', '00004', '00005')
			
			<isNotEmpty property="date">	
				AND DATE_FORMAT(TM_DT, '%Y-%m-%d') = DATE_FORMAT(#date#, '%Y-%m-%d')
			</isNotEmpty>
			
			<isEqual prepend="" property="allDealYn" compareValue="N">	<!-- 탭 권한여부 -->
				AND CATEGORY_CD IN ('00012','00016')
			</isEqual>
		
		)AS dealCount
		
		,(
			SELECT COUNT(*) 
			
			 FROM IB_RECOMMEND_OPINION AS r
			 LEFT OUTER JOIN IB_OFFER AS of ON r.OFFER_SNB = of.S_NB 
	
			 WHERE 1 = 1 AND of.MIDDLE_OFFER_CD IN ('00001', '00002', '00003', '00004', '00005')
			
			<isNotEmpty property="date">	
				AND DATE_FORMAT(r.RG_DT, '%Y-%m-%d') = DATE_FORMAT(#date#, '%Y-%m-%d')
			</isNotEmpty>
			
			<isEqual prepend="" property="allDealYn" compareValue="N">	<!-- 탭 권한여부 -->
				AND of.CATEGORY_CD IN ('00012','00016')
			</isEqual>
			
		)AS dealCommentCount
		
		FROM DUAL
	</select>
	
	<!-- 오늘 등록된 딜 -->
	<select id="work.getTodayDeal"  parameterClass="HashMap" resultClass="HashMap">
		SELECT 
			
			 A.CATEGORY_CD			AS categoryCd
			,A.MIDDLE_OFFER_CD		AS middleOfferCd
			,F.CPN_ID				AS cpnId
			,(SELECT DTAIL_CD FROM IB_COMMON_CODE WHERE MENU_CD = '00005' AND DTAIL_CD = A.CATEGORY_CD) AS tabCd

		FROM  IB_OFFER A
		LEFT OUTER JOIN IB_COMPANY F ON F.CPN_ID = A.CPN_ID
		
		WHERE 
		DATE_FORMAT(A.TM_DT, '%Y-%m-%d')  = DATE_FORMAT(NOW(), '%Y-%m-%d')
				
	
	</select>
	
	<!-- 오늘 등록된 딜 코멘트 -->
	<select id="work.getTodayDealComment"  parameterClass="HashMap" resultClass="HashMap">
		SELECT 

			 OF.CATEGORY_CD 												AS categoryCd
			,OF.MIDDLE_OFFER_CD 											AS middleOfferCd
			, (SELECT A_CPN_ID FROM IB_COMPANY WHERE CPN_ID = OF.CPN_ID)	AS aCpnId

		FROM IB_RECOMMEND_OPINION RP
		LEFT OUTER JOIN IB_OFFER OF ON OF.S_NB = RP.OFFER_SNB
		
		WHERE 
		DATE_FORMAT(RP.RG_DT, '%Y-%m-%d')  = DATE_FORMAT(NOW(), '%Y-%m-%d')
				
	
	</select>
	
</sqlMap>
